<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Sam的个人博客</title>
  
  <subtitle>一个程序员的成长记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.ydstudio.net/"/>
  <updated>2020-01-04T15:46:32.000Z</updated>
  <id>https://blog.ydstudio.net/</id>
  
  <author>
    <name>Sam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>以centos7镜像为基础构建一个jdk8和tomcat7的镜像</title>
    <link href="https://blog.ydstudio.net/post/97b746d3.html"/>
    <id>https://blog.ydstudio.net/post/97b746d3.html</id>
    <published>2020-01-04T23:22:55.000Z</published>
    <updated>2020-01-04T15:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先我简单说一下容器的一些知识点</p><ul><li>一个容器只跑一个进程，并且该进程只能前台运行。</li><li>容器有层的概念，如果需要定制容器，应该尽量通过Dockerfile来构建容器。<a id="more"></a><h5 id="什么是-Dockerfile"><a href="#什么是-Dockerfile" class="headerlink" title="什么是 Dockerfile"></a>什么是 Dockerfile</h5></li><li>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7 </span><br><span class="line">MAINTAINERsamdockerdeveloper</span><br><span class="line">RUN mkdir  -p /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">&amp;&amp;mkdir -p /usr/<span class="built_in">local</span>/jdk8</span><br><span class="line">WORKDIR   /usr/<span class="built_in">local</span>/src/</span><br><span class="line">COPY apache-tomcat-7.0.99.zip /usr/<span class="built_in">local</span>/src/</span><br><span class="line">COPY jdk-8u131-linux-x64.tar.gz /usr/<span class="built_in">local</span>/src/</span><br><span class="line">RUN yum update -y \</span><br><span class="line">&amp;&amp;yum install -y unzip  \</span><br><span class="line">&amp;&amp;unzip -p apache-tomcat-7.0.99.zip \</span><br><span class="line">&amp;&amp;cp -R apache-tomcat-7.0.99/* /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">&amp;&amp;chmod +x  /usr/<span class="built_in">local</span>/tomcat7/bin/*.sh \</span><br><span class="line">&amp;&amp;tar -xf jdk-8u131-linux-x64.tar.gz  -C /usr/<span class="built_in">local</span>/jdk8 --strip-components 1</span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk8 \</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar \</span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">ENV CATALINA_BASE /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/local/tomcat7/bin/catalina.sh"</span>,<span class="string">"run"</span>]</span><br></pre></td></tr></table></figure><p>在Dockerfile同级目录里存放已经下载好的apache-tomcat-7.0.99.zip、jdk-8u131-linux-x64.tar.gz。</p><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install wget</span><br><span class="line">RUN wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span></span><br><span class="line">RUN tar -xvf redis.tar.gz</span><br><span class="line">以上执行会创建 3 层镜像。可简化为以下格式：</span><br><span class="line">FROM centos</span><br><span class="line">RUN yum install wget \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> \</span><br><span class="line">    &amp;&amp; tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure><p> 如上，以 &amp;&amp; 符号连接命令，这样执行后，只会创建 1 层镜像。</p><h5 id="开始构建镜像"><a href="#开始构建镜像" class="headerlink" title="开始构建镜像"></a>开始构建镜像</h5><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p><p>以下示例，通过目录下的 Dockerfile 构建一个 samjavawebenv:v2（镜像名称:镜像标签）。</p><p><strong>注</strong>：最后的 . 代表本次执行的上下文路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t  name:tag  .</span></span><br><span class="line">docker build -t  samjavawebenv:v2  .</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我简单说一下容器的一些知识点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个容器只跑一个进程，并且该进程只能前台运行。&lt;/li&gt;
&lt;li&gt;容器有层的概念，如果需要定制容器，应该尽量通过Dockerfile来构建容器。
    
    </summary>
    
    
    
      <category term="linux" scheme="https://blog.ydstudio.net/tags/linux/"/>
    
      <category term="docker" scheme="https://blog.ydstudio.net/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringMvc使用@Async注解实现有返回值和无返回值的异步处理</title>
    <link href="https://blog.ydstudio.net/post/e7e78673.html"/>
    <id>https://blog.ydstudio.net/post/e7e78673.html</id>
    <published>2020-01-03T23:12:21.000Z</published>
    <updated>2020-01-04T15:32:13.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="SpringMvc使用-Async注解实现有返回值和无返回值的异步处理"><a href="#SpringMvc使用-Async注解实现有返回值和无返回值的异步处理" class="headerlink" title="SpringMvc使用@Async注解实现有返回值和无返回值的异步处理"></a>SpringMvc使用@Async注解实现有返回值和无返回值的异步处理</h5><p> 异步调用对应的是同步调用，同步调用指程序按照定义顺序依次执行，每一行程序都必须等待上一行程序执行完成之后才能执行；异步调用指程序在顺序执行时，不等待异步调用的语句返回结果就执行后面的程序。<br> <a id="more"></a></p><h6 id="同步方式调用代码"><a href="#同步方式调用代码" class="headerlink" title="同步方式调用代码"></a>同步方式调用代码</h6><ul><li><p>相关代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务一"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务二"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务三"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同步调用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TaskService task;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">task.doTaskOne();</span><br><span class="line">task.doTaskTwo();</span><br><span class="line">task.doTaskThree();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是运行结果，可以看到三个方法是依次执行的，分别耗时2秒、3秒、4秒、总耗时9秒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">开始做任务一</span><br><span class="line">完成任务一，耗时：2001毫秒</span><br><span class="line">开始做任务二</span><br><span class="line">完成任务二，耗时：3000毫秒</span><br><span class="line">开始做任务三</span><br><span class="line">完成任务三，耗时：4001毫秒</span><br></pre></td></tr></table></figure><p>上面的同步调用，虽然顺利地完成了三个任务，但是执行时间比较长，如果这三个任务没有依赖关系，可以并发执行的话，可以考虑使用异步调用的方法。</p><h6 id="异步方式调用代码无返回值"><a href="#异步方式调用代码无返回值" class="headerlink" title="异步方式调用代码无返回值"></a>异步方式调用代码无返回值</h6><ul><li>首先在spring中配置相关参数开启异步调用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">"taskExecutor"</span> <span class="attr">pool-size</span>=<span class="string">"20"</span> <span class="attr">queue-capacity</span>=<span class="string">"1000"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span> <span class="attr">pool-size</span>=<span class="string">"5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在方法上加上 @Async 注解就能将同步函数变成异步函数，改造后的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务一"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务二"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务三"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新调用之后的运行结果如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">开始做任务三</span><br><span class="line">开始做任务二</span><br><span class="line">开始做任务一</span><br><span class="line">完成任务一，耗时：2000毫秒</span><br><span class="line">完成任务二，耗时：3001毫秒</span><br><span class="line">完成任务三，耗时：4000毫秒</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li><p>@Async 所修饰的函数不要定义为 static 类型，这样异步调用不会生效。</p></li><li><p>调用方法和异步函数不能在一个 class 中。</p></li></ul><h6 id="异步方式调用代码有返回值"><a href="#异步方式调用代码有返回值" class="headerlink" title="异步方式调用代码有返回值"></a>异步方式调用代码有返回值</h6><p>如果想知道异步函数什么时候执行完，那就需要使用 Future (AsyncResult是Future的子类)来返回异步调用的结果。<br>改造后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务一"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务一完成"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务二"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务二完成"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskThree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务三"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务三完成"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>异步方式调用代码有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TaskService task;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList(<span class="number">16</span>);</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start(<span class="string">"接口速度统计"</span>);</span><br><span class="line"><span class="comment">// 3秒超时</span></span><br><span class="line">    <span class="keyword">int</span> timeout = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Future&lt;String&gt; task1 = task.doTaskOne();</span><br><span class="line">        Future&lt;String&gt; task2 = task.doTaskTwo();</span><br><span class="line">        Future&lt;String&gt; task3 = task.doTaskThree();</span><br><span class="line"></span><br><span class="line">String taskString1= task1.get(timeout, TimeUnit.SECONDS);</span><br><span class="line">String taskString2= task2.get(timeout, TimeUnit.SECONDS);</span><br><span class="line">String taskString3= task3.get(timeout, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">result.add(taskString1);</span><br><span class="line">result.add(taskString2);</span><br><span class="line">result.add(taskString3);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (TimeoutException | InterruptedException | ExecutionException e)&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">stopWatch.stop();</span><br><span class="line">log.info(stopWatch.prettyPrint());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">开始做任务三</span><br><span class="line">开始做任务二</span><br><span class="line">开始做任务一</span><br><span class="line">完成任务一，耗时：2001毫秒</span><br><span class="line">完成任务二，耗时：3000毫秒</span><br><span class="line">完成任务三，耗时：4001毫秒</span><br><span class="line"></span><br><span class="line">StopWatch <span class="string">''</span>: running time (millis) = 248</span><br><span class="line">-----------------------------------------</span><br><span class="line">ms     %     Task name</span><br><span class="line">-----------------------------------------</span><br><span class="line">04036  100%  接口速度统计</span><br></pre></td></tr></table></figure><p>刚开始想利用CountDownLatch来实现等待所有线程结束整合结果，后来调整为 Future 的 get(long timeout, TimeUnit unit) 来实现线程的超时控制，我看有些的例子使用死循环来阻塞整合线程的执行结果，这样做是有些问题的，如果有个线程一直没有结束运行，那就完犊子了！</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>异步调用可以提升接口性能。比如导出下载、发送邮件短信等代码，可以使用异步执行。</p><p><a href="https://blog.csdn.net/qqfo24/article/details/81383022" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;SpringMvc使用-Async注解实现有返回值和无返回值的异步处理&quot;&gt;&lt;a href=&quot;#SpringMvc使用-Async注解实现有返回值和无返回值的异步处理&quot; class=&quot;headerlink&quot; title=&quot;SpringMvc使用@Async注解实现有返回值和无返回值的异步处理&quot;&gt;&lt;/a&gt;SpringMvc使用@Async注解实现有返回值和无返回值的异步处理&lt;/h5&gt;&lt;p&gt; 异步调用对应的是同步调用，同步调用指程序按照定义顺序依次执行，每一行程序都必须等待上一行程序执行完成之后才能执行；异步调用指程序在顺序执行时，不等待异步调用的语句返回结果就执行后面的程序。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="SpringMvc" scheme="https://blog.ydstudio.net/tags/SpringMvc/"/>
    
      <category term="Async" scheme="https://blog.ydstudio.net/tags/Async/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7上使用yum安装Docker</title>
    <link href="https://blog.ydstudio.net/post/ef24ce2b.html"/>
    <id>https://blog.ydstudio.net/post/ef24ce2b.html</id>
    <published>2019-12-23T22:30:18.000Z</published>
    <updated>2019-12-23T14:38:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前在 Linux 操作系统上安装 Docker，对系统版本有以下要求：</p><ul><li>CentOS：7</li><li>Debian：7.7（Wheezy LTS）、8.0（Jessie LTS）、9（Stretch）</li><li>Fedora：24、25</li><li>Ubuntu：16.04（Xenial LTS）、14.04（Trusty LTS）、17.04（Zesty）</li></ul><a id="more"></a><h5 id="使用-yum-进行安装"><a href="#使用-yum-进行安装" class="headerlink" title="使用 yum 进行安装"></a>使用 yum 进行安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># Step 3: 更新并安装Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="comment"># Step 4: 开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line"><span class="comment"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。</span></span><br><span class="line"><span class="comment"># 例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。</span></span><br><span class="line"><span class="comment"># vim /etc/yum.repos.d/docker-ee.repo</span></span><br><span class="line"><span class="comment">#   将[docker-ce-test]下方的enabled=0修改为enabled=1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span></span><br><span class="line"><span class="comment">#   Loading mirror speeds from cached hostfile</span></span><br><span class="line"><span class="comment">#   Loaded plugins: branch, fastestmirror, langpacks</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   Available Packages</span></span><br><span class="line"><span class="comment"># Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-[VERSION]</span></span><br></pre></td></tr></table></figure><h5 id="安装校验"><a href="#安装校验" class="headerlink" title="安装校验"></a>安装校验</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6gp8l1zfgu3hmvia6gz ~]<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.5</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.12</span><br><span class="line"> Git commit:        633a0ea</span><br><span class="line"> Built:             Wed Nov 13 07:25:41 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.5</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.12</span><br><span class="line">  Git commit:       633a0ea</span><br><span class="line">  Built:            Wed Nov 13 07:24:18 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.2.10</span><br><span class="line">  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc8+dev</span><br><span class="line">  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure><p>至此docker安装完成。</p><p><a href="https://help.aliyun.com/document_detail/60742.html#title-8ov-nf9-t1l" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前在 Linux 操作系统上安装 Docker，对系统版本有以下要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS：7&lt;/li&gt;
&lt;li&gt;Debian：7.7（Wheezy LTS）、8.0（Jessie LTS）、9（Stretch）&lt;/li&gt;
&lt;li&gt;Fedora：24、25&lt;/li&gt;
&lt;li&gt;Ubuntu：16.04（Xenial LTS）、14.04（Trusty LTS）、17.04（Zesty）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://blog.ydstudio.net/tags/docker/"/>
    
      <category term="centos" scheme="https://blog.ydstudio.net/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装zookeeper</title>
    <link href="https://blog.ydstudio.net/post/d97b6c63.html"/>
    <id>https://blog.ydstudio.net/post/d97b6c63.html</id>
    <published>2019-12-07T22:15:07.000Z</published>
    <updated>2019-12-15T15:50:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>从<a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.5.6/" target="_blank" rel="noopener">zookeeper</a>下载，注意下载带-bin后缀的安装包，不然安装之后启动会出现以下的错误。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">错误: 找不到或无法加载主类org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br></pre></td></tr></table></figure><p>解决方案<br>原来是因为从版本3.5.5开始，带有bin名称的包才是我们想要的下载可以直接使用的里面有编译后的二进制的包，而之前的普通的tar.gz的包里面是只是源码的包无法直接使用。</p><p>将下载后的安装包解压到 /usr/local/zookeeper 目录下，进行后续的安装配置。</p><h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><p>在conf目录下拷贝 zoo_sample.cfg 文件新建 zoo.cfg配置文件，修改或者新加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper/data</span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#tickTime: zookeeper中使用的基本时间单位, 毫秒值.</span></span><br><span class="line"><span class="comment">#dataDir: 数据目录. 可以是任意目录.</span></span><br><span class="line"><span class="comment">#dataLogDir: log目录, 同样可以是任意目录. 如果没有设置该参数, 将使用和#dataDir相同的设置.此目录可以不加</span></span><br><span class="line"><span class="comment">#clientPort: 监听client连接的端口号.</span></span><br></pre></td></tr></table></figure><h5 id="将zookeeper加入系统环境变量中"><a href="#将zookeeper加入系统环境变量中" class="headerlink" title="将zookeeper加入系统环境变量中"></a>将zookeeper加入系统环境变量中</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/sphinx/bin:/usr/<span class="built_in">local</span>/elasticsearch/bin:/usr/<span class="built_in">local</span>/mycat/bin:/usr/<span class="built_in">local</span>/zookeeper/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#让环境变量立马生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">Sam-Mac-2:~ Sam$ zkServer.sh start</span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">Sam-Mac-2:~ Sam$ zkServer.sh stop</span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从&lt;a href=&quot;https://archive.apache.org/dist/zookeeper/zookeeper-3.5.6/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zookeeper&lt;/a&gt;下载，注意下载带-bin后缀的安装包，不然安装之后启动会出现以下的错误。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="zookeeper" scheme="https://blog.ydstudio.net/tags/zookeeper/"/>
    
      <category term="mac" scheme="https://blog.ydstudio.net/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.ydstudio.net/post/4a17b156.html"/>
    <id>https://blog.ydstudio.net/post/4a17b156.html</id>
    <published>2019-11-10T13:19:35.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>解决nested exception is java.lang.IllegalArgumentException Could not resolve placeholder alipay.appId in string value  $ {alipay.appId}</title>
    <link href="https://blog.ydstudio.net/post/cf36aee2.html"/>
    <id>https://blog.ydstudio.net/post/cf36aee2.html</id>
    <published>2019-09-18T23:52:05.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发的时候出现了这种错误 </p><p>nested exception is java .lang.IllegalArgumentException: Could not resolve placeholder ‘alipay.appId’ in string value<br> “${alipay.appId}”</p><a id="more"></a><p>大意是Spring不能处理第二个属性文件中的配置信息，因为Spring不允许定义多个PropertyPlaceholderConfigurer或context:property-placeholder。<br>Spring用反射扫描的发现机制，在探测到Spring容器中有一个org.springframework.beans.factory.config.PropertyPlaceholderConfigurer的<br>Bean就会停止对剩余PropertyPlaceholderConfigurer的扫描（Spring 3.1已经使用PropertySourcesPlaceholderConfigurer替代 PropertyPlaceholderConfigurer了）。<br>换句话说，即Spring容器仅允许最多定义一个PropertyPlaceholderConfigurer(或context:property-placeholder)，其余的会被Spring忽略掉（其实Spring如果提供一个警告就好了）。 </p><h4 id="问题的解决方案"><a href="#问题的解决方案" class="headerlink" title="问题的解决方案"></a>问题的解决方案</h4><ol><li><p>通配符解决、逗号分隔</p><ul><li>使用通配符让spring一次性读取多个属性文件到一个 PropertyPlaceholderConfigurer bean中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span>  <span class="attr">location</span>=<span class="string">"classpath:conf/*.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>或者使用 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/db.properties,conf/alipay.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>使用多个<a href="context:property-placeholder" target="_blank" rel="noopener">context:property-placeholder</a> 分开定义，注意要加上 <strong>ignore-unresolvable</strong>  属性<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/db.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/alipay.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>在每个PropertySourcesPlaceholderConfigurer配置中添加  <property name="ignoreUnresolvablePlaceholders" value="true"/>  或者在每个context:property-placeholder中都加上ignore-unresolvable=”true”  因为在你使用@Value(“${xx}”)<br>或在xml中使用${xx}获取属性时，Spring会在第一个读取到的属性文件中去找，如果没有就直接抛出异常，而不会继续去第二个属性文件中找</li></ul><ol start="2"><li>一个PropertySourcesPlaceholderConfigurer中包含多个属性文件，和方案1原理相同<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.PropertySourcesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:db.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:alipay.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发的时候出现了这种错误 &lt;/p&gt;
&lt;p&gt;nested exception is java .lang.IllegalArgumentException: Could not resolve placeholder ‘alipay.appId’ in string value&lt;br&gt; “${alipay.appId}”&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.ydstudio.net/tags/java/"/>
    
      <category term="spring" scheme="https://blog.ydstudio.net/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Java获取一天的最大时间23:59:59和最小时间00:00:00</title>
    <link href="https://blog.ydstudio.net/post/1ef2d20f.html"/>
    <id>https://blog.ydstudio.net/post/1ef2d20f.html</id>
    <published>2019-09-04T23:49:24.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java获取一天的最大时间23:59:59和最小时间00:00:00</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加上毫秒数</span></span><br><span class="line">        SimpleDateFormat sDateFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(sDateFormat.format(getAfterYearDateMaxTime(<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若干年之后的23:59:59</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getAfterYearDateMaxTime</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</span><br><span class="line">        Calendar calendarEnd = Calendar.getInstance();</span><br><span class="line">        calendarEnd.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">        calendarEnd.add(Calendar.YEAR,year);</span><br><span class="line">        calendarEnd.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">        calendarEnd.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">        calendarEnd.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MySQL数据库对于毫秒大于500的数据进行进位，所有就造成的MySQL中的时间多一秒,防止mysql自动加一秒,毫秒设为0</span></span><br><span class="line">        calendarEnd.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> calendarEnd.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当天的最大时间23:59:59</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDayMaxTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calendar calendarEnd = Calendar.getInstance();</span><br><span class="line">        calendarEnd.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">        calendarEnd.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">        calendarEnd.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">        calendarEnd.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// MySQL数据库对于毫秒大于500的数据进行进位，所有就造成的MySQL中的时间多一秒,防止mysql自动加一秒,毫秒设为0</span></span><br><span class="line">        calendarEnd.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> calendarEnd.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当天的最小时间00:00:00</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDayMinTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calendar calendarEnd = Calendar.getInstance();</span><br><span class="line">        calendarEnd.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">        calendarEnd.set(Calendar.HOUR_OF_DAY, <span class="number">00</span>);</span><br><span class="line">        calendarEnd.set(Calendar.MINUTE, <span class="number">00</span>);</span><br><span class="line">        calendarEnd.set(Calendar.SECOND, <span class="number">00</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// MySQL数据库对于毫秒大于500的数据进行进位，所有就造成的MySQL中的时间多一秒,防止mysql自动加一秒,毫秒设为0</span></span><br><span class="line">        calendarEnd.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> calendarEnd.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取3年后的23:59:59，毫秒数设置成0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">09</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59.000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java获取一天的最大时间23:59:59和最小时间00:00:00&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.ydstudio.net/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>IDEA下tomcat启动后 server乱码，Tomcat Catalina Log和Tomcat Localhost Log乱码问题的解决 </title>
    <link href="https://blog.ydstudio.net/post/35c3eddf.html"/>
    <id>https://blog.ydstudio.net/post/35c3eddf.html</id>
    <published>2019-06-03T23:48:03.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>不改的话，不影响使用，因为报错基本都是英文显示的。但是这几个中文字乱码的看着难受。</p><p>乱码的根本原因：</p><p>Windows系统的cmd是GBK编码的，所以IDEA的下方log输出的部分的编码也是GBK的，然而Tomcat 9.0 版本默认log输出是UTF-8编码的，采用了两种不同的编码方式就会导致乱码。</p><a id="more"></a><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="方法一-修改Tomcat-日志输出为GBK编码"><a href="#方法一-修改Tomcat-日志输出为GBK编码" class="headerlink" title="方法一 修改Tomcat 日志输出为GBK编码"></a>方法一 修改Tomcat 日志输出为GBK编码</h5><p>先打开tomcat的安装目录</p><p>编辑 conf 目录下的 logging.properties,把里面的UTF-8 通通改成 GBK,保存，重启Tomcat，即可生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line"># this work for additional information regarding copyright ownership.</span><br><span class="line"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line"># (the "License"); you may not use this file except in compliance with</span><br><span class="line"># the License.  You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an "AS IS" BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line">handlers = 1catalina.org.apache.juli.FileHandler, 2localhost.org.apache.juli.FileHandler, 3manager.org.apache.juli.FileHandler, 4host-manager.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler</span><br><span class="line"></span><br><span class="line">.handlers = 1catalina.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler</span><br><span class="line"></span><br><span class="line">############################################################</span><br><span class="line"># Handler specific properties.</span><br><span class="line"># Describes specific configuration info for Handlers.</span><br><span class="line">############################################################</span><br><span class="line"></span><br><span class="line">1catalina.org.apache.juli.FileHandler.level = FINE</span><br><span class="line">1catalina.org.apache.juli.FileHandler.directory = $&#123;catalina.base&#125;/logs</span><br><span class="line">1catalina.org.apache.juli.FileHandler.prefix = catalina.</span><br><span class="line">1catalina.org.apache.juli.FileHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line">2localhost.org.apache.juli.FileHandler.level = FINE</span><br><span class="line">2localhost.org.apache.juli.FileHandler.directory = $&#123;catalina.base&#125;/logs</span><br><span class="line">2localhost.org.apache.juli.FileHandler.prefix = localhost.</span><br><span class="line">2localhost.org.apache.juli.FileHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line">3manager.org.apache.juli.FileHandler.level = FINE</span><br><span class="line">3manager.org.apache.juli.FileHandler.directory = $&#123;catalina.base&#125;/logs</span><br><span class="line">3manager.org.apache.juli.FileHandler.prefix = manager.</span><br><span class="line">3manager.org.apache.juli.FileHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line">4host-manager.org.apache.juli.FileHandler.level = FINE</span><br><span class="line">4host-manager.org.apache.juli.FileHandler.directory = $&#123;catalina.base&#125;/logs</span><br><span class="line">4host-manager.org.apache.juli.FileHandler.prefix = host-manager.</span><br><span class="line">4host-manager.org.apache.juli.FileHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line">java.util.logging.ConsoleHandler.level = FINE</span><br><span class="line">java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter</span><br><span class="line">java.util.logging.ConsoleHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################################################</span><br><span class="line"># Facility specific properties.</span><br><span class="line"># Provides extra control for each logger.</span><br><span class="line">############################################################</span><br><span class="line"></span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO</span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = 2localhost.org.apache.juli.FileHandler</span><br><span class="line"></span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].level = INFO</span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].handlers = 3manager.org.apache.juli.FileHandler</span><br><span class="line"></span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].level = INFO</span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].handlers = 4host-manager.org.apache.juli.FileHandler</span><br><span class="line"></span><br><span class="line"># For example, set the org.apache.catalina.util.LifecycleBase logger to log</span><br><span class="line"># each component that extends LifecycleBase changing state:</span><br><span class="line">#org.apache.catalina.util.LifecycleBase.level = FINE</span><br><span class="line"></span><br><span class="line"># To see debug messages in TldLocationsCache, uncomment the following line:</span><br><span class="line">#org.apache.jasper.compiler.TldLocationsCache.level = FINE</span><br><span class="line"></span><br><span class="line">java.util.logging.ConsoleHandler.encoding = UTF-8</span><br></pre></td></tr></table></figure><h5 id="方法二-修改IDEA为UTF-8编码"><a href="#方法二-修改IDEA为UTF-8编码" class="headerlink" title="方法二 修改IDEA为UTF-8编码"></a>方法二 修改IDEA为UTF-8编码</h5><p>idea.exe.vmoptions、idea64.exe.vmoptions</p><p>修改idea.exe.vmoptions和idea64.exe.vmoptions这两个文件</p><p>分别在这两个文件的最后，添加一行 -Dfile.encoding=UTF-8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m</span><br><span class="line">-Xmx750m</span><br><span class="line">-XX:ReservedCodeCacheSize=<span class="number">240</span>m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=<span class="number">50</span></span><br><span class="line">-ea</span><br><span class="line">-Dsun.io.useCanonCaches=<span class="keyword">false</span></span><br><span class="line">-Djava.net.preferIPv4Stack=<span class="keyword">true</span></span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes=<span class="string">""</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line"></span><br><span class="line">-Dfile.encoding=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure><p>这个参数的作用是强制系统文件使用UTF-8编码,改完之后保存，重启IDEA即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;不改的话，不影响使用，因为报错基本都是英文显示的。但是这几个中文字乱码的看着难受。&lt;/p&gt;
&lt;p&gt;乱码的根本原因：&lt;/p&gt;
&lt;p&gt;Windows系统的cmd是GBK编码的，所以IDEA的下方log输出的部分的编码也是GBK的，然而Tomcat 9.0 版本默认log输出是UTF-8编码的，采用了两种不同的编码方式就会导致乱码。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="tomcat" scheme="https://blog.ydstudio.net/tags/tomcat/"/>
    
      <category term="idea" scheme="https://blog.ydstudio.net/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript如何面向对象</title>
    <link href="https://blog.ydstudio.net/post/d7445999.html"/>
    <id>https://blog.ydstudio.net/post/d7445999.html</id>
    <published>2019-05-23T23:47:08.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于JavaScript编写类的方式，总结一下JavaScript编写类的几种写法以及这几种写法的优缺点。</p><a id="more"></a><h4 id="构造函数方式"><a href="#构造函数方式" class="headerlink" title="构造函数方式"></a>构造函数方式</h4><p>基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> 类名(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.属性名;<span class="comment">//公共属性</span></span><br><span class="line">     <span class="keyword">var</span> 属性名;<span class="comment">//私有属性</span></span><br><span class="line">    <span class="comment">/*凡是定义类的公共属性和公共方法都要使用this*/</span></span><br><span class="line">    <span class="comment">//定义类的公共函数</span></span><br><span class="line">    <span class="keyword">this</span>.函数名=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ..... </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义类的私有函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*定义一个Person类*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">_name,_age,_salary</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//Person类的公开属性，类的公开属性的定义方式是：”this.属性名“</span></span><br><span class="line">        <span class="keyword">this</span>.name=_name;</span><br><span class="line">        <span class="comment">//Person类的私有属性，类的私有属性的定义方式是：”var 属性名“</span></span><br><span class="line">        <span class="keyword">var</span> age=_age;<span class="comment">//私有属性</span></span><br><span class="line">        <span class="keyword">var</span> salary=_salary;<span class="comment">//私有属性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*定义私有属性Age的对外公开访问方法*/</span></span><br><span class="line">        <span class="keyword">this</span>.setAge = <span class="function"><span class="keyword">function</span>(<span class="params">intAge</span>) </span>&#123;</span><br><span class="line">            age = intAge;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*定义私有属性Age的对外公开访问方法*/</span></span><br><span class="line">        <span class="keyword">this</span>.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义Person类的公开方法(特权方法)，类的公开方法的定义方式是：”this.functionName=function()&#123;.....&#125;“</span></span><br><span class="line">        <span class="keyword">this</span>.Show=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"在公开方法里面访问类的私有属性是允许的，age="</span>+age+<span class="string">"\t"</span>+<span class="string">"salary="</span>+salary);<span class="comment">//在公开方法里面访问类的私有属性是允许的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//公共方法</span></span><br><span class="line">        <span class="keyword">this</span>.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"在公开方法里面访问类的私有方法是允许的"</span>);</span><br><span class="line">            privateFn();<span class="comment">//在公开方法里面调用类的私有方法</span></span><br><span class="line">            privateFn2();<span class="comment">//在公开方法里面调用类的私有方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义Person类的私有方法(内部方法)，</span></span><br><span class="line"><span class="comment">        类的私有方法的定义方式是：”function functionName()&#123;.....&#125;“，</span></span><br><span class="line"><span class="comment">        或者 var functionName=function()&#123;....&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">privateFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有函数privateFn"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> privateFn2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有函数privateFn2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试Person类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"孤傲苍狼"</span>,<span class="number">24</span>,<span class="number">2300</span>);</span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"白虎神皇"</span>,<span class="number">24</span>,<span class="number">2300</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1 instanceof Person的结果是："</span>+(p1 <span class="keyword">instanceof</span> Person));<span class="comment">//p1是Person类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2 instanceof Person的结果是："</span>+(p2 <span class="keyword">instanceof</span> Person));<span class="comment">//p2是Person类的实例，结果是true</span></span><br><span class="line">    <span class="comment">//当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"比较p1和p2这两个对象的show方法的内存地址是否一样：p1.show== p2.show的结果是："</span>+(p1.show == p2.show));<span class="comment">//false</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.show == p2.show的结果是："</span>+(p1.show == p2.show)+<span class="string">"，这证明p1对象和p2对象不是共享一个show方法，在内存中show方法的代码有2份，存放在两块内存区域"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"name是Person类定义的public属性，可以使用类的对象去直接访问类的public属性"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.name="</span>+p1.name);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"age和salary是Person类定义的private属性，不能使用类的对象去直接访问类私有属性，这是访问不了的，结果都是undefined"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.age="</span>+p1.age+<span class="string">"，"</span>+<span class="string">"p1.salary="</span>+p1.salary)<span class="comment">//不能使用类的对象去直接访问类私有属性，这是访问不了的，结果都是undefined</span></span><br><span class="line">    p1.show();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    p1.publicMethod();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    p1.setAge(<span class="number">24</span>);<span class="comment">//使用public方法setAge方法为私有属性age赋值</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"使用public方法getAge方法获取私有属性age的值，p1.getAge()="</span>+p1.getAge());<span class="comment">//使用getAge方法获取私有属性age的值</span></span><br><span class="line">    <span class="comment">//document.writeln("p1.privateFn()："+p1.privateFn()+"&amp;nbsp;p1.privateFn2()："+p1.privateFn2());//不能使用类的对象去调用类的私有方法，这里会报错”对象不支持此属性或者方法</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br></pre></td></tr></table></figure><p>这种方式的优点是：可以根据参数来构造不同的对象实例 ，每个对象的属性一般是不相同的，缺点是构造每个实例对象时，方法不能共享，Person类里面定义的那些方法，p1对象有一份，p2也有一份，那么在内存中就得开辟两块内存空间来分别存储p1的方法和p2的方法，这样就造成了内存的浪费。对于一个类的不同实例对象，这些对象的属性一般是不相同的，但是方法是相同的，所以节约内存的做法就是把方法放到内存的一块区域中存放，然后每个实例对象都从这块内存中取出方法。</p><h4 id="原型方式"><a href="#原型方式" class="headerlink" title="原型方式"></a>原型方式</h4><p>需要说明的是，使用原型方式编写JavaScript类是无法给类添加私有属性和私有方法的，使用原型方式添加的属性和方法都是public的。</p><ul><li><p>写法一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*定义一个Person类*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">_name,_age,_weight,_height</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.init(_name,_age,_weight,_height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*使用原型的方式定义Person类的public属性：name,age,weight,height，使用原型的方式添加的属性都是public的*/</span></span><br><span class="line">    Person.prototype.name;</span><br><span class="line">    Person.prototype.age;</span><br><span class="line">    Person.prototype.weight;</span><br><span class="line">    Person.prototype.height;</span><br><span class="line">    <span class="comment">/*使用原型的方式给Person类添加public方法，使用原型的方式添加的方法都是public的*/</span></span><br><span class="line">    <span class="comment">/*使用原型的方式给Person类添加init方法*/</span></span><br><span class="line">    Person.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">_name,_age,_weight,_height</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name != <span class="literal">undefined</span> &amp;&amp; _age!=<span class="literal">undefined</span> &amp;&amp; _weight!=<span class="literal">undefined</span> &amp;&amp; _height!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = _name;</span><br><span class="line">            <span class="keyword">this</span>.age = _age;</span><br><span class="line">            <span class="keyword">this</span>.weight=_weight;</span><br><span class="line">            <span class="keyword">this</span>.height=_height;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"this.name="</span>+<span class="keyword">this</span>.name+<span class="string">",this.age="</span>+<span class="keyword">this</span>.age+<span class="string">",this.weight="</span>+<span class="keyword">this</span>.weight+<span class="string">",this.height="</span>+<span class="keyword">this</span>.height);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*使用原型的方式给Person类添加show方法*/</span></span><br><span class="line">    Person.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.writeln(<span class="string">"show method"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"孤傲苍狼"</span>,<span class="number">24</span>,<span class="number">115</span>,<span class="number">160</span>);</span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"白虎神皇"</span>,<span class="number">25</span>,<span class="number">120</span>,<span class="number">170</span>);</span><br><span class="line">    <span class="keyword">var</span> p3 = <span class="keyword">new</span> Person();</span><br><span class="line">    p3.init(<span class="string">"玄天邪帝"</span>,<span class="number">26</span>,<span class="number">130</span>,<span class="number">180</span>);<span class="comment">//调用public方法init初始化p3对象</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1 instanceof Person的结果是："</span>+(p1 <span class="keyword">instanceof</span> Person));<span class="comment">//p1是Person类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2 instanceof Person的结果是："</span>+(p2 <span class="keyword">instanceof</span> Person));<span class="comment">//p2是Person类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p3 instanceof Person的结果是："</span>+(p3 <span class="keyword">instanceof</span> Person));<span class="comment">//p3是Person类的实例，结果是true</span></span><br><span class="line">    <span class="comment">//当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"比较p1和p2这两个对象的show方法的内存地址是否一样：p1.show == p2.show的结果是："</span>+(p1.show == p2.show));<span class="comment">//true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.show == p2.show的结果是："</span>+(p1.show == p2.show)+<span class="string">"，这证明p1对象和p2对象共享一个show方法，在内存中show方法的代码只有一份，存放在内存的一块区域"</span>);<span class="comment">//true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.name="</span>+p1.name+<span class="string">"，p1.age="</span>+p1.age+<span class="string">"，p1.weight="</span>+p1.weight+<span class="string">"，p1.height="</span>+p1.height);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2.name="</span>+p2.name+<span class="string">"，p2.age="</span>+p2.age+<span class="string">"，p2.weight="</span>+p2.weight+<span class="string">"，p2.height="</span>+p2.height);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    p3.name=<span class="string">"灭世魔尊"</span>;<span class="comment">//为公共属性重新赋值</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p3.name="</span>+p3.name);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    p1.show();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br></pre></td></tr></table></figure></li><li><p>写法二<br>使用原型方式给类定义public属性和public方法更加优雅的写法，我个人推荐使用这种方式，这种方式看起来比较舒服</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义类Person2*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*使用原型方式给类定义public属性和public方法更加优雅的写法*/</span></span><br><span class="line">    Person2.prototype = &#123;</span><br><span class="line">        name:<span class="string">""</span>,<span class="comment">//public属性</span></span><br><span class="line">        age:<span class="number">0</span>,<span class="comment">//public属性</span></span><br><span class="line">        weight:<span class="number">0</span>,<span class="comment">//public属性</span></span><br><span class="line">        height:<span class="number">0</span>,<span class="comment">//public属性</span></span><br><span class="line">        <span class="comment">/*public方法*/</span></span><br><span class="line">        init:<span class="function"><span class="keyword">function</span>(<span class="params">_name,_age,_weight,_height</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = _name;</span><br><span class="line">            <span class="keyword">this</span>.age = _age;</span><br><span class="line">            <span class="keyword">this</span>.weight=_weight;</span><br><span class="line">            <span class="keyword">this</span>.height=_height;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"this.name="</span>+<span class="keyword">this</span>.name+<span class="string">",this.age="</span>+<span class="keyword">this</span>.age+<span class="string">",this.weight="</span>+<span class="keyword">this</span>.weight+<span class="string">",this.height="</span>+<span class="keyword">this</span>.height);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/*public方法*/</span></span><br><span class="line">        show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"show method"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">    <span class="keyword">var</span> p2_1 = <span class="keyword">new</span> Person2();</span><br><span class="line">    <span class="keyword">var</span> p2_2 = <span class="keyword">new</span> Person2();</span><br><span class="line">    p2_1.init(<span class="string">"孤傲苍狼"</span>,<span class="number">24</span>,<span class="number">115</span>,<span class="number">160</span>);</span><br><span class="line">    p2_2.init(<span class="string">"白虎神皇"</span>,<span class="number">25</span>,<span class="number">120</span>,<span class="number">170</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_1.name="</span>+p2_1.name+<span class="string">"，p2_1.age="</span>+p2_1.age+<span class="string">"，p2_1.weight="</span>+p2_1.weight+<span class="string">"，p2_1.height="</span>+p2_1.height);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_2.name="</span>+p2_2.name+<span class="string">"，p2_2.age="</span>+p2_2.age+<span class="string">"，p2_2.weight="</span>+p2_2.weight+<span class="string">"，p2_2.height="</span>+p2_2.height);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_1 instanceof Person2的结果是："</span>+(p2_1 <span class="keyword">instanceof</span> Person2));<span class="comment">//p2_1是Person2类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_2 instanceof Person2的结果是："</span>+(p2_2 <span class="keyword">instanceof</span> Person2));<span class="comment">//p2_2是Person2类的实例，结果是true</span></span><br><span class="line">    <span class="comment">//当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"比较p2_1和p2_2这两个对象的init方法的内存地址是否一样：p2_1.init == p2_2.init的结果是："</span>+(p2_1.init == p2_2.init));<span class="comment">//true</span></span><br><span class="line">    p2_1.name=<span class="string">"灭世魔尊"</span>;<span class="comment">//为公共属性重新赋值</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_1.name="</span>+p2_1.name);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    p2_1.show();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br></pre></td></tr></table></figure><h4 id="构造函数-原型"><a href="#构造函数-原型" class="headerlink" title="构造函数+原型"></a>构造函数+原型</h4><p>　构造函数方式和原型方式都有各自的优缺点，因此可以把这两种方式合并起来，用构造函数方式来定义类的属性(public属性，private属性)，用原型方式来定义类的方法(public方法)。互补不足，这就有了第三种写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义一个Person类*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">_name,_age,_salary</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//在Person类内部定义类的public属性和private属性以及private方法</span></span><br><span class="line">        <span class="comment">//Person类的公开属性，类的公开属性的定义方式是：”this.属性名“</span></span><br><span class="line">        <span class="keyword">this</span>.name=_name;</span><br><span class="line">        <span class="comment">//Person类的私有属性，类的私有属性的定义方式是：”var 属性名“</span></span><br><span class="line">        <span class="keyword">var</span> age=_age;<span class="comment">//私有属性，只能在类内部使用</span></span><br><span class="line">        <span class="keyword">var</span> salary=_salary;<span class="comment">//私有属性，只能在类内部使用</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义Person类的私有方法(内部方法)，只能在类内部使用</span></span><br><span class="line"><span class="comment">        类的私有方法的定义方式是：”function functionName()&#123;.....&#125;“，</span></span><br><span class="line"><span class="comment">        或者 var functionName=function()&#123;....&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">privateFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有属性age，只能在Person类内部使用，初始化后age="</span>+age);</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有函数privateFn，只能在Person类内部使用"</span>);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> privateFn2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有属性salary，只能在Person类内部使用，初始化后salary="</span>+salary);</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有函数privateFn2，只能在Person类内部使用"</span>);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        privateFn();<span class="comment">//在Person类内部调用私有方法</span></span><br><span class="line">        privateFn2();<span class="comment">//在Person类内部调用私有方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用prototype原型方式定义的方法(public方法)是无法访问类的私有属性和私有方法的</span></span><br><span class="line">    <span class="comment">//使用prototype原型方式定义Person类的方public方法</span></span><br><span class="line">    Person.prototype=&#123;</span><br><span class="line">        setName:<span class="function"><span class="keyword">function</span>(<span class="params">_name</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = _name;</span><br><span class="line">            <span class="comment">//privateFn();//不能调用Person类定义的私有方法privateFn()，会报错：缺少对象</span></span><br><span class="line">        &#125;,</span><br><span class="line">        getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;,</span><br><span class="line">        show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"公开方法show"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//公共方法</span></span><br><span class="line">        publicMethod:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"公开方法publicMethod"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"孤傲苍狼"</span>,<span class="number">24</span>,<span class="number">2300</span>);</span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"白虎神皇"</span>,<span class="number">25</span>,<span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1 instanceof Person的结果是："</span>+(p1 <span class="keyword">instanceof</span> Person));<span class="comment">//p1是Person类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2 instanceof Person的结果是："</span>+(p2 <span class="keyword">instanceof</span> Person));<span class="comment">//p2是Person类的实例，结果是true</span></span><br><span class="line">    <span class="comment">//当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"比较p1和p2这两个对象的show方法的内存地址是否一样：p1.show== p2.show的结果是："</span>+(p1.show == p2.show));<span class="comment">//true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.show == p2.show的结果是："</span>+(p1.show == p2.show)+<span class="string">"，这证明p1对象和p2对象共享一个show方法，在内存中show方法的代码有1份，存放在1块内存区域"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"name是Person类定义的public属性，可以使用类的对象去直接访问类的public属性"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.name="</span>+p1.name);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"age和salary是Person类定义的private属性，不能使用类的对象去直接访问类私有属性，这是访问不了的，结果都是undefined"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.age="</span>+p1.age+<span class="string">"，"</span>+<span class="string">"p1.salary="</span>+p1.salary)<span class="comment">//不能使用类的对象去直接访问类私有属性，这是访问不了的，结果都是undefined</span></span><br><span class="line">    p1.show();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    p1.publicMethod();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    p1.setName(<span class="string">"玄天邪帝"</span>);<span class="comment">//调用类的公共函数设置为name属性重新赋值</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.getName="</span>+p1.getName());</span><br><span class="line">    <span class="comment">//document.writeln("p1.privateFn()："+p1.privateFn()+"&amp;nbsp;p1.privateFn2()："+p1.privateFn2());//不能使用类的对象去调用类的私有方法，这里会报错”对象不支持此属性或者方法</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br></pre></td></tr></table></figure><p>第三种方式通过前两种方式的结合，算是达到了一个比较理想的写法了，可以通过传参构造对象实例，对象实例都共享同一份方法不造成内存浪费。第三种方式在开发中用得最多，我本人也是采用这种方式来编写JavaScript类。</p><p><a href="https://www.cnblogs.com/xdp-gacl/p/3700840.html" target="_blank" rel="noopener">查看原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于JavaScript编写类的方式，总结一下JavaScript编写类的几种写法以及这几种写法的优缺点。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://blog.ydstudio.net/tags/JavaScript/"/>
    
      <category term="oop" scheme="https://blog.ydstudio.net/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo消费者consumer捕捉服务提供者provider抛出的自定义异常</title>
    <link href="https://blog.ydstudio.net/post/2e0453a7.html"/>
    <id>https://blog.ydstudio.net/post/2e0453a7.html</id>
    <published>2019-05-20T23:44:33.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在自己的业务系统中，通常会用到自定义的业务异常类，这个异常会继承extends RuntimeException，当发生业务限制的时候，会throw出来。但是在使用dubbo进行soa治理的时候，会发现provider抛出的异常，在custom端并不能正确的捕获。即便我们在provider和custom都有导入相同framework.jar下面的BusinessException异常，并且抛出这个异常，在Consumer端只会打印一行异常信息，获取不到正常的异常。百度才知道Dubbo对抛出得异常用一个ExceptionFilter的类进行拦截。</p><a id="more"></a><p>在一个公共包里定义一个异常类，继承自RuntimeException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String code, String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务提供者的Dubbo配置文件中添加下面的内容，主要就是自定义exceptionFilter，然后排出dubbo自带的exceptionFilter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string"> http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://dubbo.apache.org/schema/dubbo/dubbo.xsd 上面配置为这个一直报错，改为 http://code.alibabatech.com/schema/dubbo/dubbo.xsd --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用于配置当前应用信息，不管该应用是提供者还是消费者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span>  <span class="attr">name</span>=<span class="string">"dubbo-web-provide"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于配置连接注册中心相关信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://localhost:2181"</span> <span class="attr">timeout</span>=<span class="string">"30000"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置redis连接参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--具体参数配置见com.alibaba.dubbo.registry.redis.RedisRegistry.class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"max.idle"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"min.idle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"max.active"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"max.total"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">最重要的就是下面的配置：自定义exceptionFilter，然后排出dubbo自带的exceptionFilter</span></span><br><span class="line"><span class="comment">payload 设置传输的最大值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">filter</span>=<span class="string">"dubboExceptionFilter,-exception"</span> <span class="attr">payload</span>=<span class="string">"123886080"</span> &gt;</span><span class="tag">&lt;/<span class="name">dubbo:provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> <span class="attr">accesslog</span>=<span class="string">"true"</span> <span class="attr">serialization</span>=<span class="string">"hessian2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实现类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"cn.ydstudio.dubbo.web.provide.serviceimpl.HelloServiceImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"goodsService"</span> <span class="attr">class</span>=<span class="string">"cn.ydstudio.dubbo.web.provide.serviceimpl.GoodsServiceImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"goodsService2"</span> <span class="attr">class</span>=<span class="string">"cn.ydstudio.dubbo.web.provide.serviceimpl.GoodsServiceImpl2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"goodsOrderServiceRemoteImpl"</span> <span class="attr">class</span>=<span class="string">"cn.ydstudio.dubbo.web.provide.serviceimpl.GoodsOrderServiceRemoteImpl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义暴露服务的接口，用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--每个接口都应定义版本号，为后续不兼容升级提供可能 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--ref：服务的真正实现类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"cn.ydstudio.dubbo.rpc.service.HelloService"</span> <span class="attr">ref</span>=<span class="string">"helloService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> <span class="attr">retries</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"cn.ydstudio.dubbo.rpc.service.GoodsService"</span> <span class="attr">ref</span>=<span class="string">"goodsService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> <span class="attr">retries</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"cn.ydstudio.dubbo.rpc.service.GoodsService"</span> <span class="attr">ref</span>=<span class="string">"goodsService2"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> <span class="attr">retries</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"cn.ydstudio.dubbo.rpc.service.GoodsOrderServiceRemote"</span> <span class="attr">ref</span>=<span class="string">"goodsOrderServiceRemoteImpl"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> <span class="attr">retries</span>=<span class="string">"0"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"querGoodsOrderList"</span> <span class="attr">timeout</span>=<span class="string">"1000000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--监控中心配置 监控中心协议，如果为protocol="registry"，表示从注册中心发现监控中心地址，否则直连监控中心。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dubbo:monitor protocol="registry"&gt;&lt;/dubbo:monitor&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 直连监控中心服务器地址 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;dubbo:monitor address="localhost:6379"&gt;&lt;/dubbo:monitor&gt; --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最重要的继承ExceptionFilter，然后重写invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ydstudio.dubbo.web.provide.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ydstudio.common.tools.exception.BizException;</span><br><span class="line"><span class="keyword">import</span> cn.ydstudio.common.tools.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.logger.Logger;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.logger.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.filter.ExceptionFilter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.service.GenericService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述:&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 刘洋【19037900】</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/4/30 18:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboExceptionFilter</span> <span class="keyword">extends</span> <span class="title">ExceptionFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboExceptionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(LoggerFactory.getLogger(com.alibaba.dubbo.rpc.filter.ExceptionFilter<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboExceptionFilter</span><span class="params">(Logger logger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Result result = invoker.invoke(invocation);</span><br><span class="line">            <span class="keyword">if</span> (result.hasException() &amp;&amp; GenericService<span class="class">.<span class="keyword">class</span> !</span>= invoker.getInterface()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Throwable exception = result.getException();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 自定义的异常</span></span><br><span class="line">                    <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> BizException || exception <span class="keyword">instanceof</span> BusinessException)&#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!(exception <span class="keyword">instanceof</span> RuntimeException) &amp;&amp; exception <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());</span><br><span class="line">                            Class&lt;?&gt;[] exceptionClassses = method.getExceptionTypes();</span><br><span class="line">                            Class[] arr$ = exceptionClassses;</span><br><span class="line">                            <span class="keyword">int</span> len$ = exceptionClassses.length;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i$ = <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">                                Class&lt;?&gt; exceptionClass = arr$[i$];</span><br><span class="line">                                <span class="keyword">if</span> (exception.getClass().equals(exceptionClass)) &#123;</span><br><span class="line">                                    <span class="keyword">return</span> result;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NoSuchMethodException var11) &#123;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">this</span>.logger.error(<span class="string">"Got unchecked and undeclared exception which called by "</span> + RpcContext.getContext().getRemoteHost() + <span class="string">". service: "</span> + invoker.getInterface().getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", exception: "</span> + exception.getClass().getName() + <span class="string">": "</span> + exception.getMessage(), exception);</span><br><span class="line">                        String serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());</span><br><span class="line">                        String exceptionFile = ReflectUtils.getCodeBase(exception.getClass());</span><br><span class="line">                        <span class="keyword">if</span> (serviceFile != <span class="keyword">null</span> &amp;&amp; exceptionFile != <span class="keyword">null</span> &amp;&amp; !serviceFile.equals(exceptionFile)) &#123;</span><br><span class="line"></span><br><span class="line">                            String className = exception.getClass().getName();</span><br><span class="line">                            <span class="keyword">if</span> (!className.startsWith(<span class="string">"java."</span>) &amp;&amp; !className.startsWith(<span class="string">"javax."</span>)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> (Result) (exception <span class="keyword">instanceof</span> RpcException ? result : <span class="keyword">new</span> RpcResult(<span class="keyword">new</span> RuntimeException(StringUtils.toString(exception))));</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> result;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var12) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.warn(<span class="string">"Fail to ExceptionFilter when called by "</span> + RpcContext.getContext().getRemoteHost() + <span class="string">". service: "</span> + invoker.getInterface().getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", exception: "</span> + var12.getClass().getName() + <span class="string">": "</span> + var12.getMessage(), var12);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException var13) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.error(<span class="string">"Got unchecked and undeclared exception which called by "</span> + RpcContext.getContext().getRemoteHost() + <span class="string">". service: "</span> + invoker.getInterface().getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", exception: "</span> + var13.getClass().getName() + <span class="string">": "</span> + var13.getMessage(), var13);</span><br><span class="line">            <span class="keyword">throw</span> var13;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在provider可以直接抛出异常，在consumer可以直接捕捉到。consumer服务消费端可以新建一个全局异常处理的控制器，可以格式化后输出给前端。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在自己的业务系统中，通常会用到自定义的业务异常类，这个异常会继承extends RuntimeException，当发生业务限制的时候，会throw出来。但是在使用dubbo进行soa治理的时候，会发现provider抛出的异常，在custom端并不能正确的捕获。即便我们在provider和custom都有导入相同framework.jar下面的BusinessException异常，并且抛出这个异常，在Consumer端只会打印一行异常信息，获取不到正常的异常。百度才知道Dubbo对抛出得异常用一个ExceptionFilter的类进行拦截。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dubbo" scheme="https://blog.ydstudio.net/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>小试阿里巴巴EasyExcel导出Excel</title>
    <link href="https://blog.ydstudio.net/post/76eb7bfd.html"/>
    <id>https://blog.ydstudio.net/post/76eb7bfd.html</id>
    <published>2019-05-17T23:43:39.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="添加easyexcel的maven依赖"><a href="#添加easyexcel的maven依赖" class="headerlink" title="添加easyexcel的maven依赖"></a>添加easyexcel的maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="导出的模型需要继承BaseRowModel，然后可以在每个属性上设置所在的列和一些format"><a href="#导出的模型需要继承BaseRowModel，然后可以在每个属性上设置所在的列和一些format" class="headerlink" title="导出的模型需要继承BaseRowModel，然后可以在每个属性上设置所在的列和一些format"></a>导出的模型需要继承BaseRowModel，然后可以在每个属性上设置所在的列和一些format</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsOrderExportDto</span> <span class="keyword">extends</span> <span class="title">BaseRowModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"订单序号"</span>,index = <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"订单编号"</span>,index = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> String orderCode;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品序号"</span>,index = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> Long goodsId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品名称"</span>,index = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String goodsTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品链接"</span>,index = <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">private</span> String goodsDetailsUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品图片"</span>,index = <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">private</span> String goodsPhoto;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品数量"</span>,index = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> Long goodsNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品价格"</span>,index = <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">private</span> BigDecimal goodsAmt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"区域公司"</span>,index = <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">private</span> Long areaComp;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"付款时间"</span>,index = <span class="number">12</span>,format = <span class="string">"yy-MM-dd hh:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date payTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后在控制器输出"><a href="#最后在控制器输出" class="headerlink" title="最后在控制器输出"></a>最后在控制器输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"export"</span>,method = RequestMethod.GET)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportExcel</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       List&lt;GoodsOrderDto&gt; orderDtoList = goodsOrderServiceRemote.querGoodsOrderList();</span><br><span class="line">       List&lt;GoodsOrderExportDto&gt; orderExportDtoList = Collections.emptyList();</span><br><span class="line">       <span class="keyword">if</span> (CollectionUtils.isNotEmpty(orderDtoList))&#123;</span><br><span class="line">           orderExportDtoList = <span class="keyword">new</span> ArrayList&lt;&gt;(orderDtoList.size());</span><br><span class="line">           <span class="keyword">for</span> (GoodsOrderDto goodsOrderDto : orderDtoList) &#123;</span><br><span class="line">               GoodsOrderExportDto goodsOrderExportDto = <span class="keyword">new</span> GoodsOrderExportDto();</span><br><span class="line">               BeanUtils.copyProperties(goodsOrderDto,goodsOrderExportDto);</span><br><span class="line"></span><br><span class="line">               orderExportDtoList.add(goodsOrderExportDto);</span><br><span class="line">           &#125;</span><br><span class="line">           orderDtoList.clear();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 设定输出文件头</span></span><br><span class="line">       response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment; filename="</span> + URLEncoder.encode(<span class="string">"订单导出.xls"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">       <span class="comment">// 定义输出类型</span></span><br><span class="line">       response.setContentType(<span class="string">"application/msexcel"</span>);</span><br><span class="line"></span><br><span class="line">       OutputStream outputStream = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">       ExcelWriter excelWriter = <span class="keyword">new</span> ExcelWriter(outputStream, ExcelTypeEnum.XLS);</span><br><span class="line"></span><br><span class="line">       Sheet sheet = <span class="keyword">new</span> Sheet(<span class="number">1</span>, <span class="number">0</span>, GoodsOrderExportDto<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       excelWriter.write(orderExportDtoList,sheet);</span><br><span class="line"></span><br><span class="line">       outputStream.flush();</span><br><span class="line">       excelWriter.finish();</span><br><span class="line">       outputStream.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;添加easyexcel的maven依赖&quot;&gt;&lt;a href=&quot;#添加easyexcel的maven依赖&quot; class=&quot;headerlink&quot; title=&quot;添加easyexcel的maven依赖&quot;&gt;&lt;/a&gt;添加easyexcel的maven依赖&lt;/h4&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;easyexcel&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.1.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="EasyExcel" scheme="https://blog.ydstudio.net/tags/EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>查看依赖第三方jar最低要求运行的jdk版本</title>
    <link href="https://blog.ydstudio.net/post/58af8f82.html"/>
    <id>https://blog.ydstudio.net/post/58af8f82.html</id>
    <published>2019-05-17T23:42:49.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在比较阿里巴巴的easyexcel和easypoi的excel导出功能哪个强大。两者的demo我都是写在同一个工程里面的，easyexcel的demo是先写的，使用起来方便简洁。然后开始写easypoi的demo时，首先出现了依赖下载不了，依赖能下载之后，还出现了下面的乱七八糟的问题：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: cn/afterturn/easypoi/excel/entity/ExportParams</span><br><span class="line"></span><br><span class="line">Unsupported major.minor version <span class="number">52.0</span></span><br></pre></td></tr></table></figure><p>刚开始我是以为easypoi的依赖包没有完整下下来，后来检查发现应该全部下载了。后来我想是不是依赖没有添加全，去easypoi的官方网站看，我的依赖使用应该是没有问题的，但是我还是把easypoi的版本从4.0.0降到了3.30，但是demo运行起来还是报错。后来我想到easyexcel也是依赖poi的，是不是他俩又版本依赖的冲突。于是我把easyexcel给注释了，于是我就成功了！<del>~</del>我嘞个去！！！！！<br>出现第一个错误就是因为easyexcel和easypoi的依赖有冲突。出现第二个错误是英文，使用的easypoi的版本过高，我使用的是easypoi4.0.0,他需要的jdk的版本是jdk8以上的。</p><h4 id="那如何查看第三方依赖最低要求运行的jdk版本呢？"><a href="#那如何查看第三方依赖最低要求运行的jdk版本呢？" class="headerlink" title="那如何查看第三方依赖最低要求运行的jdk版本呢？"></a>那如何查看第三方依赖最低要求运行的jdk版本呢？</h4><ul><li><p>在第三方jar包下会存在一个META-INF目录，该目录下有一个MANIFEST.MF文件，这个文件以键值对的形式存储一些关于jar包的关键信息。<br>下面我以easypoi-base的MANIFEST.MF文件做为示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Archiver-Version: Plexus Archiver</span><br><span class="line">Built-By: jueyue</span><br><span class="line">Created-By: Apache Maven <span class="number">3.1</span><span class="number">.1</span></span><br><span class="line">Build-Jdk: <span class="number">1.8</span><span class="number">.0_144</span></span><br></pre></td></tr></table></figure><p>可是一个.jar文件中，如果没有这个字段，就必须通过下面一种方法来查看</p></li><li><p>通过反编译.class文件来查看<br>解压.jar包，能得到.class文件。用JDK自带的javap反编译.class文件，用如下命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javap -verbose Configuration<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#查看得到的信息中，<span class="title">major</span> <span class="title">version</span>属性的内容，如下</span></span><br><span class="line">major version: 52</span><br></pre></td></tr></table></figure><p>说明这个.class文件是由JDK1.8编译得到的。 </p></li><li><p>Java 9 uses major version 53</p></li><li><p>J2SE 8.0 = 52(0x33 hex)</p></li><li><p>J2SE 7.0 = 51(0x32 hex) </p></li><li><p>J2SE 6.0 = 50 (0x32 hex)</p></li><li><p>J2SE 5.0 = 49 (0x31 hex)</p></li><li><p>JDK 1.4 = 48 (0x30 hex)</p></li><li><p>JDK 1.3 = 47 (0x2F hex)</p></li><li><p>JDK 1.2 = 46 (0x2E hex)</p></li><li><p>JDK 1.1 = 45 (0x2D hex)</p></li></ul><p>注意：一个.jar包中可能有多个.class文件，每个.class的JDK版本可能会不一样（编译器多个项目设置不同）</p><p>我电脑上安装的是jdk7。所以解决办法是删掉easyexcel的依赖，使用easypoi运行和自己jdk相同版本的就行了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在比较阿里巴巴的easyexcel和easypoi的excel导出功能哪个强大。两者的demo我都是写在同一个工程里面的，easyexcel的demo是先写的，使用起来方便简洁。然后开始写easypoi的demo时，首先出现了依赖下载不了，依赖能下载之后，还出现了下面的乱七八糟的问题：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.ydstudio.net/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo出现ExceedPayloadLimitException: Data length too large的错误</title>
    <link href="https://blog.ydstudio.net/post/45135675.html"/>
    <id>https://blog.ydstudio.net/post/45135675.html</id>
    <published>2019-05-14T23:41:47.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用dubbo的时候，一次请求的数据量过大的时候，会出现下面的问题。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.remoting.transport.ExceedPayloadLimitException: Data length too large: <span class="number">12470880</span>, max payload: <span class="number">8388608</span>, channel: NettyChannel [channel=[id: <span class="number">0x78767b1e</span>, /<span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span>:<span class="number">54414</span> =&gt; /<span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span>:<span class="number">20880</span>]]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload(AbstractCodec.java:<span class="number">44</span>) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encodeResponse(ExchangeCodec.java:<span class="number">288</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encode(ExchangeCodec.java:<span class="number">73</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode(DubboCountCodec.java:<span class="number">38</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder.encode(NettyCodecAdapter.java:<span class="number">80</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:<span class="number">66</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:<span class="number">591</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:<span class="number">776</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.SimpleChannelHandler.writeRequested(SimpleChannelHandler.java:<span class="number">304</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.netty.NettyHandler.writeRequested(NettyHandler.java:<span class="number">98</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at org.jboss.netty.channel.SimpleChannelHandler.handleDownstream(SimpleChannelHandler.java:<span class="number">266</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:<span class="number">591</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:<span class="number">582</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.Channels.write(Channels.java:<span class="number">611</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.Channels.write(Channels.java:<span class="number">578</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:<span class="number">251</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.netty.NettyChannel.send(NettyChannel.java:<span class="number">100</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:<span class="number">53</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:<span class="number">173</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:<span class="number">51</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:<span class="number">80</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1145</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">615</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">745</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">27</span>:<span class="number">30.194</span>  WARN <span class="number">10424</span> --- [:<span class="number">20880</span>-thread-<span class="number">4</span>] c.a.d.r.exchange.codec.ExchangeCodec     :  [DUBBO] Data length too large: <span class="number">12470880</span>, max payload: <span class="number">8388608</span>, channel: NettyChannel [channel=[id: <span class="number">0x78767b1e</span>, /<span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span>:<span class="number">54414</span> =&gt; /<span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span>:<span class="number">20880</span>]], dubbo version: <span class="number">2.6</span><span class="number">.2</span>, current host: <span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span></span><br></pre></td></tr></table></figure><p>当Dubbo服务提供者向消费者传输大数据容量的对象时，会受到Dubbo的限制，抛出上面的Data length too large异常<br>编辑dubbo.xml,添加payload配置，默认是8M，我给改成80M。这样做简单粗暴，其实不太符合Dubbo的设计理念。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">filter</span>=<span class="string">"dubboExceptionFilter,-exception"</span> <span class="attr">payload</span>=<span class="string">"83886080"</span> &gt;</span><span class="tag">&lt;/<span class="name">dubbo:provider</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用dubbo的时候，一次请求的数据量过大的时候，会出现下面的问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dubbo" scheme="https://blog.ydstudio.net/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis Generator配置文件--指定生成实体类使用实际的表列名作为实体类的属性名</title>
    <link href="https://blog.ydstudio.net/post/f1ed0391.html"/>
    <id>https://blog.ydstudio.net/post/f1ed0391.html</id>
    <published>2019-05-13T23:40:33.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在用MyBatis Generator生成表实体的时候，发现数据库中的表字段使用的是小驼峰命名规则，生成出来的实体属性都是小写了，没有转成小驼峰，一番搜索得知可以在MyBatis Generator的配置文件中修改。</p><a id="more"></a><p>table标签下的设置属性useActualColumnNames用于指定生成实体类时是否使用实际的列名作为实体类的属性名，取值true或false。</p><p>true：MyBatis Generator会使用数据库中实际的字段名字作为生成的实体类的属性名。</p><p>false：这是默认值。如果设置为false,则MyBatis Generator会将数据库中实际的字段名字转换为Camel Case风格作为生成的实体类的属性名。</p><p>如果明确的使用columnOverride元素指定了字段对应的实体的属性名,那么useActualColumnNames会被忽略。</p><p>假设表有一个字段名为start_date,如果这个属性设置为true,则生成的实体类的属性名为start_date,生成的setter/getter为　setStart_date/getStart_date。如果useActualColumnNames设置为false,则生成的实体类的属性名为startDate,生成的setter/getter为setStartDate/getStartDate。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"dobbo_goods_order"</span> <span class="attr">domainObjectName</span>=<span class="string">"GoodsOrder"</span> <span class="attr">enableCountByExample</span>=<span class="string">"false"</span> <span class="attr">enableUpdateByExample</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">enableDeleteByExample</span>=<span class="string">"false"</span> <span class="attr">enableSelectByExample</span>=<span class="string">"false"</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">"false"</span> &gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- table标签下的设置属性useActualColumnNames用于指定生成实体类时是否使用实际的列名作为实体类的属性名，取值true或false--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useActualColumnNames"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在用MyBatis Generator生成表实体的时候，发现数据库中的表字段使用的是小驼峰命名规则，生成出来的实体属性都是小写了，没有转成小驼峰，一番搜索得知可以在MyBatis Generator的配置文件中修改。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mybatis" scheme="https://blog.ydstudio.net/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo由于连接不上monitor监控中心报错</title>
    <link href="https://blog.ydstudio.net/post/9008dc8b.html"/>
    <id>https://blog.ydstudio.net/post/9008dc8b.html</id>
    <published>2019-05-08T23:38:49.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>dubbbo使用时候没有启动监控中心，不能配了监控地址。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.rpc.RpcException: Failed to invoke the method collect in the service com.alibaba.dubbo.monitor.MonitorService. No provider available <span class="keyword">for</span> the service com.alibaba.dubbo.monitor.MonitorService from registry localhost:<span class="number">2181</span> on the consumer <span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span> using the dubbo version <span class="number">2.6</span><span class="number">.2</span>. Please check <span class="keyword">if</span> the providers have been started and registered.</span><br><span class="line">at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.checkInvokers(AbstractClusterInvoker.java:<span class="number">257</span>) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:<span class="number">56</span>) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:<span class="number">238</span>) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker.invoke(MockClusterInvoker.java:<span class="number">75</span>) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.rpc.proxy.InvokerInvocationHandler.invoke(InvokerInvocationHandler.java:<span class="number">52</span>) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.proxy0.collect(proxy0.java) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.monitor.dubbo.DubboMonitor.send(DubboMonitor.java:<span class="number">112</span>) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.monitor.dubbo.DubboMonitor$<span class="number">1</span>.run(DubboMonitor.java:<span class="number">69</span>) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:<span class="number">471</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:<span class="number">304</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$<span class="number">301</span>(ScheduledThreadPoolExecutor.java:<span class="number">178</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:<span class="number">293</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1145</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">615</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">745</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br></pre></td></tr></table></figure><p>解决方案：<br>这是因为没有启动监控中心，却配了监控地址，把监控中心启动，或者把xml配置中的&lt;dubbo:monitor protocol=”registry”&gt;</dubbo:monitor>或properties配置中的dubbo.monitor.protocol=registry去掉，即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dubbbo使用时候没有启动监控中心，不能配了监控地址。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dubbo" scheme="https://blog.ydstudio.net/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Java中ListIterator和Iterator的异同</title>
    <link href="https://blog.ydstudio.net/post/5da32797.html"/>
    <id>https://blog.ydstudio.net/post/5da32797.html</id>
    <published>2019-05-08T23:37:09.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用Java集合的时候，都需要使用Iterator。但是java集合中还有一个迭代器ListIterator,在使用List、ArrayList、LinkedList和Vector的时候可以使用。这两种迭代器有什么区别呢？下面我们详细分析。这里有一点需要明确的时候，迭代器指向的位置是元素之前的位置。</p><a id="more"></a><p>首先看一下Iterator和ListIterator迭代器的方法有哪些。</p><p>Iterator迭代器包含的方法有：</p><p>hasNext()：如果迭代器指向位置后面还有元素，则返回 true，否则返回false</p><p>next()：返回集合中Iterator指向位置后面的元素</p><p>remove()：删除集合中Iterator指向位置后面的元素</p><p>ListIterator迭代器包含的方法有：</p><p>add(E e): 将指定的元素插入列表，插入位置为迭代器当前位置之前</p><p>hasNext()：以正向遍历列表时，如果列表迭代器后面还有元素，则返回 true，否则返回false</p><p>hasPrevious():如果以逆向遍历列表，列表迭代器前面还有元素，则返回 true，否则返回false</p><p>next()：返回列表中ListIterator指向位置后面的元素</p><p>nextIndex():返回列表中ListIterator所需位置后面元素的索引</p><p>previous():返回列表中ListIterator指向位置前面的元素</p><p>previousIndex()：返回列表中ListIterator所需位置前面元素的索引</p><p>remove():从列表中删除next()或previous()返回的最后一个元素（有点拗口，意思就是对迭代器使用hasNext()方法时，删除ListIterator指向位置后面的元素；当对迭代器使用hasPrevious()方法时，删除ListIterator指向位置前面的元素）</p><p>set(E e)：从列表中将next()或previous()返回的最后一个元素返回的最后一个元素更改为指定元素e</p><h4 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h4><p>都是迭代器，当需要对集合中元素进行遍历不需要干涉其遍历过程时，这两种迭代器都可以使用。</p><h4 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h4><ul><li><p>使用范围不同，Iterator可以应用于所有的集合，Set、List和Map和这些集合的子类型。而ListIterator只能用于List及其子类型。</p></li><li><p>ListIterator有add方法，可以向List中添加对象，而Iterator不能。</p></li><li><p>ListIterator和Iterator都有hasNext()和next()方法，可以实现顺序向后遍历，但是ListIterator有hasPrevious()和previous()方法，可以实现逆向（顺序向前）遍历。Iterator不可以。</p></li><li><p>ListIterator可以定位当前索引的位置，nextIndex()和previousIndex()可以实现。Iterator没有此功能。</p></li><li><p>都可实现删除操作，但是ListIterator可以实现对象的修改，set()方法可以实现。Iterator仅能遍历，不能修改。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ArrayList&lt;String&gt; stringArrayList1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; stringArrayList2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        stringArrayList1.add(<span class="string">"ok"</span>);</span><br><span class="line">        stringArrayList1.add(<span class="string">"hello"</span>);</span><br><span class="line">        stringArrayList1.add(<span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line">        stringArrayList2.add(<span class="string">"好的"</span>);</span><br><span class="line">        stringArrayList2.add(<span class="string">"你好"</span>);</span><br><span class="line">        stringArrayList2.add(<span class="string">"世界"</span>);</span><br><span class="line"></span><br><span class="line">        stringArrayList1.addAll(stringArrayList2);</span><br><span class="line">        ListIterator&lt;String&gt; iterator = stringArrayList1.listIterator();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"从前往后输出:"</span>);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(<span class="string">"next="</span>+iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"\r\n从后往前输出:"</span>);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasPrevious())&#123;</span><br><span class="line">            System.out.println(<span class="string">"previous="</span>+iterator.previous());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="注意：一定要先进行由前向后输出，之后才能进行由后向前的输出。"><a href="#注意：一定要先进行由前向后输出，之后才能进行由后向前的输出。" class="headerlink" title="注意：一定要先进行由前向后输出，之后才能进行由后向前的输出。"></a>注意：一定要先进行由前向后输出，之后才能进行由后向前的输出。</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用Java集合的时候，都需要使用Iterator。但是java集合中还有一个迭代器ListIterator,在使用List、ArrayList、LinkedList和Vector的时候可以使用。这两种迭代器有什么区别呢？下面我们详细分析。这里有一点需要明确的时候，迭代器指向的位置是元素之前的位置。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.ydstudio.net/tags/java/"/>
    
      <category term="ListIterator" scheme="https://blog.ydstudio.net/tags/ListIterator/"/>
    
      <category term="Iterator" scheme="https://blog.ydstudio.net/tags/Iterator/"/>
    
  </entry>
  
  <entry>
    <title>深入理解spring注解之@Bean注解</title>
    <link href="https://blog.ydstudio.net/post/2d1810c4.html"/>
    <id>https://blog.ydstudio.net/post/2d1810c4.html</id>
    <published>2019-04-23T23:36:01.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>@Bean是一个方法级别上的注解，主要用在@Configuration注解的类里，也可以用在@Component注解的类里。添加的bean的id为方法名。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"name"</span>)</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">Autowire <span class="title">autowire</span><span class="params">()</span> <span class="keyword">default</span> Autowire.NO</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">initMethod</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">destroyMethod</span><span class="params">()</span> <span class="keyword">default</span> "<span class="params">(inferred)</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value -- bean别名和name是相互依赖关联的，value,name如果都使用的话值必须要一致</span><br><span class="line">name -- bean名称，如果不写会默认为注解的方法名称</span><br><span class="line">autowire -- 自定装配默认是不开启的，建议尽量不要开启，因为自动装配不能装配基本数据类型、字符串、数组等，这是自动装配设计的局限性，以及自动装配不如显示依赖注入精确</span><br><span class="line">initMethod -- bean的初始化之前的执行方法，该参数一般不怎么用，因为可以完全可以在代码中实现</span><br><span class="line">destroyMethod -- bean销毁执行的方法</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> net.ydstudio.practise.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述:&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Bean</span>意思是定义一个bean，该注解是一个方法级别上的注解，可以使用在<span class="doctag">@Configuration</span>的类里，也可以</span></span><br><span class="line"><span class="comment"> * 在<span class="doctag">@Component</span>注解的类里，添加的bean的id为方法的名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/4/23 19:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  下面的代码就相当于在xml之中添加下面的配置</span></span><br><span class="line"><span class="comment">     *  &lt;beans&gt;</span></span><br><span class="line"><span class="comment">     *      &lt;bean id="transferService" class="net.ydstudio.practise.bean.TransferServiceImpl“ &gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     *  &lt;/beans&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  还能够使用<span class="doctag">@Scope</span>注解来指定使用<span class="doctag">@Bean</span>定义的bean</span></span><br><span class="line"><span class="comment">     *  singleton : 单例，整个应用中只存在一个实例bean</span></span><br><span class="line"><span class="comment">     *  prototype ： 与单例相对，每次getBean都会重新生成一个Bean。</span></span><br><span class="line"><span class="comment">     *  request ： web环境下，每个请求都会创建一个bean，在一次请求中只存在一个Bean，不同request的bean不同</span></span><br><span class="line"><span class="comment">     *  session ： web环境下，session生命周期下，获取的是同一个bean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  默认情况下，所有单实例bean都会在创建spring容器的时候创建，</span></span><br><span class="line"><span class="comment">     *  如果在bean第一次使用的时候创建，我们称为懒加载</span></span><br><span class="line"><span class="comment">     *  配置很简单，在创建bean的方法上添加<span class="doctag">@Lazy</span>注解即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> net.ydstudio.practise.bean.TransferService</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/4/23 19:41</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"singleton"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransferService <span class="title">transferService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransferServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span>可以依赖其他任意数量的bean，如果TransferService依赖Foo，我们可以通过方法参数实现这个依赖</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>: foo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> net.ydstudio.practise.bean.TransferService</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/4/24 11:23</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TransferService <span class="title">transferService</span><span class="params">(Foo foo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TransferServiceImpl(foo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 任何使用<span class="doctag">@Bean</span>定义的bean，也可以执行生命周期的回调函数</span></span><br><span class="line"><span class="comment">     * 类似<span class="doctag">@PostConstruct</span> and <span class="doctag">@PreDestroy</span>的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> net.ydstudio.practise.bean.Foo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/4/23 19:49</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任何使用<span class="doctag">@Bean</span>定义的bean，也可以执行生命周期的回调函数</span></span><br><span class="line"><span class="comment">     * 类似<span class="doctag">@PostConstruct</span> and <span class="doctag">@PreDestroy</span>的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> net.ydstudio.practise.bean.Bar</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/4/23 19:50</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"cleanUp"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bar <span class="title">bar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 默认情况下bean的名称和方法名称相同，你也可以使用</span></span><br><span class="line"><span class="comment">     * 注解中的name属性进行指定</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> net.ydstudio.practise.bean.Foo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/4/23 19:52</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"myFoo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">getFoo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以通过某些条件，来选择是否注册Bean，通过<span class="doctag">@Condition</span>注解来实现</span></span><br><span class="line"><span class="comment">     * 实现Condition接口，并重写matches方法，根据该方法返回的布尔值来决定是否注册Bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> net.ydstudio.practise.bean.Book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2019/4/24 11:54</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(MyCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Book</span> <span class="title">book</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Book();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---111111cleanUp---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"Bar&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> Date publishDate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(BigDecimal price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getPublishDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublishDate</span><span class="params">(Date publishDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化之前---init---初始化之前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> StringBuffer sb = <span class="keyword">new</span> StringBuffer(<span class="string">"Foo&#123;"</span>);</span><br><span class="line">        sb.append(<span class="string">'&#125;'</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 根据环境变量是否存在my.env=hello的属性来决定是否创建，</span></span><br><span class="line"><span class="comment">         * 可以通过启动参数指定-Dmy.env=hello来测试。</span></span><br><span class="line"><span class="comment">         **/</span></span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        String property = environment.getProperty(<span class="string">"my.env"</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"hello"</span>.equals(property)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransferService</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferServiceImpl</span> <span class="keyword">implements</span> <span class="title">TransferService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Foo foo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransferServiceImpl</span><span class="params">(Foo foo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.foo = foo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransferServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;@Bean是一个方法级别上的注解，主要用在@Configuration注解的类里，也可以用在@Component注解的类里。添加的bean的id为方法名。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="spring" scheme="https://blog.ydstudio.net/tags/spring/"/>
    
      <category term="bean" scheme="https://blog.ydstudio.net/tags/bean/"/>
    
  </entry>
  
  <entry>
    <title>idea自动生成方法注释（含参数及返回值）</title>
    <link href="https://blog.ydstudio.net/post/526abd46.html"/>
    <id>https://blog.ydstudio.net/post/526abd46.html</id>
    <published>2019-04-22T23:35:02.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>程序员到新的公司上班，拿到新电脑当然要第一时间配置好各种开发环境和开发工具。</p><a id="more"></a><h4 id="在idea中打开设置，选择File-gt-settings-gt-Editor-gt-Live-Templates"><a href="#在idea中打开设置，选择File-gt-settings-gt-Editor-gt-Live-Templates" class="headerlink" title="在idea中打开设置，选择File-&gt;settings-&gt;Editor-&gt;Live Templates"></a>在idea中打开设置，选择File-&gt;settings-&gt;Editor-&gt;Live Templates</h4><p>点击”+”-&gt;选择template group ，然后输入group的name，如annotation。<br>然后，选中刚才创建的myGroup，然后再次点击右侧的绿色+，这次选择的是Live Template。取名（Abbreviation）为*。Description中填写”方法注释”</p><h4 id="配置模板"><a href="#配置模板" class="headerlink" title="配置模板"></a>配置模板</h4><p>选择刚刚添加的Live Template，在下面的Text Template中添加下面的内容，注意不要整理下面的格式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*</span><br><span class="line"> * </span><br><span class="line"> * $VAR1$ </span><br><span class="line"> $params$ </span><br><span class="line"> * <span class="meta">@return</span> $returns$</span><br><span class="line"> * <span class="meta">@author</span> <span class="number">19037900</span><span class="meta">@xx</span>.cn</span><br><span class="line"> * <span class="meta">@date</span> $date$ $time$</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>注意：此处一定要为刚刚的模板指定使用范围,选择全部就行了。</p><h4 id="配置variables，点击-Edit-variables"><a href="#配置variables，点击-Edit-variables" class="headerlink" title="配置variables，点击 Edit variables"></a>配置variables，点击 Edit variables</h4><p>VAR1参数不用管<br>params (网上好多都不行，这个是我正在用的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(<span class="string">"def result=''; def params=\"$&#123;_1&#125;\".replaceAll('[\\\\[|\\\\]|\\\\s]', '').split(',').toList(); for(i = 0; i &lt; params.size(); i++) &#123;result+='* @'+'param: ' + params[i] + ((i &lt; params.size() - 1) ? '\\n'+'\\b' : '')&#125;; return result"</span>, methodParameters())</span><br></pre></td></tr></table></figure><p>returns参数可以下拉，选择methodReturnType();<br>date参数可以下拉，选择date();<br>time参数可以下拉，选择time();</p><h4 id="配置快捷键，点击Edit-variables下面的Options中的Expand-with下拉选择Enter。"><a href="#配置快捷键，点击Edit-variables下面的Options中的Expand-with下拉选择Enter。" class="headerlink" title="配置快捷键，点击Edit variables下面的Options中的Expand with下拉选择Enter。"></a>配置快捷键，点击Edit variables下面的Options中的Expand with下拉选择Enter。</h4><h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><p>输入 /**，然后Enter，大功告成</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序员到新的公司上班，拿到新电脑当然要第一时间配置好各种开发环境和开发工具。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="idea" scheme="https://blog.ydstudio.net/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>Window下搭建Redis高可用集群-哨兵模式（Redis-Sentinel）</title>
    <link href="https://blog.ydstudio.net/post/bdbc3b8a.html"/>
    <id>https://blog.ydstudio.net/post/bdbc3b8a.html</id>
    <published>2019-02-28T23:32:15.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Sentinel的分布式特性"><a href="#Sentinel的分布式特性" class="headerlink" title="Sentinel的分布式特性"></a>Sentinel的分布式特性</h4><p>Redis Sentinel 是一个分布式系统， 你可以在一个架构中运行多个 Sentinel 进程（progress）， 这些进程使用流言协议（gossip protocols)来接收关于主服务器是否下线的信息， 并使用投票协议（agreement protocols）来决定是否执行自动故障迁移， 以及选择哪个从服务器作为新的主服务器。</p><a id="more"></a><p>单个sentinel进程来监控redis集群是不可靠的，当sentinel进程宕掉后(sentinel本身也有单点问题，single-point-of-failure)整个集群系统将无法按照预期的方式运行。所以有必要将sentinel集群，这样有几个好处：</p><ul><li><p>有一些sentinel进程宕掉了，依然可以进行redis集群的主备切换；</p></li><li><p>如果只有一个sentinel进程，如果这个进程运行出错，或者是网络堵塞，那么将无法实现redis集群的主备切换（单点问题）；</p></li><li><p>如果有多个sentinel，redis的客户端可以随意地连接任意一个sentinel来获得关于redis集群中的信息；</p></li></ul><p>一个健壮的部署至少需要三个哨兵实例。三个哨兵实例应该放置在客户使用独立方式确认故障的计算机或虚拟机中。例如不同的物理机或不同可用区域的虚拟机。</p><p>开始准备环境搭建：<br>本次在window上搭建哨兵模式的Redis集群。按照上一篇文章<a href="https://www.ydstudio.net/archives/120.html" target="_blank" rel="noopener">Redis主从复制</a>的指导，先搭建好Redis的集群，具体情况如下：<br>在git上下载好window下的Redis免安装的包，解压配置好之后，再复制两份，端口号分别为6380和6381，Redis安装目录则分别为redis6379、redis6380、redis6381.</p><ul><li>127.0.0.1 6379 master</li><li>127.0.0.1 6380 slave</li><li>127.0.0.1 6381 slave</li><li>127.0.0.1:26379  127.0.0.1:26380  127.0.0.1:26381 sentinel</li></ul><p>Redis的密码都设置成requirepass 123456</p><h4 id="配置Sentinel"><a href="#配置Sentinel" class="headerlink" title="配置Sentinel"></a>配置Sentinel</h4><p>在上述三个Redis安装目录下新建sentinel.conf文件，在其中写入以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这个是Redis6379配置内容，其他文件同理新增然后改一下端口即可，26380，和 26381。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">当前Sentinel服务运行的端口</span></span><br><span class="line">port 26379  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 哨兵监听的主服务器 </span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3s内mymaster无响应，则认为mymaster宕机了</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 3000</span><br><span class="line"><span class="meta">#</span><span class="bash">如果10秒后,mysater仍没启动过来，则启动failover  </span></span><br><span class="line">sentinel failover-timeout mymaster 10000  </span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行故障转移时， 最多有1个从服务器同时对新的主服务器进行同步</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster 123456</span><br></pre></td></tr></table></figure><p>在另外的两个Redis目录里面分别创建sentinel.conf，注意修改其中port端口分26380和26381。<br>配置文件只需要配置master的信息就好啦，不用配置slave的信息，因为slave能够被自动检测到(master节点中有关于slave的消息)。</p><p>为了更清楚每一行配置的含义，对每个选项的含义进行简单介绍：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor [master-group-name] [ip] [port] [quorum]</span><br></pre></td></tr></table></figure><ul><li>master-group-name：master名称（可以自定义）</li><li>ip port : IP地址和端口号</li><li>quorum：票数，Sentinel需要协商同意master是否可到达的数量。</li></ul><p>第一行配置指示 Sentinel 去监视一个名为 mymaster 的主服务器， 这个主服务器的 IP 地址为 127.0.0.1 ， 端口号为 6379 ， 而将这个主服务器判断为失效至少需要 2 个 Sentinel 同意 （只要同意 Sentinel 的数量不达标，自动故障迁移就不会执行）。<br>票数在本文中：redis集群中有3个sentinel实例，其中master挂掉啦，这里设置票数为2，表示有2个sentinel认为master挂掉啦，才能被认为是正真的挂掉啦。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel &lt;选项的名字&gt; &lt;主服务器的名字&gt; &lt;选项的值&gt;</span><br></pre></td></tr></table></figure><ul><li>down-after-milliseconds 选项指定了 Sentinel 认为服务器已经断线所需的毫秒数。</li></ul><p>如果服务器在给定的毫秒数之内， 没有返回 Sentinel 发送的 PING 命令的回复， 或者返回一个错误， 那么 Sentinel 将这个服务器标记为主观下线（subjectively down，简称 SDOWN ）。<br>不过只有一个 Sentinel 将服务器标记为主观下线并不一定会引起服务器的自动故障迁移： 只有在足够数量的 Sentinel 都将一个服务器标记为主观下线之后， 服务器才会被标记为客观下线（objectively down， 简称 ODOWN ）， 这时自动故障迁移才会执行。<br>将服务器标记为客观下线所需的 Sentinel 数量由对主服务器的配置决定。</p><ul><li>parallel-syncs 选项指定了在执行故障转移时， 最多可以有多少个从服务器同时对新的主服务器进行同步， 这个数字越小， 完成故障转移所需的时间就越长。</li></ul><h4 id="新增Redis启动脚本：startRedisServer-bat"><a href="#新增Redis启动脚本：startRedisServer-bat" class="headerlink" title="新增Redis启动脚本：startRedisServer.bat"></a>新增Redis启动脚本：startRedisServer.bat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">redis-server.exe redis.conf</span><br><span class="line">@pause</span><br></pre></td></tr></table></figure><h4 id="新增Redis-Sentinel启动脚本：startRedisSentinel-bat"><a href="#新增Redis-Sentinel启动脚本：startRedisSentinel-bat" class="headerlink" title="新增Redis-Sentinel启动脚本：startRedisSentinel.bat"></a>新增Redis-Sentinel启动脚本：startRedisSentinel.bat</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">redis-server.exe sentinel.conf --sentinel </span><br><span class="line">@pause</span><br></pre></td></tr></table></figure><p>另外两个进行同样的操作，创建新增Redis启动脚本和Redis-Sentinel启动脚本。</p><h4 id="开始启动环境"><a href="#开始启动环境" class="headerlink" title="开始启动环境"></a>开始启动环境</h4><ul><li>点击startRedis.bat，启动Redis集群</li><li>点击startRedisSentinel.bat，启动哨兵实例</li></ul><h4 id="搭建中出现的问题"><a href="#搭建中出现的问题" class="headerlink" title="搭建中出现的问题"></a>搭建中出现的问题</h4><ul><li><p>sentinel配置文件的顺序问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[3968] 01 Mar 11:06:38.314 #</span><br><span class="line">*** FATAL CONFIG FILE ERROR ***</span><br><span class="line"></span><br><span class="line">[3968] 01 Mar 11:06:38.314 # Reading the configuration file, at line 10</span><br><span class="line"></span><br><span class="line">[3968] 01 Mar 11:06:38.314 # &gt;&gt;&gt; 'sentinel down-after-milliseconds  mymaster  3000'</span><br><span class="line"></span><br><span class="line">[3968] 01 Mar 11:06:38.314 # No such master with specified name.</span><br></pre></td></tr></table></figure><p>解决方法：哨兵监听的主服务器的配置 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br></pre></td></tr></table></figure><p>要尽量放到sentinel配置的前面</p></li><li><p>配置文件的空格问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invalid argument during startup: unknown conf file parameter :</span><br></pre></td></tr></table></figure><p>解决方法：删除或者更改配置注意不要留有空格</p></li></ul><p>未完</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Sentinel的分布式特性&quot;&gt;&lt;a href=&quot;#Sentinel的分布式特性&quot; class=&quot;headerlink&quot; title=&quot;Sentinel的分布式特性&quot;&gt;&lt;/a&gt;Sentinel的分布式特性&lt;/h4&gt;&lt;p&gt;Redis Sentinel 是一个分布式系统， 你可以在一个架构中运行多个 Sentinel 进程（progress）， 这些进程使用流言协议（gossip protocols)来接收关于主服务器是否下线的信息， 并使用投票协议（agreement protocols）来决定是否执行自动故障迁移， 以及选择哪个从服务器作为新的主服务器。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="redis" scheme="https://blog.ydstudio.net/tags/redis/"/>
    
      <category term="Redis-Sentinel" scheme="https://blog.ydstudio.net/tags/Redis-Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Linux下搭建Redis主从复制</title>
    <link href="https://blog.ydstudio.net/post/c1608171.html"/>
    <id>https://blog.ydstudio.net/post/c1608171.html</id>
    <published>2019-02-27T23:30:02.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近忙着准备面试，就把之前用到的Redis的主从配置和哨兵模式配置都重新复习一遍。这篇文章先复习配置Redis的主从，下一篇复习Redis的哨兵模式。<br>Redis的主从复制配置起来比较简单，主从配置有以下特点：</p><a id="more"></a><ol><li><p>一个Master可以有多个slave主机，支持链式复制</p></li><li><p>Master以非阻塞方式同步数据至slave主机</p></li></ol><p>在一台节点上配置文件中定义自己是谁的从节点，并且启用主节点密码认证即可。下面使用3台主机配置一主两从的结构，redis使用一主多从的结构时还可以实现像mysql MHA那样的复制集群，当master节点宕机后，可以在两个slave节点中根据优先级选举新的master。</p><ul><li>安装Redis<br>本次采用源码编译的方式安装Redis，执行相关的命令如下：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">下载redis安装包</span></span><br><span class="line">cd /usr/local/src</span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.3.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压安装包</span></span><br><span class="line">tar -zxvf redis-5.0.3.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拷贝到/usr/<span class="built_in">local</span>/redis目录</span></span><br><span class="line">mkdir -p /usr/local/redis</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">编译安装</span></span><br><span class="line">make &amp; make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">redis安装完成后，redis-server、redis-cli等程序默认安装在/usr/<span class="built_in">local</span>/redis/src目录中，我们需要将它安装到系统搜索路径，并安装为系统服务，方便在任何终端访问，并且开机自动启动。</span></span><br><span class="line"></span><br><span class="line">cd /usr/local/src/redis/utils</span><br><span class="line">./install_server.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重复上述安装操作，安装redis到6380和6381端口</span></span><br><span class="line">./install_server.sh</span><br></pre></td></tr></table></figure>环境准备好之后，具体情况如下：</li></ul><p>三个Redis实例分别安装以下IP地址和端口，角色分别如下</p><p>192.168.1.103 6379 master<br>192.168.1.103 6380 slave<br>192.168.1.103 6381 slave</p><ul><li>配置Master节点<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bind 0.0.0.0     #绑定地址 (绑定在127.0.0.1，只有本机客户端可以访问，其他服务器无法访问，绑定在0.0.0.0上，如果没有端口限制，那么其他服务器则可以连接该服务器的该端口)</span><br><span class="line">requirepass 123456   #启用密码认证</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">默认master节点修改这两项就可以了，也可以进行其他设置</span></span><br></pre></td></tr></table></figure></li><li>配置Slave节点</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bind 0.0.0.0    </span><br><span class="line"><span class="meta">#</span><span class="bash">定义master信息</span></span><br><span class="line">slaveof 192.168.1.103 6379   </span><br><span class="line"><span class="meta">#</span><span class="bash">认证</span></span><br><span class="line">masterauth 123456  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">从节点上配置这三项页就可以，其他参数可以根据情况选择调整即可。</span></span><br></pre></td></tr></table></figure><p>修改后记得重启服务，可以登录到master节点查看信息。</p><ul><li>首先使用client list命令查看</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@192 bin]# redis-cli -p 6379 -a 123456</span><br><span class="line">Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; client list</span><br><span class="line">id=3 addr=127.0.0.1:44273 fd=7 name= age=2456 idle=1 flags=S db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=replconf</span><br><span class="line">id=4 addr=127.0.0.1:45342 fd=8 name= age=2453 idle=1 flags=S db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r cmd=replconf</span><br><span class="line">id=6 addr=127.0.0.1:49306 fd=9 name= age=6 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=32742 obl=0 oll=0 omem=0 events=r cmd=client</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br><span class="line">cmd=client     表示是master</span><br><span class="line">cmd=replconf   表示是slave</span><br></pre></td></tr></table></figure><ul><li>首先使用info replication 命令查看<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master #自己的角色</span><br><span class="line">connected_slaves:2 #从节点数量</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=3738,lag=0 #从节点信息</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=3738,lag=1 #从节点信息</span><br><span class="line">master_replid:061bcdd36e3b8d9a0c38d29dc762e908445baad6</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:3738</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:3738</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>可以看到主从差不多已经配置好了，接下来可以进行简单的验证复制，在master节点设置一个key，看两个slave节点复制情况。</li></ul><p>Master节点创建一个key:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@192 bin]# redis-cli -p 6379 -a 123456</span><br><span class="line">Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; set jobNo 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>从slave 6380 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@192 bin]# redis-cli -p 6380 -a 123456</span><br><span class="line">Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6380&gt; get jobNo</span><br><span class="line">"123456"</span><br><span class="line">127.0.0.1:6380&gt;</span><br></pre></td></tr></table></figure><p>从slave 6381：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@192 bin]# redis-cli -p 6381 -a 123456</span><br><span class="line">Warning: Using a password with '-a' or '-u' option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6381&gt; get jobNo</span><br><span class="line">"123456"</span><br><span class="line">127.0.0.1:6381&gt;</span><br></pre></td></tr></table></figure><p>可以看出在master上设置的key已经同步到了两个slave上。</p><p><em>slave节点定义也可以通过指令设置，设置后立即生效，并且会被保存至配置文件中，指令配置方式如下：</em></p><p>#配置slave节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis-cli&gt;</span><span class="bash"> SLAVEOF &lt;MASTER_IP&gt; &lt;MASTER_PORT&gt;</span></span><br><span class="line"><span class="meta">redis-cli&gt;</span><span class="bash"> CONFIG SET masterauth &lt;PASSWORD&gt;</span></span><br></pre></td></tr></table></figure><p>redis主从复制相关配置<br>下面是redis主从复制场景的一些可调参数，需要根据实际环境调整</p><ul><li>slave-serve-stale-data yes ： 是否可以把不新鲜的数据服务与客户端</li><li>slave-read-only yes ： 从节点只读，启用slaveof定义后才生效</li><li>repl-diskless-sync no ：是否同时向多个从节点同时发数据</li><li>repl-diskless-sync-delay 5 ：发送的延迟时间</li><li>repl-ping-slave-period 10 探测从节点状态</li><li>repl-timeout 60 探测节点超时时间</li><li>repl-disable-tcp-nodelay no ： 启用nodelay</li><li>repl-backlog-size 1mb</li><li>slave-priority 100 ： 从节点优先级,复制集群中，主节点故障时，sentinel应用场景中的主节点选举时使用的优先级；数字越小优先级越高，但0表示不参与选举；</li><li>min-slaves-to-write 3：主节点仅允许其能够通信的从节点数量大于等于此处的值时接受写操作；</li><li>min-slaves-max-lag 10：从节点延迟时长超出此处指定的时长时，主节点会拒绝写入操作；</li></ul><p><a href="http://gudaoyufu.com/?p=1230" target="_blank" rel="noopener">查看原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近忙着准备面试，就把之前用到的Redis的主从配置和哨兵模式配置都重新复习一遍。这篇文章先复习配置Redis的主从，下一篇复习Redis的哨兵模式。&lt;br&gt;Redis的主从复制配置起来比较简单，主从配置有以下特点：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="linux" scheme="https://blog.ydstudio.net/tags/linux/"/>
    
      <category term="redis" scheme="https://blog.ydstudio.net/tags/redis/"/>
    
      <category term="主从复制" scheme="https://blog.ydstudio.net/tags/%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    
  </entry>
  
</feed>
