<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Sam的个人博客</title>
  
  <subtitle>一个程序员的成长记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.ydstudio.net/"/>
  <updated>2020-03-15T09:22:17.000Z</updated>
  <id>https://blog.ydstudio.net/</id>
  
  <author>
    <name>Sam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL的bin-log</title>
    <link href="https://blog.ydstudio.net/post/d1d9a9.html"/>
    <id>https://blog.ydstudio.net/post/d1d9a9.html</id>
    <published>2020-03-15T15:22:12.000Z</published>
    <updated>2020-03-15T09:22:17.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="什么是bin-log？"><a href="#什么是bin-log？" class="headerlink" title="什么是bin-log？"></a>什么是bin-log？</h6><p>mysql-binlog是MySQL数据库的二进制日志，用于记录用户对数据库操作的SQL语句（除了数据查询语句，即记录insert、update、delete的sql）信息。<br>可以使用mysqlbin命令查看二进制日志的内容。</p><a id="more"></a><h6 id="MySQL-bin-log-的格式"><a href="#MySQL-bin-log-的格式" class="headerlink" title="MySQL bin-log 的格式"></a>MySQL bin-log 的格式</h6><p>binlog的格式也有三种：STATEMENT、ROW、MIXED </p><ul><li><p>1、 STATMENT模式：基于SQL语句的复制(statement-based replication, SBR)，每一条会修改数据的sql语句会记录到binlog中。<br>优点：不需要记录每一条SQL语句与每行的数据变化，这样子binlog的日志也会比较少，减少了磁盘IO，提高性能。<br>缺点：在某些情况下会导致master-slave中的数据不一致(如sleep()函数， last_insert_id()，以及user-defined functions(udf)等会出现问题)</p></li><li><p>2、ROW模式：基于行的复制(row-based replication, RBR)：不记录每一条SQL语句的上下文信息，仅需记录哪条数据被修改了，修改成了什么样子了。<br>优点：不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题。<br>缺点：会产生大量的日志，尤其是alter table的时候会让日志暴涨。</p></li><li><p>3、MIXED模式：混合模式复制(mixed-based replication, MBR)：以上两种模式的混合使用，一般的复制使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择日志保存方式。</p></li></ul><h6 id="服务器上用哪种模式好呢？"><a href="#服务器上用哪种模式好呢？" class="headerlink" title="服务器上用哪种模式好呢？"></a>服务器上用哪种模式好呢？</h6><p>我们来举例子说明：</p><ul><li><ol><li>insert into xxtable values (x,y,z)为例</li></ol></li></ul><p>影响：1行,且为新增1行, 对于其他行没有影响. 这个情况,用row格式,直接复制磁盘上1行的新增变化。</p><ul><li><ol start="2"><li>update xxtable set age=21 where name=’sss’为例<br>影响：一般也只是影响1行. 用row也比较合适。</li></ol></li><li><ol start="3"><li>过年发红包,全公司的人,都涨薪100元.<br>update xxtable set salary=salary+100;<br>影响: 这个语句带来的影响是针对每一行的, 因此磁盘上很多row都发生了变化.此处适合用statment格式的日志.</li></ol></li></ul><p>MySQL后来又提供了一个新的混合模式（MIXED），很好理解为上述两种的模式的自由切换。Mysql会根据执行SQL来选择使用STATEMENT还是ROW模式。<br>所以我们用这种模式是最好的，能兼顾两者的优点。</p><h6 id="MySQL如何配置bin-log"><a href="#MySQL如何配置bin-log" class="headerlink" title="MySQL如何配置bin-log"></a>MySQL如何配置bin-log</h6><p>在MySQL配置文件my.cnf文件中的mysqld节中添加下面的配置文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#设置日志格式</span></span><br><span class="line">binlog_format = mixed</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置日志路径，注意路经需要mysql用户有权限写</span></span><br><span class="line">log-bin = /data/mysql/logs/mysql-bin.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置binlog清理时间</span></span><br><span class="line">expire_logs_days = 7</span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog每个日志文件大小</span></span><br><span class="line">max_binlog_size = 100m</span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog缓存大小</span></span><br><span class="line">binlog_cache_size = 4m</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大binlog缓存大小</span></span><br><span class="line">max_binlog_cache_size = 512m</span><br></pre></td></tr></table></figure><p>重启MySQL生效，如果不方便重启服务，也可以直接修改对应的变量即可。</p><h6 id="MySQL的bin-log如何查看"><a href="#MySQL的bin-log如何查看" class="headerlink" title="MySQL的bin-log如何查看"></a>MySQL的bin-log如何查看</h6><p>MySQL的bin-log是二进制格式的无法直接查看，MySQL提供了两种方式进行查看。</p><ul><li>1、 简单查看 show binlog events<br>语法 ：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">BINLOG</span> <span class="keyword">EVENTS</span></span><br><span class="line">[<span class="keyword">IN</span> <span class="string">'log_name'</span>]</span><br><span class="line">[<span class="keyword">FROM</span> pos]</span><br><span class="line">[<span class="keyword">LIMIT</span> [<span class="keyword">offset</span>,] <span class="keyword">row_count</span>]</span><br></pre></td></tr></table></figure>在MySQL客户端中执行<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show binlog events in 'mysql-bin.000004' \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000004</span><br><span class="line">        Pos: 4</span><br><span class="line"> Event_type: Format_desc</span><br><span class="line">  Server_id: 1</span><br><span class="line">End_log_pos: 107</span><br><span class="line">       Info: Server ver: 5.5.48-log, Binlog ver: 4</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000004</span><br><span class="line">        Pos: 107</span><br><span class="line"> Event_type: Query</span><br><span class="line">  Server_id: 1</span><br><span class="line">End_log_pos: 331</span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db01`</span>; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line">*************************** <span class="number">3.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">331</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">399</span></span><br><span class="line">       Info: <span class="keyword">BEGIN</span></span><br><span class="line">*************************** <span class="number">4.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">399</span></span><br><span class="line"> Event_type: Intvar</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">427</span></span><br><span class="line">       Info: INSERT_ID=<span class="number">1</span></span><br><span class="line">*************************** <span class="number">5.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">427</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">563</span></span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db01`</span>; <span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'jim'</span>)</span><br><span class="line">*************************** <span class="number">6.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">563</span></span><br><span class="line"> Event_type: Xid</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">590</span></span><br><span class="line">       Info: <span class="keyword">COMMIT</span> <span class="comment">/* xid=22 */</span></span><br><span class="line">*************************** <span class="number">7.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">590</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">842</span></span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db02`</span>; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line">*************************** <span class="number">8.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">842</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">910</span></span><br><span class="line">       Info: <span class="keyword">BEGIN</span></span><br><span class="line">*************************** <span class="number">9.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">910</span></span><br><span class="line"> Event_type: Intvar</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">938</span></span><br><span class="line">       Info: INSERT_ID=<span class="number">2</span></span><br><span class="line">*************************** <span class="number">10.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">938</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1077</span></span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db01`</span>; <span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'刘洋'</span>)</span><br><span class="line">*************************** <span class="number">11.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1077</span></span><br><span class="line"> Event_type: Xid</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1104</span></span><br><span class="line">       Info: <span class="keyword">COMMIT</span> <span class="comment">/* xid=128 */</span></span><br><span class="line">*************************** <span class="number">12.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1104</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1172</span></span><br><span class="line">       Info: <span class="keyword">BEGIN</span></span><br><span class="line">*************************** <span class="number">13.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1172</span></span><br><span class="line"> Event_type: Intvar</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1200</span></span><br><span class="line">       Info: INSERT_ID=<span class="number">3</span></span><br><span class="line">*************************** <span class="number">14.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1200</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1342</span></span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db01`</span>; <span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'张从容'</span>)</span><br><span class="line">*************************** <span class="number">15.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1342</span></span><br><span class="line"> Event_type: Xid</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1369</span></span><br><span class="line">       Info: <span class="keyword">COMMIT</span> <span class="comment">/* xid=146 */</span></span><br><span class="line"><span class="number">15</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>上述出现的参数解释：</strong></p><ul><li>Log_name:The name of the file that is being listed.</li><li>Pos：The position at which the event occurs.</li><li>Event_type：An identifier that describes the event type.</li><li>Server_id：The server ID of the server on which the event originated.</li><li>End_log_pos：The position at which the next event begins, which is equal to Pos plus the size of the event.</li><li>Info：More detailed information about the event type. The format of this information depends on the event type.</li></ul><ul><li><p>1、 详细查看 mysqlbinlog<br>语法：<br>mysqlbinlog [bin-log-name]</p></li><li><p>问题1：无法识别的编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sam-Mac:data Sam$ /usr/local/mysql/bin/mysqlbinlog  ./mysql-bin.000004</span><br><span class="line">/usr/local/mysql/bin/mysqlbinlog: unknown variable 'default-character-set=utf8'</span><br></pre></td></tr></table></figure><p>原因： mysqlbinlog这个工具无法识别binlog中的配置中的default-character-set=utf8mb4这个指令，使用参数–no-defaults</p></li><li><p>问题2：bin-log日志文件不存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqlbinlog: File './mysql-bin.000004' not found (Errcode: 13)</span><br></pre></td></tr></table></figure><p>原因：权限问题使用sudo</p></li></ul><p><strong>最终命令： sudo /usr/local/mysql/bin/mysqlbinlog –no-defaults /usr/local/mysql/data/mysql-bin.000004</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">Sam-Mac:data Sam$ sudo /usr/local/mysql/bin/mysqlbinlog <span class="comment">--no-defaults /usr/local/mysql/data/mysql-bin.000004</span></span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span>;</span><br><span class="line"><span class="comment">/*!40019 SET @@session.max_insert_delayed_threads=0*/</span>;</span><br><span class="line"><span class="comment">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span>;</span><br><span class="line">DELIMITER <span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 4</span></span><br><span class="line"><span class="comment">#200315 13:18:28 server id 1  end_log_pos 107 Start: binlog v 4, server v 5.5.48-log created 200315 13:18:28 at startup</span></span><br><span class="line"><span class="comment"># Warning: this binlog is either in use or was not closed properly.</span></span><br><span class="line"><span class="keyword">ROLLBACK</span><span class="comment">/*!*/</span>;</span><br><span class="line">BINLOG '</span><br><span class="line">pLptXg8BAAAAZwAAAGsAAAABAAQANS41LjQ4LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAACkum1eEzgNAAgAEgAEBAQEEgAAVAAEGggAAAAICAgCAA==</span><br><span class="line">'<span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 107</span></span><br><span class="line"><span class="comment">#200315 13:21:09 server id 1  end_log_pos 331 Querythread_id=5exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">use</span> <span class="string">`db01`</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584249669</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.pseudo_thread_id=<span class="number">5</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.foreign_key_checks=<span class="number">1</span>, @@session.sql_auto_is_null=<span class="number">0</span>, @@session.unique_checks=<span class="number">1</span>, @@session.autocommit=<span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.sql_mode=<span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.auto_increment_increment=<span class="number">1</span>, @@session.auto_increment_offset=<span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.character_set_client=<span class="number">33</span>,@@session.collation_connection=<span class="number">33</span>,@@session.collation_server=<span class="number">33</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.lc_time_names=<span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.collation_database=<span class="keyword">DEFAULT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 331</span></span><br><span class="line"><span class="comment">#200315 13:22:39 server id 1  end_log_pos 399 Querythread_id=59exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584249759</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 399</span></span><br><span class="line"><span class="comment">#200315 13:22:39 server id 1  end_log_pos 427 Intvar</span></span><br><span class="line"><span class="keyword">SET</span> INSERT_ID=<span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 427</span></span><br><span class="line"><span class="comment">#200315 13:22:39 server id 1  end_log_pos 563 Querythread_id=59exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584249759</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'jim'</span>)</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 563</span></span><br><span class="line"><span class="comment">#200315 13:22:39 server id 1  end_log_pos 590 Xid = 22</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 590</span></span><br><span class="line"><span class="comment">#200315 13:25:56 server id 1  end_log_pos 842 Querythread_id=5exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">use</span> <span class="string">`db02`</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584249956</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 842</span></span><br><span class="line"><span class="comment">#200315 16:36:37 server id 1  end_log_pos 910 Querythread_id=1201exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584261397</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 910</span></span><br><span class="line"><span class="comment">#200315 16:36:37 server id 1  end_log_pos 938 Intvar</span></span><br><span class="line"><span class="keyword">SET</span> INSERT_ID=<span class="number">2</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 938</span></span><br><span class="line"><span class="comment">#200315 16:36:37 server id 1  end_log_pos 1077 Querythread_id=1201exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">use</span> <span class="string">`db01`</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584261397</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'刘洋'</span>)</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1077</span></span><br><span class="line"><span class="comment">#200315 16:36:37 server id 1  end_log_pos 1104 Xid = 128</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1104</span></span><br><span class="line"><span class="comment">#200315 16:37:09 server id 1  end_log_pos 1172 Querythread_id=1201exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584261429</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1172</span></span><br><span class="line"><span class="comment">#200315 16:37:09 server id 1  end_log_pos 1200 Intvar</span></span><br><span class="line"><span class="keyword">SET</span> INSERT_ID=<span class="number">3</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1200</span></span><br><span class="line"><span class="comment">#200315 16:37:09 server id 1  end_log_pos 1342 Querythread_id=1201exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584261429</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'张从容'</span>)</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1342</span></span><br><span class="line"><span class="comment">#200315 16:37:09 server id 1  end_log_pos 1369 Xid = 146</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment"># End of log file</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="comment">/* added by mysqlbinlog */</span>;</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;</span><br><span class="line">Sam-Mac:data Sam$</span><br></pre></td></tr></table></figure><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>无论是增量备份还是主从复制，都是需要开启mysql-binlog日志，最好跟数据目录设置到不同的磁盘分区，<br>可以降低io等待，提升性能；并且在磁盘故障的时候可以利用mysql-binlog恢复数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;什么是bin-log？&quot;&gt;&lt;a href=&quot;#什么是bin-log？&quot; class=&quot;headerlink&quot; title=&quot;什么是bin-log？&quot;&gt;&lt;/a&gt;什么是bin-log？&lt;/h6&gt;&lt;p&gt;mysql-binlog是MySQL数据库的二进制日志，用于记录用户对数据库操作的SQL语句（除了数据查询语句，即记录insert、update、delete的sql）信息。&lt;br&gt;可以使用mysqlbin命令查看二进制日志的内容。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="https://blog.ydstudio.net/tags/MySQL/"/>
    
      <category term="bin-log" scheme="https://blog.ydstudio.net/tags/bin-log/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 删除 relay log 的方法</title>
    <link href="https://blog.ydstudio.net/post/da13f861.html"/>
    <id>https://blog.ydstudio.net/post/da13f861.html</id>
    <published>2020-03-15T14:35:19.000Z</published>
    <updated>2020-03-15T08:17:02.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="方法1-：自动-设置参数-relay-log-purge-1"><a href="#方法1-：自动-设置参数-relay-log-purge-1" class="headerlink" title="方法1 ：自动 设置参数 relay_log_purge = 1"></a>方法1 ：自动 设置参数 relay_log_purge = 1</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL relay_log_purge = 1;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">或者在/etc/my.cnf [mysqld]模块下面增加以下内容</span><br><span class="line">relay-log-purge = 1</span><br></pre></td></tr></table></figure><a id="more"></a><p>这个参数需要重启数据库才可生效。默认情况下relay-log-purge 是开启的。<br>如果你对从数据库要求不高，可以将relay_log_purge = 1。<br>如果数据库要手动删除relay log请执行 SET GLOBAL relay_log_purge=0。<br>或者在/etc/my.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> [mysqld]模块下面增加以下内容</span></span><br><span class="line">relay-log-purge = 0</span><br></pre></td></tr></table></figure><p>模拟场景：<br>1）从库查看relay log情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# ll</span><br><span class="line">total 5255240</span><br><span class="line">-rw-r----- 1 mysql mysql         56 Aug 18 15:40 auto.cnf</span><br><span class="line">-rw-r----- 1 mysql mysql        207 Aug 23 16:06 mysqld-relay-bin.000032</span><br><span class="line">-rw-r----- 1 mysql mysql        344 Aug 23 18:14 mysqld-relay-bin.000033</span><br><span class="line">-rw-r----- 1 mysql mysql        207 Aug 23 18:14 mysqld-relay-bin.000034</span><br><span class="line">-rw-r----- 1 mysql mysql        321 Aug 23 18:14 mysqld-relay-bin.000035</span><br><span class="line">-rw-r----- 1 mysql mysql        100 Aug 23 18:14 mysqld-relay-bin.index</span><br></pre></td></tr></table></figure><p>2）从库执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL relay_log_purge = 1;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">'relay_log_purge'</span>;</span></span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| relay_log_purge | ON    |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>3）主库执行flush logs;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush logs;</span></span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br></pre></td></tr></table></figure><p>生成新的binlog<br>4）从库查看relay log 情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# ll</span><br><span class="line">total 5255232</span><br><span class="line">-rw-r----- 1 mysql mysql         56 Aug 18 15:40 auto.cnf</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:16 mysqld-relay-bin.000036</span><br><span class="line">-rw-r----- 1 mysql mysql        369 Aug 26 03:16 mysqld-relay-bin.000037</span><br><span class="line">-rw-r----- 1 mysql mysql         50 Aug 26 03:16 mysqld-relay-bin.index</span><br></pre></td></tr></table></figure><p>可以看到从库的relay log 自动删除只保留最近的两个relay log。说明下如果从库同步出现问题，没有应用的relay log 也不会自动删除relay log。直到解决掉错误，否则relay log 会越挤越多。</p><h6 id="方法2：手动-rm-rf-删除reloy-log"><a href="#方法2：手动-rm-rf-删除reloy-log" class="headerlink" title="方法2：手动 rm -rf 删除reloy log"></a>方法2：手动 rm -rf 删除reloy log</h6><p>1）查看从库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# ll</span><br><span class="line">total 5255256</span><br><span class="line">-rw-r----- 1 mysql mysql         56 Aug 18 15:40 auto.cnf</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:16 mysqld-relay-bin.000036</span><br><span class="line">-rw-r----- 1 mysql mysql        422 Aug 26 03:27 mysqld-relay-bin.000037</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000038</span><br><span class="line">-rw-r----- 1 mysql mysql        683 Aug 26 03:27 mysqld-relay-bin.000039</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000040</span><br><span class="line">-rw-r----- 1 mysql mysql        683 Aug 26 03:27 mysqld-relay-bin.000041</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000042</span><br><span class="line">-rw-r----- 1 mysql mysql        369 Aug 26 03:27 mysqld-relay-bin.000043</span><br><span class="line">-rw-r----- 1 mysql mysql        200 Aug 26 03:27 mysqld-relay-bin.index</span><br></pre></td></tr></table></figure><p>2）从库执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# rm -rf mysqld-relay-bin.000036 mysqld-relay-bin.37 mysqld-relay-bin.38</span><br><span class="line">[root@aliyun1212 data]# ll</span><br><span class="line">total 5255244</span><br><span class="line">-rw-r----- 1 mysql mysql         56 Aug 18 15:40 auto.cnf</span><br><span class="line">-rw-r----- 1 mysql mysql        683 Aug 26 03:27 mysqld-relay-bin.000039</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000040</span><br><span class="line">-rw-r----- 1 mysql mysql        683 Aug 26 03:27 mysqld-relay-bin.000041</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000042</span><br><span class="line">-rw-r----- 1 mysql mysql        369 Aug 26 03:27 mysqld-relay-bin.000043</span><br><span class="line">-rw-r----- 1 mysql mysql        200 Aug 26 03:27 mysqld-relay-bin.index</span><br></pre></td></tr></table></figure><p>从库操作系统层面rm relay log 主库更新数据从库可以继续同步：<br>主库操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert into <span class="built_in">test</span> values(13,<span class="string">'ff'</span>);</span></span><br><span class="line">Query OK, 1 row affected (0.44 sec)</span><br></pre></td></tr></table></figure><p>从库可以看到数据被同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from <span class="built_in">test</span>;</span></span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | abc  |</span><br><span class="line">|  4 | cc   |</span><br><span class="line">|  5 | dd   |</span><br><span class="line">|  6 | ee   |</span><br><span class="line">|  7 | ee   |</span><br><span class="line">|  8 | ee   |</span><br><span class="line">|  9 | ff   |</span><br><span class="line">| 10 | ff   |</span><br><span class="line">| 11 | ff   |</span><br><span class="line">| 12 | ff   |</span><br><span class="line">| 13 | ff   |</span><br><span class="line">+----+------+</span><br></pre></td></tr></table></figure><p>如果此时 stop slave<br>然后在执行start slave ,会提示以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line">ERROR 1872 (HY000): Slave failed to initialize relay log info structure from the repository</span><br></pre></td></tr></table></figure><p>此时要执行步骤3<br>3）编辑文件mysqld-relay-bin.index 删除刚才删除的relay log mysqld-relay-bin.000039之前的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# vi mysqld-relay-bin.index </span><br><span class="line">./mysqld-relay-bin.000039</span><br><span class="line">./mysqld-relay-bin.000040</span><br><span class="line">./mysqld-relay-bin.000041</span><br><span class="line">./mysqld-relay-bin.000042</span><br><span class="line">./mysqld-relay-bin.000043</span><br></pre></td></tr></table></figure><p>再次启动start slave</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line">ERROR 1872 (HY000): Slave failed to initialize relay log info structure from the repository</span><br></pre></td></tr></table></figure><p>还是会报错。<br>此时必须重启从库mysql 数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 ~]# service mysql restart</span><br><span class="line">Shutting down MySQL..                                      [  OK  ]</span><br><span class="line">Starting MySQL....                                         [  OK  ]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看从库状态正常</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status/G</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;方法1-：自动-设置参数-relay-log-purge-1&quot;&gt;&lt;a href=&quot;#方法1-：自动-设置参数-relay-log-purge-1&quot; class=&quot;headerlink&quot; title=&quot;方法1 ：自动 设置参数 relay_log_purge = 1&quot;&gt;&lt;/a&gt;方法1 ：自动 设置参数 relay_log_purge = 1&lt;/h6&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; SET GLOBAL relay_log_purge = 1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Query OK, 0 rows affected (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者在/etc/my.cnf [mysqld]模块下面增加以下内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;relay-log-purge = 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="MySQL" scheme="https://blog.ydstudio.net/tags/MySQL/"/>
    
      <category term="relay-log" scheme="https://blog.ydstudio.net/tags/relay-log/"/>
    
  </entry>
  
  <entry>
    <title>利用Mac电脑自带应用将iPhone投屏到Mac电脑的教程</title>
    <link href="https://blog.ydstudio.net/post/29afd8a9.html"/>
    <id>https://blog.ydstudio.net/post/29afd8a9.html</id>
    <published>2020-03-10T12:40:32.000Z</published>
    <updated>2020-03-10T07:01:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>你只需要准备一根USB数据线，也就是手机的充电线即可，最好是原装的USB线。</p><a id="more"></a><h4 id="手机通过USB线连接电脑"><a href="#手机通过USB线连接电脑" class="headerlink" title="手机通过USB线连接电脑"></a>手机通过USB线连接电脑</h4><p>如果手机是第一次插上这台电脑可能会弹出信任等弹框，手机端点击【信任】，电脑端点击【继续】。<br>总的来说，就是允许电脑访问手机。</p><h4 id="打开Mac-系统自带的播放器QuickTime-Player"><a href="#打开Mac-系统自带的播放器QuickTime-Player" class="headerlink" title="打开Mac 系统自带的播放器QuickTime Player"></a>打开Mac 系统自带的播放器QuickTime Player</h4><p>直接command + 空格键 调出SpotLight 搜索 “QuickTime”，即可调出QuickTime Player播放器。</p><h4 id="菜单栏【文件】–-gt-【新建影片录制】"><a href="#菜单栏【文件】–-gt-【新建影片录制】" class="headerlink" title="菜单栏【文件】–&gt;【新建影片录制】"></a>菜单栏【文件】–&gt;【新建影片录制】</h4><p>打开【QuickTime Player】后，在左上角的菜单栏中【文件】菜单，找到第一项【新建影片录制】。</p><h4 id="更改摄像头选项，选中手机即可。"><a href="#更改摄像头选项，选中手机即可。" class="headerlink" title="更改摄像头选项，选中手机即可。"></a>更改摄像头选项，选中手机即可。</h4><p>点击【新建影片录制】后，此时默认是打开的电脑自带的摄像头，此时可以更新摄像头的来源和麦克风来源。<br>推荐相机选择iPhone的，麦克风选择内置麦克风。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你只需要准备一根USB数据线，也就是手机的充电线即可，最好是原装的USB线。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MAC" scheme="https://blog.ydstudio.net/tags/MAC/"/>
    
      <category term="iPhone" scheme="https://blog.ydstudio.net/tags/iPhone/"/>
    
      <category term="投屏" scheme="https://blog.ydstudio.net/tags/%E6%8A%95%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>JVM配置参数的类型</title>
    <link href="https://blog.ydstudio.net/post/ea8be9c5.html"/>
    <id>https://blog.ydstudio.net/post/ea8be9c5.html</id>
    <published>2020-02-06T15:55:13.000Z</published>
    <updated>2020-02-06T07:57:04.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="参数名称的说明"><a href="#参数名称的说明" class="headerlink" title="参数名称的说明"></a>参数名称的说明</h5><p>JVM配置参数分别用于跟踪监控JVM状态，分配堆内存以及分配栈内存。按照类型分为三类标准参数、非标准参数和非稳定参数</p><a id="more"></a><h6 id="标准参数"><a href="#标准参数" class="headerlink" title="标准参数(-)"></a>标准参数(-)</h6><p>所有 JVM 都必须支持这些参数的功能, 而且向后兼容, 如:</p><ul><li><p>-client : 设置 JVM 使用 client 模式, 特点是启动速度比较快, 但运行时性能和内存管理效率不高. 通常用于客户端应用程序或开发调试; 在32位环境下直接运行 Java 程序默认启用该模式.</p></li><li><p>-server : 设置 JVM 使 server 模式, 特点是启动速度比较慢, 但运行时性能和内存管理效率很高, 适用于生产环境; 在具有64位能力的JDK环境下默认启用该模式.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Sam-Mac:hexo-blog Sam$ java -version</span><br><span class="line">java version <span class="string">"1.8.0_74"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_74-b02)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.74-b02, mixed mode)</span><br><span class="line">Sam-Mac:hexo-blog Sam$</span><br></pre></td></tr></table></figure><h6 id="非标准参数-X"><a href="#非标准参数-X" class="headerlink" title="非标准参数(-X)"></a>非标准参数(-X)</h6><p>各 JVM 厂商应该都实现这些参数的功能, 但是并不保证所有的 JVM 实现都满足, 且不保证向后兼容。这些用的不多，看看就好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 解释执行</span><br><span class="line">-Xint</span><br><span class="line"></span><br><span class="line">// 第一次使用就编译成本地代码</span><br><span class="line">-Xcomp</span><br><span class="line"></span><br><span class="line">// 混合模式</span><br><span class="line">-Xmixed</span><br></pre></td></tr></table></figure><h6 id="非稳定参数-XX"><a href="#非稳定参数-XX" class="headerlink" title="非稳定参数(-XX)"></a>非稳定参数(-XX)</h6><p>此类参数各个JVM实现会有所不同, 将来可能会不被支持, 需要慎重使用。这种类型的参数自己又可分为两种，分别如下：</p><ul><li><p>布尔类型。 -XX:+ 或者 - 某个属性值，+ 表示开启，-表示关闭。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 打印GC详细信息</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line"></span><br><span class="line">// 不打印GC详细信息</span><br><span class="line">-XX:-PrintGCDetails</span><br></pre></td></tr></table></figure></li><li><p>KV类型。-XX:属性key=属性值value，例如：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 设置Metaspace的大小</span><br><span class="line">-XX:MetaspaceSize=1024m</span><br></pre></td></tr></table></figure><p>注意: 在”-XX:”后的参数若不需要赋值, 即只是用来配置开启或关闭相应选项, 则需要有 “+” (开启) 或 “-“ (禁止) , 否则应用程序将在日志文件 (如 Tomcat 的日志文件 catalina.out ) 中抛出如下错误:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Missing +/- setting <span class="keyword">for</span> VM option <span class="string">'UseConcMarkSweepGC'</span>. </span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure><p>可以看出, 这里缺少了 “+/-“ 符号, 导致虚拟机启动异常, 修改后即可正常启动.</p><p>我们常设置的JVM参数Xms和Xmx,属于哪种类型的JVM参数？-Xms等价于-XX:InitialHeapSize,-Xmx等价于-XX:MaxHeapSize，所以他们都是XX类型参数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;参数名称的说明&quot;&gt;&lt;a href=&quot;#参数名称的说明&quot; class=&quot;headerlink&quot; title=&quot;参数名称的说明&quot;&gt;&lt;/a&gt;参数名称的说明&lt;/h5&gt;&lt;p&gt;JVM配置参数分别用于跟踪监控JVM状态，分配堆内存以及分配栈内存。按照类型分为三类标准参数、非标准参数和非稳定参数&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Jvm" scheme="https://blog.ydstudio.net/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>Spring配置文件中的classpath:和classpath*:的区别</title>
    <link href="https://blog.ydstudio.net/post/38b6491c.html"/>
    <id>https://blog.ydstudio.net/post/38b6491c.html</id>
    <published>2020-01-28T22:46:48.000Z</published>
    <updated>2020-01-28T14:53:41.000Z</updated>
    
    <content type="html"><![CDATA[<p> classpath是spring的写法，classpath是指WEB-INF文件夹下的classes目录，对应源代码src目录，用于存放从src中拷贝过去的各种配置文件，以及编译过后的class文件。Spring可以通过指定classpath*:与classpath:前缀加上路径的方式从classpath加载配置文件。</p><a id="more"></a><h5 id="classpath-的具体含义"><a href="#classpath-的具体含义" class="headerlink" title="classpath: 的具体含义"></a>classpath: 的具体含义</h5><p>classpath:表示从类路径中加载资源，classpath:和classpath:/是等价的，都是相对于类的根路径。资源文件库标准的在文件系统中，也可以在JAR或ZIP的类包中。</p><h5 id="classpath-的具体含义-1"><a href="#classpath-的具体含义-1" class="headerlink" title="classpath*: 的具体含义"></a>classpath*: 的具体含义</h5><p>classpath*:：假设多个JAR包或文件系统类路径都有一个相同的配置文件，classpath:只会在第一个加载的类路径下查找，而classpath:会扫描所有这些JAR包及类路径下出现的同名文件。</p><h5 id="具体例子如下"><a href="#具体例子如下" class="headerlink" title="具体例子如下"></a>具体例子如下</h5><ul><li>classpath:applicationContext.xml，匹配classpath下的指定文件         </li><li>classpath:/spring/applicationContext.xml，匹配classpath子目录下的指定文件</li><li>classpath:spring-*.xml，匹配classpath下的指定前缀的文件</li><li>classpath:<em>*/spring-</em>.xml，匹配classpath下所有目录下的指定前缀的文件</li><li>classpath<em>:**/spring-</em>.xml，匹配当前classpath和jar中classpath下所有目录下的指定前缀的文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; classpath是spring的写法，classpath是指WEB-INF文件夹下的classes目录，对应源代码src目录，用于存放从src中拷贝过去的各种配置文件，以及编译过后的class文件。Spring可以通过指定classpath*:与classpath:前缀加上路径的方式从classpath加载配置文件。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="spring" scheme="https://blog.ydstudio.net/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>利用Docker Compose管理服务</title>
    <link href="https://blog.ydstudio.net/post/a5d4c4d4.html"/>
    <id>https://blog.ydstudio.net/post/a5d4c4d4.html</id>
    <published>2020-01-14T22:17:18.000Z</published>
    <updated>2020-01-14T14:57:32.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="docker-compose-简介"><a href="#docker-compose-简介" class="headerlink" title="docker-compose 简介"></a>docker-compose 简介</h5><p>Compose是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以使用YML文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><a id="more"></a><h5 id="docker-compose-使用的三个步骤："><a href="#docker-compose-使用的三个步骤：" class="headerlink" title="docker-compose 使用的三个步骤："></a>docker-compose 使用的三个步骤：</h5><ul><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 docker-compose.yml 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>执行 docker-compose up 命令来启动并运行整个应用程序。</li></ul><h5 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker-compose 安装"></a>docker-compose 安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#以centos为例</span></span><br><span class="line">yum install -y docker-compose</span><br></pre></td></tr></table></figure><h5 id="使用docker-compose编排一个jdk8、tomcat7、mysql5-7和redis3-2的实例"><a href="#使用docker-compose编排一个jdk8、tomcat7、mysql5-7和redis3-2的实例" class="headerlink" title="使用docker-compose编排一个jdk8、tomcat7、mysql5.7和redis3.2的实例"></a>使用docker-compose编排一个jdk8、tomcat7、mysql5.7和redis3.2的实例</h5><p>准备的材料和目录结构如下：</p><p>├── docker-compose.yml<br>└── tomcat7<br>    ├── apache-tomcat-7.0.99.zip<br>    ├── Dockerfile<br>    ├── jdk-8u131-linux-x64.tar.gz<br>    └── my.cnf</p><p>#挂在到容器的目录<br>├── mysql<br>│   ├── conf<br>│   │   └── my.cnf<br>│   ├── data<br>│   ├── init<br>│   │   ├── init.sh<br>│   │   └── mysql_init.sql<br>│   └── log<br>└── tomcat7<br>    ├── conf<br>    │   ├── Catalina<br>    │   │   └── localhost<br>    │   ├── catalina.policy<br>    │   ├── catalina.properties<br>    │   ├── context.xml<br>    │   ├── logging.properties<br>    │   ├── server.xml<br>    │   ├── tomcat-users.xml<br>    │   ├── tomcat-users.xsd<br>    │   └── web.xml<br>    ├── data<br>    ├── logs<br>    └── webapps</p><p>docker-compose.yml 的内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">samjavawebenv:</span> </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">javawebenv</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">       <span class="attr">context:</span> <span class="string">./tomcat7/</span></span><br><span class="line">       <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">compose-javawebenv:v1</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">links:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"443:443"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8080:8080"</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">Dspring.profiles.active=prod</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"../../docker-compose/tomcat7/conf:/usr/local/tomcat7/conf"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"../../docker-compose/tomcat7/data:/usr/local/tomcat7/data"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"../../docker-compose/tomcat7/logs:/usr/local/tomcat7/logs"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"../../docker-compose/tomcat7/webapps:/usr/local/tomcat7/webapps"</span></span><br><span class="line">  <span class="attr">mysql:</span> </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql5.7</span></span><br><span class="line">    <span class="attr">environment:</span> </span><br><span class="line">      <span class="attr">MYSQL_ROOT_HOST:</span> <span class="string">"%"</span></span><br><span class="line">      <span class="attr">MYSQL_HOST:</span> <span class="string">"localhost"</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">"xxxx"</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">"mysql:5.7"</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"3306:3306"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"../../docker-compose/mysql/data:/var/lib/mysql"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"../../docker-compose/mysql/conf:/etc/mysql/conf.d"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"../../docker-compose/mysql/init:/docker-entrypoint-initdb.d"</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span></span><br><span class="line">  <span class="attr">redis:</span> </span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis3.2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">"redis:3.2"</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"6380:6379"</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">"redis-server --appendonly yes"</span></span><br></pre></td></tr></table></figure><p>init.sh中的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">mysql -uroot -pxxx &lt;&lt; EOF</span><br><span class="line"><span class="built_in">source</span> /docker-entrypoint-initdb.d/mysql_init.sql;</span><br></pre></td></tr></table></figure><p>mysql_init.sql中的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">use</span> mysql;</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'xxxx'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span> <span class="keyword">and</span> host=<span class="string">'localhost'</span>; </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mysql`</span>.<span class="string">`user`</span> (<span class="string">`Host`</span>, <span class="string">`User`</span>, <span class="string">`Select_priv`</span>, <span class="string">`Insert_priv`</span>, <span class="string">`Update_priv`</span>, <span class="string">`Delete_priv`</span>, <span class="string">`Create_priv`</span>, <span class="string">`Drop_priv`</span>, <span class="string">`Reload_priv`</span>, <span class="string">`Shutdown_p</span></span><br><span class="line"><span class="string">riv`</span>, <span class="string">`Process_priv`</span>, <span class="string">`File_priv`</span>, <span class="string">`Grant_priv`</span>, <span class="string">`References_priv`</span>, <span class="string">`Index_priv`</span>, <span class="string">`Alter_priv`</span>, <span class="string">`Show_db_priv`</span>, <span class="string">`Super_priv`</span>, <span class="string">`Create_tmp_table_priv`</span>, <span class="string">`Lock_t</span></span><br><span class="line"><span class="string">ables_priv`</span>, <span class="string">`Execute_priv`</span>, <span class="string">`Repl_slave_priv`</span>, <span class="string">`Repl_client_priv`</span>, <span class="string">`Create_view_priv`</span>, <span class="string">`Show_view_priv`</span>, <span class="string">`Create_routine_priv`</span>, <span class="string">`Alter_routine_priv`</span>, <span class="string">`Create</span></span><br><span class="line"><span class="string">_user_priv`</span>, <span class="string">`Event_priv`</span>, <span class="string">`Trigger_priv`</span>, <span class="string">`Create_tablespace_priv`</span>, <span class="string">`ssl_type`</span>, <span class="string">`ssl_cipher`</span>, <span class="string">`x509_issuer`</span>, <span class="string">`x509_subject`</span>, <span class="string">`max_questions`</span>, <span class="string">`max_updates`</span>, </span><br><span class="line"><span class="string">`max_connections`</span>, <span class="string">`max_user_connections`</span>, <span class="string">`plugin`</span>, <span class="string">`authentication_string`</span>, <span class="string">`password_expired`</span>, <span class="string">`password_last_changed`</span>, <span class="string">`password_lifetime`</span>, <span class="string">`account_locke</span></span><br><span class="line"><span class="string">d`</span>) <span class="keyword">VALUES</span> (<span class="string">'%'</span>, <span class="string">'xx'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">'Y</span></span><br><span class="line"><span class="string">'</span>, <span class="string">'Y'</span>, <span class="string">'Y'</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'0'</span>, <span class="string">'mysql_native_password'</span>, <span class="keyword">password</span>(<span class="string">'xxx'</span>), <span class="string">'N'</span>, <span class="string">'2020-01-09 11:41:17'</span>, <span class="literal">NULL</span>, <span class="string">'N'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>容器间访问mysql和redis的链接地址要修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把主机地址换成service的名字</span></span><br><span class="line">jbdc.url=jdbc:mysql://mysql:3306/flash_sale?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql的用户主机为 javawebenv.compose_default 即 container_name + compose_default</span></span><br></pre></td></tr></table></figure><h6 id="docker-compose-命令"><a href="#docker-compose-命令" class="headerlink" title="docker-compose 命令"></a>docker-compose 命令</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建</span></span><br><span class="line">docker-compose build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">docker-compose up</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果你想在后台执行该服务可以加上 -d 参数</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭</span></span><br><span class="line">docker-compose stop</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line">docker-compose rm</span><br></pre></td></tr></table></figure><p>以上的docker-compose命令都是在 docker-compose.yml 文件目录下执行</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;docker-compose-简介&quot;&gt;&lt;a href=&quot;#docker-compose-简介&quot; class=&quot;headerlink&quot; title=&quot;docker-compose 简介&quot;&gt;&lt;/a&gt;docker-compose 简介&lt;/h5&gt;&lt;p&gt;Compose是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以使用YML文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://blog.ydstudio.net/tags/docker/"/>
    
      <category term="docker-compose" scheme="https://blog.ydstudio.net/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>我常用的docker基本命令</title>
    <link href="https://blog.ydstudio.net/post/c9b0a620.html"/>
    <id>https://blog.ydstudio.net/post/c9b0a620.html</id>
    <published>2020-01-13T22:00:51.000Z</published>
    <updated>2020-01-14T14:45:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>docker 客户端非常简单 ,我们可以直接输入 docker 命令来查看到 Docker 客户端的所有命令选项。可以通过命令 docker command –help 更深入的了解指定的 Docker 命令使用方法。<br>例如我们要查看 docker stats 指令的具体使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><a id="more"></a><h6 id="docker查找镜像"><a href="#docker查找镜像" class="headerlink" title="docker查找镜像"></a>docker查找镜像</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询镜像</span></span><br><span class="line">docker search 镜像名称</span><br><span class="line"></span><br><span class="line"><span class="comment">#docker查找官方原版镜像</span></span><br><span class="line">docker search --filter <span class="string">"is-official=true"</span> centos</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">docker search -f is-official=<span class="literal">true</span> centos</span><br></pre></td></tr></table></figure><h5 id="docker-安装镜像"><a href="#docker-安装镜像" class="headerlink" title="docker 安装镜像"></a>docker 安装镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令语法</span></span><br><span class="line">docker pull 镜像名称:标签</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 tomcat8 </span></span><br><span class="line">docker pull tomcat:8</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装 mysql5.7 </span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><h5 id="删除images"><a href="#删除images" class="headerlink" title="删除images"></a>删除images</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#若删除不掉，说明有容器正在使用此 images</span></span><br><span class="line">docker rmi imgId</span><br><span class="line"></span><br><span class="line"><span class="comment">#先执行 </span></span><br><span class="line">docker rm containerId</span><br><span class="line"></span><br><span class="line"><span class="comment">#再执行 </span></span><br><span class="line">docker rmi imgId</span><br></pre></td></tr></table></figure><h5 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h5><p>以下命令使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#命令语法</span></span><br><span class="line"></span><br><span class="line">docker run &lt;相关参数&gt; &lt;镜像 ID&gt; &lt;初始命令&gt; </span><br><span class="line">docker run -itd --name 自定义容器名称 镜像名称:标签 shell</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行tomcat8 </span></span><br><span class="line">docker run -p 8080:8080 --name mytomcat tomcat:8</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行ubuntu镜像</span></span><br><span class="line">docker run -itd ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h6 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h6><ul><li>-i: 交互式操作。</li><li>-t: 终端。</li><li>-d：指定容器的运行模式为后台运行。</li><li>-P:是容器内部端口随机映射到主机的高端口。</li><li>-p: 是容器内部端口绑定到指定的主机端口。</li><li>–name: 标识来命名容器。</li><li>ubuntu: ubuntu 镜像。</li><li>/bin/bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 /bin/bash。</li><li>-v：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;</li></ul><p>需要说明的是，不一定要使用“镜像 ID”，也可以使用“仓库名:标签名”，例如：centos:latest。<br>初始命令表示一旦容器启动，需要运行的命令，此时使用“/bin/bash”，表示什么也不做，只需进入命令行即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql5.7 -p 3306:3306 -v /usr/<span class="built_in">local</span>/mysql/data:/var/lib/mysql </span><br><span class="line">-v /usr/<span class="built_in">local</span>/mysql/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.25</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#将windows下F盘的目录javaResource挂载到docker中centos中的/usr/local/src下，docker中可以先设置分享盘符</span></span><br><span class="line">docker run -it --privileged=<span class="literal">true</span> -v /F/javaResource/:/usr/<span class="built_in">local</span>/src/ 5e35e350aded  /bin/bash</span><br></pre></td></tr></table></figure><h6 id="要退出终端，直接输入-exit"><a href="#要退出终端，直接输入-exit" class="headerlink" title="要退出终端，直接输入 exit:"></a>要退出终端，直接输入 exit:</h6><h5 id="通过-docker-inspect-命令，我们可以获取镜像的详细信息，其中，包括创建者，各层的数字摘要等。"><a href="#通过-docker-inspect-命令，我们可以获取镜像的详细信息，其中，包括创建者，各层的数字摘要等。" class="headerlink" title="通过 docker inspect 命令，我们可以获取镜像的详细信息，其中，包括创建者，各层的数字摘要等。"></a>通过 docker inspect 命令，我们可以获取镜像的详细信息，其中，包括创建者，各层的数字摘要等。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker inspect repository:tag</span><br><span class="line">docker inspect mysql:5.7</span><br><span class="line"></span><br><span class="line">docker inspect 返回的是 JSON 格式的信息，如果您想获取其中指定的一项内容，可以通过 -f 来指定，如获取镜像大小：</span><br><span class="line"></span><br><span class="line">docker inspect -f &#123;&#123;<span class="string">".Size"</span>&#125;&#125; mysql:5.7</span><br></pre></td></tr></table></figure><h5 id="容器其他命令"><a href="#容器其他命令" class="headerlink" title="容器其他命令"></a>容器其他命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看正在运行的容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有的容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止容器</span></span><br><span class="line">docker stop containerId</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker start containerId</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启容器</span></span><br><span class="line">docker restart containerId</span><br></pre></td></tr></table></figure><h6 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h6><p>在使用 -d 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p><ul><li>docker attach</li><li>docker exec：推荐大家使用 docker exec 命令，因为此退出容器终端，不会导致容器的停止。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mytomcat bash <span class="comment">#在这里用到了上面提到的容器别名mytomcat</span></span><br></pre></td></tr></table></figure><h6 id="什么是-Dockerfile"><a href="#什么是-Dockerfile" class="headerlink" title="什么是 Dockerfile"></a>什么是 Dockerfile</h6><p>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><ul><li>FROM 和 RUN 指令的作用</li></ul><p>FROM：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。</p><p>RUN：用于执行后面跟着的命令行命令。有以下俩种格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#shell格式</span></span><br><span class="line">RUN &lt;命令行命令&gt;</span><br><span class="line"><span class="comment"># &lt;命令行命令&gt; 等同于，在终端操作的 shell 命令。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#exec 格式</span></span><br><span class="line">RUN [<span class="string">"可执行文件"</span>, <span class="string">"参数1"</span>, <span class="string">"参数2"</span>]</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line"><span class="comment"># RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline</span></span><br></pre></td></tr></table></figure><p>注意：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install wget</span><br><span class="line">RUN wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span></span><br><span class="line">RUN tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure><p>以上执行会创建 3 层镜像。可简化为以下格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install wget \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> \</span><br><span class="line">    &amp;&amp; tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure><p>如上，以 &amp;&amp; 符号连接命令，这样执行后，只会创建 1 层镜像。</p><h5 id="开始构建镜像"><a href="#开始构建镜像" class="headerlink" title="开始构建镜像"></a>开始构建镜像</h5><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p><p>以下示例，通过目录下的 Dockerfile 构建一个 tomcat和jdk整合的镜像:v1（镜像名称:镜像标签）<br>注：最后的 . 代表本次执行的上下文路径，下一节会介绍。</p><h1 id="构建镜像命令"><a href="#构建镜像命令" class="headerlink" title="构建镜像命令"></a>构建镜像命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#命令语法 </span></span><br><span class="line">docker build -t name:tag .</span><br><span class="line">-t 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例如</span></span><br><span class="line">docker build -t javawebenv:v1 .</span><br></pre></td></tr></table></figure><h1 id="Dockerfile内容"><a href="#Dockerfile内容" class="headerlink" title="Dockerfile内容"></a>Dockerfile内容</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">FROM centos:7 <span class="comment">#使用centos7最新的官方镜像</span></span><br><span class="line">MAINTAINER samdockerdeveloper</span><br><span class="line">RUN mkdir  -p /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">&amp;&amp;mkdir -p /usr/<span class="built_in">local</span>/jdk8</span><br><span class="line">WORKDIR   /usr/<span class="built_in">local</span>/src/  <span class="comment">#使用该目录作为工作目录</span></span><br><span class="line">COPY apache-tomcat-7.0.99.zip /usr/<span class="built_in">local</span>/src/</span><br><span class="line">COPY jdk-8u131-linux-x64.tar.gz /usr/<span class="built_in">local</span>/src/</span><br><span class="line">COPY my.cnf /usr/<span class="built_in">local</span>/src/</span><br><span class="line">RUN yum update -y \</span><br><span class="line">&amp;&amp;yum install -y unzip \</span><br><span class="line">&amp;&amp;unzip apache-tomcat-7.0.99.zip \</span><br><span class="line">&amp;&amp;rpm --import /etc/pki/rpm-gpg/RPM* \</span><br><span class="line">&amp;&amp;cp -R apache-tomcat-7.0.99/* /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">&amp;&amp;chmod +x /usr/<span class="built_in">local</span>/tomcat7/bin/*.sh \</span><br><span class="line">&amp;&amp;tar -xf jdk-8u131-linux-x64.tar.gz  -C /usr/<span class="built_in">local</span>/jdk8 --strip-components 1 <span class="comment"># 放弃上级目录解压到/usr/local/jdk8目录下</span></span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk8</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/tomcat7</span><br><span class="line">ENV CATALINA_BASE /usr/<span class="built_in">local</span>/tomcat7</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line">EXPOSE 8080 <span class="comment">#暴露8080端口</span></span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/local/tomcat7/bin/catalina.sh"</span>,<span class="string">"run"</span>]</span><br></pre></td></tr></table></figure><p>上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），docker build 命令得知这个路径后，会将路径下的所有内容打包。</p><p>解析：由于 docker 的运行模式是 C/S。我们本机是 C，docker引擎是S。实际的构建过程是在docker引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。</p><p>如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。<br>注意：上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。</p><h6 id="使用的过程中遇到的问题"><a href="#使用的过程中遇到的问题" class="headerlink" title="使用的过程中遇到的问题"></a>使用的过程中遇到的问题</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Docker报错“Dockerfile parse error line 1: FROM requires either one or three arguments” 看官方文档Format：</span><br><span class="line">以<span class="string">'#'</span> 开头一行被视为评论，出现在其他位置视为参数,也就不难理解报错原因：将写在同一行的注释视为参数了。</span><br><span class="line"></span><br><span class="line">Failed to get D-Bus connection: Operation not permitted /etc/init.d/mysqld:</span><br><span class="line">启动命令 docker run -d -p 8080:8080 -v /root/webapps:/usr/<span class="built_in">local</span>/tomcat7/webapps --name mycentos mycentos:7 /bin/bash</span><br><span class="line"></span><br><span class="line">以特权模式运行容器</span><br><span class="line">启动命令改成 docker run -d -p 8080:8080 -v /root/webapps:/usr/<span class="built_in">local</span>/tomcat7/webapps --name mycentos mycentos:7 /usr/sbin/init</span><br><span class="line"></span><br><span class="line">/etc/sysconfig/network 文件夹不存在</span><br><span class="line">编辑/etc/init.d/mysqld 中的 . /etc/sysconfig/network</span><br><span class="line">修改成/etc/sysconfig/network-scripts/ifcfg-lo或者用软连接 ln -s /etc/sysconfig/network-scripts/ifcfg-lo /etc/sysconfig/network</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker 客户端非常简单 ,我们可以直接输入 docker 命令来查看到 Docker 客户端的所有命令选项。可以通过命令 docker command –help 更深入的了解指定的 Docker 命令使用方法。&lt;br&gt;例如我们要查看 docker stats 指令的具体使用方法：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker stats --&lt;span class=&quot;built_in&quot;&gt;help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://blog.ydstudio.net/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>以centos7镜像为基础构建一个jdk8和tomcat7的镜像</title>
    <link href="https://blog.ydstudio.net/post/97b746d3.html"/>
    <id>https://blog.ydstudio.net/post/97b746d3.html</id>
    <published>2020-01-04T23:22:55.000Z</published>
    <updated>2020-01-05T03:14:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先我简单说一下容器的一些知识点</p><ul><li>一个容器只跑一个进程，并且该进程只能前台运行。</li><li>容器有层的概念，如果需要定制容器，应该尽量通过Dockerfile来构建容器。<a id="more"></a><h5 id="什么是-Dockerfile"><a href="#什么是-Dockerfile" class="headerlink" title="什么是 Dockerfile"></a>什么是 Dockerfile</h5></li><li>Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">FROM centos:7 </span><br><span class="line">MAINTAINERsamdockerdeveloper</span><br><span class="line">RUN mkdir  -p /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">&amp;&amp;mkdir -p /usr/<span class="built_in">local</span>/jdk8</span><br><span class="line">WORKDIR   /usr/<span class="built_in">local</span>/src/</span><br><span class="line">COPY apache-tomcat-7.0.99.zip /usr/<span class="built_in">local</span>/src/</span><br><span class="line">COPY jdk-8u131-linux-x64.tar.gz /usr/<span class="built_in">local</span>/src/</span><br><span class="line">RUN yum update -y \</span><br><span class="line">&amp;&amp;yum install -y unzip  \</span><br><span class="line">&amp;&amp;unzip apache-tomcat-7.0.99.zip \</span><br><span class="line">&amp;&amp;cp -R apache-tomcat-7.0.99/* /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">&amp;&amp;chmod +x  /usr/<span class="built_in">local</span>/tomcat7/bin/*.sh \</span><br><span class="line">&amp;&amp;tar -xf jdk-8u131-linux-x64.tar.gz  -C /usr/<span class="built_in">local</span>/jdk8 --strip-components 1</span><br><span class="line">ENV JAVA_HOME /usr/<span class="built_in">local</span>/jdk8 \</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar \</span><br><span class="line">ENV CATALINA_HOME /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">ENV CATALINA_BASE /usr/<span class="built_in">local</span>/tomcat7 \</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [<span class="string">"/usr/local/tomcat7/bin/catalina.sh"</span>,<span class="string">"run"</span>]</span><br></pre></td></tr></table></figure><p>在Dockerfile同级目录里存放已经下载好的apache-tomcat-7.0.99.zip、jdk-8u131-linux-x64.tar.gz。</p><p><strong>注意</strong>：Dockerfile 的指令每执行一次都会在 docker 上新建一层。所以过多无意义的层，会造成镜像膨胀过大。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install wget</span><br><span class="line">RUN wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span></span><br><span class="line">RUN tar -xvf redis.tar.gz</span><br><span class="line">以上执行会创建 3 层镜像。可简化为以下格式：</span><br><span class="line">FROM centos</span><br><span class="line">RUN yum install wget \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz <span class="string">"http://download.redis.io/releases/redis-5.0.3.tar.gz"</span> \</span><br><span class="line">    &amp;&amp; tar -xvf redis.tar.gz</span><br></pre></td></tr></table></figure><p> 如上，以 &amp;&amp; 符号连接命令，这样执行后，只会创建 1 层镜像。</p><h5 id="开始构建镜像"><a href="#开始构建镜像" class="headerlink" title="开始构建镜像"></a>开始构建镜像</h5><p>在 Dockerfile 文件的存放目录下，执行构建动作。</p><p>以下示例，通过目录下的 Dockerfile 构建一个 samjavawebenv:v2（镜像名称:镜像标签）。</p><p><strong>注</strong>：最后的 . 代表本次执行的上下文路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker build -t  name:tag  .</span></span><br><span class="line">docker build -t  samjavawebenv:v2  .</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先我简单说一下容器的一些知识点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个容器只跑一个进程，并且该进程只能前台运行。&lt;/li&gt;
&lt;li&gt;容器有层的概念，如果需要定制容器，应该尽量通过Dockerfile来构建容器。
    
    </summary>
    
    
    
      <category term="linux" scheme="https://blog.ydstudio.net/tags/linux/"/>
    
      <category term="docker" scheme="https://blog.ydstudio.net/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringMvc使用@Async注解实现有返回值和无返回值的异步处理</title>
    <link href="https://blog.ydstudio.net/post/e7e78673.html"/>
    <id>https://blog.ydstudio.net/post/e7e78673.html</id>
    <published>2020-01-03T23:12:21.000Z</published>
    <updated>2020-01-11T13:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="SpringMvc使用-Async注解实现有返回值和无返回值的异步处理"><a href="#SpringMvc使用-Async注解实现有返回值和无返回值的异步处理" class="headerlink" title="SpringMvc使用@Async注解实现有返回值和无返回值的异步处理"></a>SpringMvc使用@Async注解实现有返回值和无返回值的异步处理</h5><p> 异步调用对应的是同步调用，同步调用指程序按照定义顺序依次执行，每一行程序都必须等待上一行程序执行完成之后才能执行；异步调用指程序在顺序执行时，不等待异步调用的语句返回结果就执行后面的程序。<br> <a id="more"></a></p><h6 id="同步方式调用代码"><a href="#同步方式调用代码" class="headerlink" title="同步方式调用代码"></a>同步方式调用代码</h6><ul><li><p>相关代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务一"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务二"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务三"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同步调用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TaskService task;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">task.doTaskOne();</span><br><span class="line">task.doTaskTwo();</span><br><span class="line">task.doTaskThree();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是运行结果，可以看到三个方法是依次执行的，分别耗时2秒、3秒、4秒、总耗时9秒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">开始做任务一</span><br><span class="line">完成任务一，耗时：2001毫秒</span><br><span class="line">开始做任务二</span><br><span class="line">完成任务二，耗时：3000毫秒</span><br><span class="line">开始做任务三</span><br><span class="line">完成任务三，耗时：4001毫秒</span><br></pre></td></tr></table></figure><p>上面的同步调用，虽然顺利地完成了三个任务，但是执行时间比较长，如果这三个任务没有依赖关系，可以并发执行的话，可以考虑使用异步调用的方法。</p><h6 id="异步方式调用代码无返回值"><a href="#异步方式调用代码无返回值" class="headerlink" title="异步方式调用代码无返回值"></a>异步方式调用代码无返回值</h6><ul><li>首先在spring中配置相关参数开启异步调用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/task</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/task/spring-task.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span> <span class="attr">executor</span>=<span class="string">"taskExecutor"</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">task:executor</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span>  <span class="attr">pool-size</span>=<span class="string">"20"</span> <span class="attr">queue-capacity</span>=<span class="string">"1000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在方法上加上 @Async 注解就能将同步函数变成异步函数，改造后的代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskOne</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务一"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskTwo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务二"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTaskThree</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务三"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重新调用之后的运行结果如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">开始做任务三</span><br><span class="line">开始做任务二</span><br><span class="line">开始做任务一</span><br><span class="line">完成任务一，耗时：2000毫秒</span><br><span class="line">完成任务二，耗时：3001毫秒</span><br><span class="line">完成任务三，耗时：4000毫秒</span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li><p>@Async 所修饰的函数不要定义为 static 类型，这样异步调用不会生效。</p></li><li><p>调用方法和异步函数不能在一个 class 中。</p></li></ul><h6 id="异步方式调用代码有返回值"><a href="#异步方式调用代码有返回值" class="headerlink" title="异步方式调用代码有返回值"></a>异步方式调用代码有返回值</h6><p>如果想知道异步函数什么时候执行完，那就需要使用 Future (AsyncResult是Future的子类)来返回异步调用的结果。<br>改造后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务一"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务一完成"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务二"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务二完成"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">doTaskThree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"开始做任务三"</span>);</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Thread.sleep(<span class="number">4000</span>);</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"完成任务二，耗时：%s"</span> , (end - start) + <span class="string">"毫秒"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;&gt;(<span class="string">"任务三完成"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>异步方式调用代码有返回值</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TaskService task;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList(<span class="number">16</span>);</span><br><span class="line">StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">stopWatch.start(<span class="string">"接口速度统计"</span>);</span><br><span class="line"><span class="comment">// 3秒超时</span></span><br><span class="line">    <span class="keyword">int</span> timeout = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Future&lt;String&gt; task1 = task.doTaskOne();</span><br><span class="line">        Future&lt;String&gt; task2 = task.doTaskTwo();</span><br><span class="line">        Future&lt;String&gt; task3 = task.doTaskThree();</span><br><span class="line"></span><br><span class="line">String taskString1= task1.get(timeout, TimeUnit.SECONDS);</span><br><span class="line">String taskString2= task2.get(timeout, TimeUnit.SECONDS);</span><br><span class="line">String taskString3= task3.get(timeout, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">result.add(taskString1);</span><br><span class="line">result.add(taskString2);</span><br><span class="line">result.add(taskString3);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (TimeoutException | InterruptedException | ExecutionException e)&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">stopWatch.stop();</span><br><span class="line">log.info(stopWatch.prettyPrint());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">开始做任务三</span><br><span class="line">开始做任务二</span><br><span class="line">开始做任务一</span><br><span class="line">完成任务一，耗时：2001毫秒</span><br><span class="line">完成任务二，耗时：3000毫秒</span><br><span class="line">完成任务三，耗时：4001毫秒</span><br><span class="line"></span><br><span class="line">StopWatch <span class="string">''</span>: running time (millis) = 248</span><br><span class="line">-----------------------------------------</span><br><span class="line">ms     %     Task name</span><br><span class="line">-----------------------------------------</span><br><span class="line">04036  100%  接口速度统计</span><br></pre></td></tr></table></figure><p>刚开始想利用CountDownLatch来实现等待所有线程结束整合结果，后来调整为 Future 的 get(long timeout, TimeUnit unit) 来实现线程的超时控制，我看有些的例子使用死循环来阻塞整合线程的执行结果，这样做是有些问题的，如果有个线程一直没有结束运行，那就完犊子了！</p><p>这是一种常见的场景将一个大的任务切分为数个子任务，并行处理所有子任务，当所有子任务都成功结束时再继续处理后面的逻辑。还有一种做法是利用CountDownLatch, 主线程构造countDownLatch对象，latch的大小为子任务的总数，每一个任务持有countDownLatch的引用，任务完成时对latch减1，主线程阻塞在countDownLatch.await方法上，当所有子任务都成功执行完后，latch=0, 主线程继续执行。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>异步调用可以提升接口性能。比如导出下载、发送邮件短信等代码，可以使用异步执行。</p><p><a href="https://blog.csdn.net/qqfo24/article/details/81383022" target="_blank" rel="noopener">参考 https://blog.csdn.net/qqfo24/article/details/81383022</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;SpringMvc使用-Async注解实现有返回值和无返回值的异步处理&quot;&gt;&lt;a href=&quot;#SpringMvc使用-Async注解实现有返回值和无返回值的异步处理&quot; class=&quot;headerlink&quot; title=&quot;SpringMvc使用@Async注解实现有返回值和无返回值的异步处理&quot;&gt;&lt;/a&gt;SpringMvc使用@Async注解实现有返回值和无返回值的异步处理&lt;/h5&gt;&lt;p&gt; 异步调用对应的是同步调用，同步调用指程序按照定义顺序依次执行，每一行程序都必须等待上一行程序执行完成之后才能执行；异步调用指程序在顺序执行时，不等待异步调用的语句返回结果就执行后面的程序。&lt;br&gt;
    
    </summary>
    
    
    
      <category term="SpringMvc" scheme="https://blog.ydstudio.net/tags/SpringMvc/"/>
    
      <category term="Async" scheme="https://blog.ydstudio.net/tags/Async/"/>
    
  </entry>
  
  <entry>
    <title>在CentOS7上使用yum安装Docker</title>
    <link href="https://blog.ydstudio.net/post/ef24ce2b.html"/>
    <id>https://blog.ydstudio.net/post/ef24ce2b.html</id>
    <published>2019-12-23T22:30:18.000Z</published>
    <updated>2020-01-13T14:39:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前在 Linux 操作系统上安装 Docker，对系统版本有以下要求：</p><ul><li>CentOS：7</li><li>Debian：7.7（Wheezy LTS）、8.0（Jessie LTS）、9（Stretch）</li><li>Fedora：24、25</li><li>Ubuntu：16.04（Xenial LTS）、14.04（Trusty LTS）、17.04（Zesty）</li></ul><a id="more"></a><h5 id="使用-yum-进行安装"><a href="#使用-yum-进行安装" class="headerlink" title="使用 yum 进行安装"></a>使用 yum 进行安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># Step 3: 更新并安装Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="comment"># Step 4: 开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line"><span class="comment"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。</span></span><br><span class="line"><span class="comment"># 例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。</span></span><br><span class="line"><span class="comment"># vim /etc/yum.repos.d/docker-ee.repo</span></span><br><span class="line"><span class="comment">#   将[docker-ce-test]下方的enabled=0修改为enabled=1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span></span><br><span class="line"><span class="comment">#   Loading mirror speeds from cached hostfile</span></span><br><span class="line"><span class="comment">#   Loaded plugins: branch, fastestmirror, langpacks</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   Available Packages</span></span><br><span class="line"><span class="comment"># Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-[VERSION]</span></span><br></pre></td></tr></table></figure><h5 id="安装校验"><a href="#安装校验" class="headerlink" title="安装校验"></a>安装校验</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@izuf6gp8l1zfgu3hmvia6gz ~]<span class="comment"># docker version</span></span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.5</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.12.12</span><br><span class="line"> Git commit:        633a0ea</span><br><span class="line"> Built:             Wed Nov 13 07:25:41 2019</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.5</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.12.12</span><br><span class="line">  Git commit:       633a0ea</span><br><span class="line">  Built:            Wed Nov 13 07:24:18 2019</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.2.10</span><br><span class="line">  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc8+dev</span><br><span class="line">  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure><p>至此docker安装完成。</p><p><a href="https://help.aliyun.com/document_detail/60742.html#title-8ov-nf9-t1l" target="_blank" rel="noopener">参考资料</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前在 Linux 操作系统上安装 Docker，对系统版本有以下要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CentOS：7&lt;/li&gt;
&lt;li&gt;Debian：7.7（Wheezy LTS）、8.0（Jessie LTS）、9（Stretch）&lt;/li&gt;
&lt;li&gt;Fedora：24、25&lt;/li&gt;
&lt;li&gt;Ubuntu：16.04（Xenial LTS）、14.04（Trusty LTS）、17.04（Zesty）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="docker" scheme="https://blog.ydstudio.net/tags/docker/"/>
    
      <category term="centos" scheme="https://blog.ydstudio.net/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装zookeeper</title>
    <link href="https://blog.ydstudio.net/post/d97b6c63.html"/>
    <id>https://blog.ydstudio.net/post/d97b6c63.html</id>
    <published>2019-12-07T22:15:07.000Z</published>
    <updated>2019-12-15T15:50:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>从<a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.5.6/" target="_blank" rel="noopener">zookeeper</a>下载，注意下载带-bin后缀的安装包，不然安装之后启动会出现以下的错误。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">错误: 找不到或无法加载主类org.apache.zookeeper.server.quorum.QuorumPeerMain</span><br></pre></td></tr></table></figure><p>解决方案<br>原来是因为从版本3.5.5开始，带有bin名称的包才是我们想要的下载可以直接使用的里面有编译后的二进制的包，而之前的普通的tar.gz的包里面是只是源码的包无法直接使用。</p><p>将下载后的安装包解压到 /usr/local/zookeeper 目录下，进行后续的安装配置。</p><h5 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h5><p>在conf目录下拷贝 zoo_sample.cfg 文件新建 zoo.cfg配置文件，修改或者新加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="comment"># The number of ticks that the initial </span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="comment"># The number of ticks that can pass between </span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just </span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line">dataDir=/usr/<span class="built_in">local</span>/zookeeper/data</span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line">clientPort=2181</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#tickTime: zookeeper中使用的基本时间单位, 毫秒值.</span></span><br><span class="line"><span class="comment">#dataDir: 数据目录. 可以是任意目录.</span></span><br><span class="line"><span class="comment">#dataLogDir: log目录, 同样可以是任意目录. 如果没有设置该参数, 将使用和#dataDir相同的设置.此目录可以不加</span></span><br><span class="line"><span class="comment">#clientPort: 监听client连接的端口号.</span></span><br></pre></td></tr></table></figure><h5 id="将zookeeper加入系统环境变量中"><a href="#将zookeeper加入系统环境变量中" class="headerlink" title="将zookeeper加入系统环境变量中"></a>将zookeeper加入系统环境变量中</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/sphinx/bin:/usr/<span class="built_in">local</span>/elasticsearch/bin:/usr/<span class="built_in">local</span>/mycat/bin:/usr/<span class="built_in">local</span>/zookeeper/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#让环境变量立马生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">Sam-Mac-2:~ Sam$ zkServer.sh start</span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">Sam-Mac-2:~ Sam$ zkServer.sh stop</span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/<span class="built_in">local</span>/zookeeper/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从&lt;a href=&quot;https://archive.apache.org/dist/zookeeper/zookeeper-3.5.6/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zookeeper&lt;/a&gt;下载，注意下载带-bin后缀的安装包，不然安装之后启动会出现以下的错误。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="zookeeper" scheme="https://blog.ydstudio.net/tags/zookeeper/"/>
    
      <category term="mac" scheme="https://blog.ydstudio.net/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.ydstudio.net/post/4a17b156.html"/>
    <id>https://blog.ydstudio.net/post/4a17b156.html</id>
    <published>2019-11-10T13:19:35.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>解决nested exception is java.lang.IllegalArgumentException Could not resolve placeholder alipay.appId in string value  $ {alipay.appId}</title>
    <link href="https://blog.ydstudio.net/post/cf36aee2.html"/>
    <id>https://blog.ydstudio.net/post/cf36aee2.html</id>
    <published>2019-09-18T23:52:05.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>开发的时候出现了这种错误 </p><p>nested exception is java .lang.IllegalArgumentException: Could not resolve placeholder ‘alipay.appId’ in string value<br> “${alipay.appId}”</p><a id="more"></a><p>大意是Spring不能处理第二个属性文件中的配置信息，因为Spring不允许定义多个PropertyPlaceholderConfigurer或context:property-placeholder。<br>Spring用反射扫描的发现机制，在探测到Spring容器中有一个org.springframework.beans.factory.config.PropertyPlaceholderConfigurer的<br>Bean就会停止对剩余PropertyPlaceholderConfigurer的扫描（Spring 3.1已经使用PropertySourcesPlaceholderConfigurer替代 PropertyPlaceholderConfigurer了）。<br>换句话说，即Spring容器仅允许最多定义一个PropertyPlaceholderConfigurer(或context:property-placeholder)，其余的会被Spring忽略掉（其实Spring如果提供一个警告就好了）。 </p><h4 id="问题的解决方案"><a href="#问题的解决方案" class="headerlink" title="问题的解决方案"></a>问题的解决方案</h4><ol><li><p>通配符解决、逗号分隔</p><ul><li>使用通配符让spring一次性读取多个属性文件到一个 PropertyPlaceholderConfigurer bean中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span>  <span class="attr">location</span>=<span class="string">"classpath:conf/*.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>或者使用 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/db.properties,conf/alipay.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>使用多个<a href="context:property-placeholder" target="_blank" rel="noopener">context:property-placeholder</a> 分开定义，注意要加上 <strong>ignore-unresolvable</strong>  属性<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/db.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:conf/alipay.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>在每个PropertySourcesPlaceholderConfigurer配置中添加  <property name="ignoreUnresolvablePlaceholders" value="true"/>  或者在每个context:property-placeholder中都加上ignore-unresolvable=”true”  因为在你使用@Value(“${xx}”)<br>或在xml中使用${xx}获取属性时，Spring会在第一个读取到的属性文件中去找，如果没有就直接抛出异常，而不会继续去第二个属性文件中找</li></ul><ol start="2"><li>一个PropertySourcesPlaceholderConfigurer中包含多个属性文件，和方案1原理相同<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.PropertySourcesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:db.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:alipay.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发的时候出现了这种错误 &lt;/p&gt;
&lt;p&gt;nested exception is java .lang.IllegalArgumentException: Could not resolve placeholder ‘alipay.appId’ in string value&lt;br&gt; “${alipay.appId}”&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.ydstudio.net/tags/java/"/>
    
      <category term="spring" scheme="https://blog.ydstudio.net/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Java获取一天的最大时间23:59:59和最小时间00:00:00</title>
    <link href="https://blog.ydstudio.net/post/1ef2d20f.html"/>
    <id>https://blog.ydstudio.net/post/1ef2d20f.html</id>
    <published>2019-09-04T23:49:24.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java获取一天的最大时间23:59:59和最小时间00:00:00</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加上毫秒数</span></span><br><span class="line">        SimpleDateFormat sDateFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss.SSS"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(sDateFormat.format(getAfterYearDateMaxTime(<span class="number">3</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 若干年之后的23:59:59</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getAfterYearDateMaxTime</span><span class="params">(<span class="keyword">int</span> year)</span></span>&#123;</span><br><span class="line">        Calendar calendarEnd = Calendar.getInstance();</span><br><span class="line">        calendarEnd.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">        calendarEnd.add(Calendar.YEAR,year);</span><br><span class="line">        calendarEnd.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">        calendarEnd.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">        calendarEnd.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MySQL数据库对于毫秒大于500的数据进行进位，所有就造成的MySQL中的时间多一秒,防止mysql自动加一秒,毫秒设为0</span></span><br><span class="line">        calendarEnd.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> calendarEnd.getTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当天的最大时间23:59:59</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDayMaxTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calendar calendarEnd = Calendar.getInstance();</span><br><span class="line">        calendarEnd.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">        calendarEnd.set(Calendar.HOUR_OF_DAY, <span class="number">23</span>);</span><br><span class="line">        calendarEnd.set(Calendar.MINUTE, <span class="number">59</span>);</span><br><span class="line">        calendarEnd.set(Calendar.SECOND, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// MySQL数据库对于毫秒大于500的数据进行进位，所有就造成的MySQL中的时间多一秒,防止mysql自动加一秒,毫秒设为0</span></span><br><span class="line">        calendarEnd.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> calendarEnd.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当天的最小时间00:00:00</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDayMinTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calendar calendarEnd = Calendar.getInstance();</span><br><span class="line">        calendarEnd.setTime(<span class="keyword">new</span> Date());</span><br><span class="line">        calendarEnd.set(Calendar.HOUR_OF_DAY, <span class="number">00</span>);</span><br><span class="line">        calendarEnd.set(Calendar.MINUTE, <span class="number">00</span>);</span><br><span class="line">        calendarEnd.set(Calendar.SECOND, <span class="number">00</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// MySQL数据库对于毫秒大于500的数据进行进位，所有就造成的MySQL中的时间多一秒,防止mysql自动加一秒,毫秒设为0</span></span><br><span class="line">        calendarEnd.set(Calendar.MILLISECOND, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> calendarEnd.getTime();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取3年后的23:59:59，毫秒数设置成0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span>-<span class="number">09</span>-<span class="number">04</span> <span class="number">23</span>:<span class="number">59</span>:<span class="number">59.000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java获取一天的最大时间23:59:59和最小时间00:00:00&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.ydstudio.net/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>IDEA下tomcat启动后 server乱码，Tomcat Catalina Log和Tomcat Localhost Log乱码问题的解决 </title>
    <link href="https://blog.ydstudio.net/post/35c3eddf.html"/>
    <id>https://blog.ydstudio.net/post/35c3eddf.html</id>
    <published>2019-06-03T23:48:03.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>不改的话，不影响使用，因为报错基本都是英文显示的。但是这几个中文字乱码的看着难受。</p><p>乱码的根本原因：</p><p>Windows系统的cmd是GBK编码的，所以IDEA的下方log输出的部分的编码也是GBK的，然而Tomcat 9.0 版本默认log输出是UTF-8编码的，采用了两种不同的编码方式就会导致乱码。</p><a id="more"></a><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="方法一-修改Tomcat-日志输出为GBK编码"><a href="#方法一-修改Tomcat-日志输出为GBK编码" class="headerlink" title="方法一 修改Tomcat 日志输出为GBK编码"></a>方法一 修改Tomcat 日志输出为GBK编码</h5><p>先打开tomcat的安装目录</p><p>编辑 conf 目录下的 logging.properties,把里面的UTF-8 通通改成 GBK,保存，重启Tomcat，即可生效。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"># Licensed to the Apache Software Foundation (ASF) under one or more</span><br><span class="line"># contributor license agreements.  See the NOTICE file distributed with</span><br><span class="line"># this work for additional information regarding copyright ownership.</span><br><span class="line"># The ASF licenses this file to You under the Apache License, Version 2.0</span><br><span class="line"># (the "License"); you may not use this file except in compliance with</span><br><span class="line"># the License.  You may obtain a copy of the License at</span><br><span class="line">#</span><br><span class="line">#     http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line">#</span><br><span class="line"># Unless required by applicable law or agreed to in writing, software</span><br><span class="line"># distributed under the License is distributed on an "AS IS" BASIS,</span><br><span class="line"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"># See the License for the specific language governing permissions and</span><br><span class="line"># limitations under the License.</span><br><span class="line"></span><br><span class="line">handlers = 1catalina.org.apache.juli.FileHandler, 2localhost.org.apache.juli.FileHandler, 3manager.org.apache.juli.FileHandler, 4host-manager.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler</span><br><span class="line"></span><br><span class="line">.handlers = 1catalina.org.apache.juli.FileHandler, java.util.logging.ConsoleHandler</span><br><span class="line"></span><br><span class="line">############################################################</span><br><span class="line"># Handler specific properties.</span><br><span class="line"># Describes specific configuration info for Handlers.</span><br><span class="line">############################################################</span><br><span class="line"></span><br><span class="line">1catalina.org.apache.juli.FileHandler.level = FINE</span><br><span class="line">1catalina.org.apache.juli.FileHandler.directory = $&#123;catalina.base&#125;/logs</span><br><span class="line">1catalina.org.apache.juli.FileHandler.prefix = catalina.</span><br><span class="line">1catalina.org.apache.juli.FileHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line">2localhost.org.apache.juli.FileHandler.level = FINE</span><br><span class="line">2localhost.org.apache.juli.FileHandler.directory = $&#123;catalina.base&#125;/logs</span><br><span class="line">2localhost.org.apache.juli.FileHandler.prefix = localhost.</span><br><span class="line">2localhost.org.apache.juli.FileHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line">3manager.org.apache.juli.FileHandler.level = FINE</span><br><span class="line">3manager.org.apache.juli.FileHandler.directory = $&#123;catalina.base&#125;/logs</span><br><span class="line">3manager.org.apache.juli.FileHandler.prefix = manager.</span><br><span class="line">3manager.org.apache.juli.FileHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line">4host-manager.org.apache.juli.FileHandler.level = FINE</span><br><span class="line">4host-manager.org.apache.juli.FileHandler.directory = $&#123;catalina.base&#125;/logs</span><br><span class="line">4host-manager.org.apache.juli.FileHandler.prefix = host-manager.</span><br><span class="line">4host-manager.org.apache.juli.FileHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line">java.util.logging.ConsoleHandler.level = FINE</span><br><span class="line">java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter</span><br><span class="line">java.util.logging.ConsoleHandler.encoding = UTF-8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################################################</span><br><span class="line"># Facility specific properties.</span><br><span class="line"># Provides extra control for each logger.</span><br><span class="line">############################################################</span><br><span class="line"></span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].level = INFO</span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].handlers = 2localhost.org.apache.juli.FileHandler</span><br><span class="line"></span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].level = INFO</span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/manager].handlers = 3manager.org.apache.juli.FileHandler</span><br><span class="line"></span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].level = INFO</span><br><span class="line">org.apache.catalina.core.ContainerBase.[Catalina].[localhost].[/host-manager].handlers = 4host-manager.org.apache.juli.FileHandler</span><br><span class="line"></span><br><span class="line"># For example, set the org.apache.catalina.util.LifecycleBase logger to log</span><br><span class="line"># each component that extends LifecycleBase changing state:</span><br><span class="line">#org.apache.catalina.util.LifecycleBase.level = FINE</span><br><span class="line"></span><br><span class="line"># To see debug messages in TldLocationsCache, uncomment the following line:</span><br><span class="line">#org.apache.jasper.compiler.TldLocationsCache.level = FINE</span><br><span class="line"></span><br><span class="line">java.util.logging.ConsoleHandler.encoding = UTF-8</span><br></pre></td></tr></table></figure><h5 id="方法二-修改IDEA为UTF-8编码"><a href="#方法二-修改IDEA为UTF-8编码" class="headerlink" title="方法二 修改IDEA为UTF-8编码"></a>方法二 修改IDEA为UTF-8编码</h5><p>idea.exe.vmoptions、idea64.exe.vmoptions</p><p>修改idea.exe.vmoptions和idea64.exe.vmoptions这两个文件</p><p>分别在这两个文件的最后，添加一行 -Dfile.encoding=UTF-8</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-Xms128m</span><br><span class="line">-Xmx750m</span><br><span class="line">-XX:ReservedCodeCacheSize=<span class="number">240</span>m</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB=<span class="number">50</span></span><br><span class="line">-ea</span><br><span class="line">-Dsun.io.useCanonCaches=<span class="keyword">false</span></span><br><span class="line">-Djava.net.preferIPv4Stack=<span class="keyword">true</span></span><br><span class="line">-Djdk.http.auth.tunneling.disabledSchemes=<span class="string">""</span></span><br><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br><span class="line"></span><br><span class="line">-Dfile.encoding=UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure><p>这个参数的作用是强制系统文件使用UTF-8编码,改完之后保存，重启IDEA即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;不改的话，不影响使用，因为报错基本都是英文显示的。但是这几个中文字乱码的看着难受。&lt;/p&gt;
&lt;p&gt;乱码的根本原因：&lt;/p&gt;
&lt;p&gt;Windows系统的cmd是GBK编码的，所以IDEA的下方log输出的部分的编码也是GBK的，然而Tomcat 9.0 版本默认log输出是UTF-8编码的，采用了两种不同的编码方式就会导致乱码。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="tomcat" scheme="https://blog.ydstudio.net/tags/tomcat/"/>
    
      <category term="idea" scheme="https://blog.ydstudio.net/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript如何面向对象</title>
    <link href="https://blog.ydstudio.net/post/d7445999.html"/>
    <id>https://blog.ydstudio.net/post/d7445999.html</id>
    <published>2019-05-23T23:47:08.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于JavaScript编写类的方式，总结一下JavaScript编写类的几种写法以及这几种写法的优缺点。</p><a id="more"></a><h4 id="构造函数方式"><a href="#构造函数方式" class="headerlink" title="构造函数方式"></a>构造函数方式</h4><p>基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> 类名(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.属性名;<span class="comment">//公共属性</span></span><br><span class="line">     <span class="keyword">var</span> 属性名;<span class="comment">//私有属性</span></span><br><span class="line">    <span class="comment">/*凡是定义类的公共属性和公共方法都要使用this*/</span></span><br><span class="line">    <span class="comment">//定义类的公共函数</span></span><br><span class="line">    <span class="keyword">this</span>.函数名=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ..... </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义类的私有函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*定义一个Person类*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">_name,_age,_salary</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//Person类的公开属性，类的公开属性的定义方式是：”this.属性名“</span></span><br><span class="line">        <span class="keyword">this</span>.name=_name;</span><br><span class="line">        <span class="comment">//Person类的私有属性，类的私有属性的定义方式是：”var 属性名“</span></span><br><span class="line">        <span class="keyword">var</span> age=_age;<span class="comment">//私有属性</span></span><br><span class="line">        <span class="keyword">var</span> salary=_salary;<span class="comment">//私有属性</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*定义私有属性Age的对外公开访问方法*/</span></span><br><span class="line">        <span class="keyword">this</span>.setAge = <span class="function"><span class="keyword">function</span>(<span class="params">intAge</span>) </span>&#123;</span><br><span class="line">            age = intAge;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*定义私有属性Age的对外公开访问方法*/</span></span><br><span class="line">        <span class="keyword">this</span>.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义Person类的公开方法(特权方法)，类的公开方法的定义方式是：”this.functionName=function()&#123;.....&#125;“</span></span><br><span class="line">        <span class="keyword">this</span>.Show=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"在公开方法里面访问类的私有属性是允许的，age="</span>+age+<span class="string">"\t"</span>+<span class="string">"salary="</span>+salary);<span class="comment">//在公开方法里面访问类的私有属性是允许的</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//公共方法</span></span><br><span class="line">        <span class="keyword">this</span>.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"在公开方法里面访问类的私有方法是允许的"</span>);</span><br><span class="line">            privateFn();<span class="comment">//在公开方法里面调用类的私有方法</span></span><br><span class="line">            privateFn2();<span class="comment">//在公开方法里面调用类的私有方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义Person类的私有方法(内部方法)，</span></span><br><span class="line"><span class="comment">        类的私有方法的定义方式是：”function functionName()&#123;.....&#125;“，</span></span><br><span class="line"><span class="comment">        或者 var functionName=function()&#123;....&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">privateFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有函数privateFn"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> privateFn2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有函数privateFn2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试Person类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"孤傲苍狼"</span>,<span class="number">24</span>,<span class="number">2300</span>);</span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"白虎神皇"</span>,<span class="number">24</span>,<span class="number">2300</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1 instanceof Person的结果是："</span>+(p1 <span class="keyword">instanceof</span> Person));<span class="comment">//p1是Person类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2 instanceof Person的结果是："</span>+(p2 <span class="keyword">instanceof</span> Person));<span class="comment">//p2是Person类的实例，结果是true</span></span><br><span class="line">    <span class="comment">//当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"比较p1和p2这两个对象的show方法的内存地址是否一样：p1.show== p2.show的结果是："</span>+(p1.show == p2.show));<span class="comment">//false</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.show == p2.show的结果是："</span>+(p1.show == p2.show)+<span class="string">"，这证明p1对象和p2对象不是共享一个show方法，在内存中show方法的代码有2份，存放在两块内存区域"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"name是Person类定义的public属性，可以使用类的对象去直接访问类的public属性"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.name="</span>+p1.name);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"age和salary是Person类定义的private属性，不能使用类的对象去直接访问类私有属性，这是访问不了的，结果都是undefined"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.age="</span>+p1.age+<span class="string">"，"</span>+<span class="string">"p1.salary="</span>+p1.salary)<span class="comment">//不能使用类的对象去直接访问类私有属性，这是访问不了的，结果都是undefined</span></span><br><span class="line">    p1.show();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    p1.publicMethod();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    p1.setAge(<span class="number">24</span>);<span class="comment">//使用public方法setAge方法为私有属性age赋值</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"使用public方法getAge方法获取私有属性age的值，p1.getAge()="</span>+p1.getAge());<span class="comment">//使用getAge方法获取私有属性age的值</span></span><br><span class="line">    <span class="comment">//document.writeln("p1.privateFn()："+p1.privateFn()+"&amp;nbsp;p1.privateFn2()："+p1.privateFn2());//不能使用类的对象去调用类的私有方法，这里会报错”对象不支持此属性或者方法</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br></pre></td></tr></table></figure><p>这种方式的优点是：可以根据参数来构造不同的对象实例 ，每个对象的属性一般是不相同的，缺点是构造每个实例对象时，方法不能共享，Person类里面定义的那些方法，p1对象有一份，p2也有一份，那么在内存中就得开辟两块内存空间来分别存储p1的方法和p2的方法，这样就造成了内存的浪费。对于一个类的不同实例对象，这些对象的属性一般是不相同的，但是方法是相同的，所以节约内存的做法就是把方法放到内存的一块区域中存放，然后每个实例对象都从这块内存中取出方法。</p><h4 id="原型方式"><a href="#原型方式" class="headerlink" title="原型方式"></a>原型方式</h4><p>需要说明的是，使用原型方式编写JavaScript类是无法给类添加私有属性和私有方法的，使用原型方式添加的属性和方法都是public的。</p><ul><li><p>写法一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*定义一个Person类*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">_name,_age,_weight,_height</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.init(_name,_age,_weight,_height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*使用原型的方式定义Person类的public属性：name,age,weight,height，使用原型的方式添加的属性都是public的*/</span></span><br><span class="line">    Person.prototype.name;</span><br><span class="line">    Person.prototype.age;</span><br><span class="line">    Person.prototype.weight;</span><br><span class="line">    Person.prototype.height;</span><br><span class="line">    <span class="comment">/*使用原型的方式给Person类添加public方法，使用原型的方式添加的方法都是public的*/</span></span><br><span class="line">    <span class="comment">/*使用原型的方式给Person类添加init方法*/</span></span><br><span class="line">    Person.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params">_name,_age,_weight,_height</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_name != <span class="literal">undefined</span> &amp;&amp; _age!=<span class="literal">undefined</span> &amp;&amp; _weight!=<span class="literal">undefined</span> &amp;&amp; _height!=<span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = _name;</span><br><span class="line">            <span class="keyword">this</span>.age = _age;</span><br><span class="line">            <span class="keyword">this</span>.weight=_weight;</span><br><span class="line">            <span class="keyword">this</span>.height=_height;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"this.name="</span>+<span class="keyword">this</span>.name+<span class="string">",this.age="</span>+<span class="keyword">this</span>.age+<span class="string">",this.weight="</span>+<span class="keyword">this</span>.weight+<span class="string">",this.height="</span>+<span class="keyword">this</span>.height);</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*使用原型的方式给Person类添加show方法*/</span></span><br><span class="line">    Person.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.writeln(<span class="string">"show method"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">    <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"孤傲苍狼"</span>,<span class="number">24</span>,<span class="number">115</span>,<span class="number">160</span>);</span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"白虎神皇"</span>,<span class="number">25</span>,<span class="number">120</span>,<span class="number">170</span>);</span><br><span class="line">    <span class="keyword">var</span> p3 = <span class="keyword">new</span> Person();</span><br><span class="line">    p3.init(<span class="string">"玄天邪帝"</span>,<span class="number">26</span>,<span class="number">130</span>,<span class="number">180</span>);<span class="comment">//调用public方法init初始化p3对象</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1 instanceof Person的结果是："</span>+(p1 <span class="keyword">instanceof</span> Person));<span class="comment">//p1是Person类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2 instanceof Person的结果是："</span>+(p2 <span class="keyword">instanceof</span> Person));<span class="comment">//p2是Person类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p3 instanceof Person的结果是："</span>+(p3 <span class="keyword">instanceof</span> Person));<span class="comment">//p3是Person类的实例，结果是true</span></span><br><span class="line">    <span class="comment">//当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"比较p1和p2这两个对象的show方法的内存地址是否一样：p1.show == p2.show的结果是："</span>+(p1.show == p2.show));<span class="comment">//true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.show == p2.show的结果是："</span>+(p1.show == p2.show)+<span class="string">"，这证明p1对象和p2对象共享一个show方法，在内存中show方法的代码只有一份，存放在内存的一块区域"</span>);<span class="comment">//true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.name="</span>+p1.name+<span class="string">"，p1.age="</span>+p1.age+<span class="string">"，p1.weight="</span>+p1.weight+<span class="string">"，p1.height="</span>+p1.height);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2.name="</span>+p2.name+<span class="string">"，p2.age="</span>+p2.age+<span class="string">"，p2.weight="</span>+p2.weight+<span class="string">"，p2.height="</span>+p2.height);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    p3.name=<span class="string">"灭世魔尊"</span>;<span class="comment">//为公共属性重新赋值</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p3.name="</span>+p3.name);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    p1.show();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br></pre></td></tr></table></figure></li><li><p>写法二<br>使用原型方式给类定义public属性和public方法更加优雅的写法，我个人推荐使用这种方式，这种方式看起来比较舒服</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义类Person2*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*使用原型方式给类定义public属性和public方法更加优雅的写法*/</span></span><br><span class="line">    Person2.prototype = &#123;</span><br><span class="line">        name:<span class="string">""</span>,<span class="comment">//public属性</span></span><br><span class="line">        age:<span class="number">0</span>,<span class="comment">//public属性</span></span><br><span class="line">        weight:<span class="number">0</span>,<span class="comment">//public属性</span></span><br><span class="line">        height:<span class="number">0</span>,<span class="comment">//public属性</span></span><br><span class="line">        <span class="comment">/*public方法*/</span></span><br><span class="line">        init:<span class="function"><span class="keyword">function</span>(<span class="params">_name,_age,_weight,_height</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = _name;</span><br><span class="line">            <span class="keyword">this</span>.age = _age;</span><br><span class="line">            <span class="keyword">this</span>.weight=_weight;</span><br><span class="line">            <span class="keyword">this</span>.height=_height;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"this.name="</span>+<span class="keyword">this</span>.name+<span class="string">",this.age="</span>+<span class="keyword">this</span>.age+<span class="string">",this.weight="</span>+<span class="keyword">this</span>.weight+<span class="string">",this.height="</span>+<span class="keyword">this</span>.height);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/*public方法*/</span></span><br><span class="line">        show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"show method"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">    <span class="keyword">var</span> p2_1 = <span class="keyword">new</span> Person2();</span><br><span class="line">    <span class="keyword">var</span> p2_2 = <span class="keyword">new</span> Person2();</span><br><span class="line">    p2_1.init(<span class="string">"孤傲苍狼"</span>,<span class="number">24</span>,<span class="number">115</span>,<span class="number">160</span>);</span><br><span class="line">    p2_2.init(<span class="string">"白虎神皇"</span>,<span class="number">25</span>,<span class="number">120</span>,<span class="number">170</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_1.name="</span>+p2_1.name+<span class="string">"，p2_1.age="</span>+p2_1.age+<span class="string">"，p2_1.weight="</span>+p2_1.weight+<span class="string">"，p2_1.height="</span>+p2_1.height);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_2.name="</span>+p2_2.name+<span class="string">"，p2_2.age="</span>+p2_2.age+<span class="string">"，p2_2.weight="</span>+p2_2.weight+<span class="string">"，p2_2.height="</span>+p2_2.height);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_1 instanceof Person2的结果是："</span>+(p2_1 <span class="keyword">instanceof</span> Person2));<span class="comment">//p2_1是Person2类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_2 instanceof Person2的结果是："</span>+(p2_2 <span class="keyword">instanceof</span> Person2));<span class="comment">//p2_2是Person2类的实例，结果是true</span></span><br><span class="line">    <span class="comment">//当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"比较p2_1和p2_2这两个对象的init方法的内存地址是否一样：p2_1.init == p2_2.init的结果是："</span>+(p2_1.init == p2_2.init));<span class="comment">//true</span></span><br><span class="line">    p2_1.name=<span class="string">"灭世魔尊"</span>;<span class="comment">//为公共属性重新赋值</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2_1.name="</span>+p2_1.name);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    p2_1.show();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br></pre></td></tr></table></figure><h4 id="构造函数-原型"><a href="#构造函数-原型" class="headerlink" title="构造函数+原型"></a>构造函数+原型</h4><p>　构造函数方式和原型方式都有各自的优缺点，因此可以把这两种方式合并起来，用构造函数方式来定义类的属性(public属性，private属性)，用原型方式来定义类的方法(public方法)。互补不足，这就有了第三种写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义一个Person类*/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">_name,_age,_salary</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//在Person类内部定义类的public属性和private属性以及private方法</span></span><br><span class="line">        <span class="comment">//Person类的公开属性，类的公开属性的定义方式是：”this.属性名“</span></span><br><span class="line">        <span class="keyword">this</span>.name=_name;</span><br><span class="line">        <span class="comment">//Person类的私有属性，类的私有属性的定义方式是：”var 属性名“</span></span><br><span class="line">        <span class="keyword">var</span> age=_age;<span class="comment">//私有属性，只能在类内部使用</span></span><br><span class="line">        <span class="keyword">var</span> salary=_salary;<span class="comment">//私有属性，只能在类内部使用</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义Person类的私有方法(内部方法)，只能在类内部使用</span></span><br><span class="line"><span class="comment">        类的私有方法的定义方式是：”function functionName()&#123;.....&#125;“，</span></span><br><span class="line"><span class="comment">        或者 var functionName=function()&#123;....&#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">privateFn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有属性age，只能在Person类内部使用，初始化后age="</span>+age);</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有函数privateFn，只能在Person类内部使用"</span>);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> privateFn2=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有属性salary，只能在Person类内部使用，初始化后salary="</span>+salary);</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"我是Person类的私有函数privateFn2，只能在Person类内部使用"</span>);</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        privateFn();<span class="comment">//在Person类内部调用私有方法</span></span><br><span class="line">        privateFn2();<span class="comment">//在Person类内部调用私有方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用prototype原型方式定义的方法(public方法)是无法访问类的私有属性和私有方法的</span></span><br><span class="line">    <span class="comment">//使用prototype原型方式定义Person类的方public方法</span></span><br><span class="line">    Person.prototype=&#123;</span><br><span class="line">        setName:<span class="function"><span class="keyword">function</span>(<span class="params">_name</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = _name;</span><br><span class="line">            <span class="comment">//privateFn();//不能调用Person类定义的私有方法privateFn()，会报错：缺少对象</span></span><br><span class="line">        &#125;,</span><br><span class="line">        getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">        &#125;,</span><br><span class="line">        show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"公开方法show"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//公共方法</span></span><br><span class="line">        publicMethod:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.writeln(<span class="string">"公开方法publicMethod"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"孤傲苍狼"</span>,<span class="number">24</span>,<span class="number">2300</span>);</span><br><span class="line">    <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"白虎神皇"</span>,<span class="number">25</span>,<span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;pre&gt;"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1 instanceof Person的结果是："</span>+(p1 <span class="keyword">instanceof</span> Person));<span class="comment">//p1是Person类的实例，结果是true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p2 instanceof Person的结果是："</span>+(p2 <span class="keyword">instanceof</span> Person));<span class="comment">//p2是Person类的实例，结果是true</span></span><br><span class="line">    <span class="comment">//当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"当==两边的内容是对象或者是对象的函数属性时，则比较内存地址是否相等"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"比较p1和p2这两个对象的show方法的内存地址是否一样：p1.show== p2.show的结果是："</span>+(p1.show == p2.show));<span class="comment">//true</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.show == p2.show的结果是："</span>+(p1.show == p2.show)+<span class="string">"，这证明p1对象和p2对象共享一个show方法，在内存中show方法的代码有1份，存放在1块内存区域"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"name是Person类定义的public属性，可以使用类的对象去直接访问类的public属性"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.name="</span>+p1.name);<span class="comment">//访问公有属性，这是可以正常访问的</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"age和salary是Person类定义的private属性，不能使用类的对象去直接访问类私有属性，这是访问不了的，结果都是undefined"</span>);</span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.age="</span>+p1.age+<span class="string">"，"</span>+<span class="string">"p1.salary="</span>+p1.salary)<span class="comment">//不能使用类的对象去直接访问类私有属性，这是访问不了的，结果都是undefined</span></span><br><span class="line">    p1.show();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    p1.publicMethod();<span class="comment">//调用类的公共函数，这次允许的</span></span><br><span class="line">    p1.setName(<span class="string">"玄天邪帝"</span>);<span class="comment">//调用类的公共函数设置为name属性重新赋值</span></span><br><span class="line">    <span class="built_in">document</span>.writeln(<span class="string">"p1.getName="</span>+p1.getName());</span><br><span class="line">    <span class="comment">//document.writeln("p1.privateFn()："+p1.privateFn()+"&amp;nbsp;p1.privateFn2()："+p1.privateFn2());//不能使用类的对象去调用类的私有方法，这里会报错”对象不支持此属性或者方法</span></span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"&lt;/pre&gt;"</span>);</span><br></pre></td></tr></table></figure><p>第三种方式通过前两种方式的结合，算是达到了一个比较理想的写法了，可以通过传参构造对象实例，对象实例都共享同一份方法不造成内存浪费。第三种方式在开发中用得最多，我本人也是采用这种方式来编写JavaScript类。</p><p><a href="https://www.cnblogs.com/xdp-gacl/p/3700840.html" target="_blank" rel="noopener">查看原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于JavaScript编写类的方式，总结一下JavaScript编写类的几种写法以及这几种写法的优缺点。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="JavaScript" scheme="https://blog.ydstudio.net/tags/JavaScript/"/>
    
      <category term="oop" scheme="https://blog.ydstudio.net/tags/oop/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo消费者consumer捕捉服务提供者provider抛出的自定义异常</title>
    <link href="https://blog.ydstudio.net/post/2e0453a7.html"/>
    <id>https://blog.ydstudio.net/post/2e0453a7.html</id>
    <published>2019-05-20T23:44:33.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在自己的业务系统中，通常会用到自定义的业务异常类，这个异常会继承extends RuntimeException，当发生业务限制的时候，会throw出来。但是在使用dubbo进行soa治理的时候，会发现provider抛出的异常，在custom端并不能正确的捕获。即便我们在provider和custom都有导入相同framework.jar下面的BusinessException异常，并且抛出这个异常，在Consumer端只会打印一行异常信息，获取不到正常的异常。百度才知道Dubbo对抛出得异常用一个ExceptionFilter的类进行拦截。</p><a id="more"></a><p>在一个公共包里定义一个异常类，继承自RuntimeException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常code</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(String code, String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message, cause);</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessException</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务提供者的Dubbo配置文件中添加下面的内容，主要就是自定义exceptionFilter，然后排出dubbo自带的exceptionFilter</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">     http://code.alibabatech.com/schema/dubbo</span></span></span><br><span class="line"><span class="tag"><span class="string"> http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- http://dubbo.apache.org/schema/dubbo/dubbo.xsd 上面配置为这个一直报错，改为 http://code.alibabatech.com/schema/dubbo/dubbo.xsd --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用于配置当前应用信息，不管该应用是提供者还是消费者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:application</span>  <span class="attr">name</span>=<span class="string">"dubbo-web-provide"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于配置连接注册中心相关信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://localhost:2181"</span> <span class="attr">timeout</span>=<span class="string">"30000"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置redis连接参数 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--具体参数配置见com.alibaba.dubbo.registry.redis.RedisRegistry.class --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"max.idle"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"min.idle"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"max.active"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"max.total"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dubbo:registry</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">最重要的就是下面的配置：自定义exceptionFilter，然后排出dubbo自带的exceptionFilter</span></span><br><span class="line"><span class="comment">payload 设置传输的最大值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">filter</span>=<span class="string">"dubboExceptionFilter,-exception"</span> <span class="attr">payload</span>=<span class="string">"123886080"</span> &gt;</span><span class="tag">&lt;/<span class="name">dubbo:provider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> <span class="attr">accesslog</span>=<span class="string">"true"</span> <span class="attr">serialization</span>=<span class="string">"hessian2"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实现类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"cn.ydstudio.dubbo.web.provide.serviceimpl.HelloServiceImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"goodsService"</span> <span class="attr">class</span>=<span class="string">"cn.ydstudio.dubbo.web.provide.serviceimpl.GoodsServiceImpl"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"goodsService2"</span> <span class="attr">class</span>=<span class="string">"cn.ydstudio.dubbo.web.provide.serviceimpl.GoodsServiceImpl2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"goodsOrderServiceRemoteImpl"</span> <span class="attr">class</span>=<span class="string">"cn.ydstudio.dubbo.web.provide.serviceimpl.GoodsOrderServiceRemoteImpl"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义暴露服务的接口，用于暴露一个服务，定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--每个接口都应定义版本号，为后续不兼容升级提供可能 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--ref：服务的真正实现类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"cn.ydstudio.dubbo.rpc.service.HelloService"</span> <span class="attr">ref</span>=<span class="string">"helloService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> <span class="attr">retries</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"cn.ydstudio.dubbo.rpc.service.GoodsService"</span> <span class="attr">ref</span>=<span class="string">"goodsService"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> <span class="attr">retries</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"cn.ydstudio.dubbo.rpc.service.GoodsService"</span> <span class="attr">ref</span>=<span class="string">"goodsService2"</span> <span class="attr">version</span>=<span class="string">"2.0.0"</span> <span class="attr">retries</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"cn.ydstudio.dubbo.rpc.service.GoodsOrderServiceRemote"</span> <span class="attr">ref</span>=<span class="string">"goodsOrderServiceRemoteImpl"</span> <span class="attr">version</span>=<span class="string">"1.0.0"</span> <span class="attr">retries</span>=<span class="string">"0"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"querGoodsOrderList"</span> <span class="attr">timeout</span>=<span class="string">"1000000"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dubbo:service</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--监控中心配置 监控中心协议，如果为protocol="registry"，表示从注册中心发现监控中心地址，否则直连监控中心。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dubbo:monitor protocol="registry"&gt;&lt;/dubbo:monitor&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 直连监控中心服务器地址 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;dubbo:monitor address="localhost:6379"&gt;&lt;/dubbo:monitor&gt; --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最重要的继承ExceptionFilter，然后重写invoke方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.ydstudio.dubbo.web.provide.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.ydstudio.common.tools.exception.BizException;</span><br><span class="line"><span class="keyword">import</span> cn.ydstudio.common.tools.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.logger.Logger;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.logger.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.ReflectUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.common.utils.StringUtils;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.filter.ExceptionFilter;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.dubbo.rpc.service.GenericService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 功能描述:&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> 刘洋【19037900】</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2019/4/30 18:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboExceptionFilter</span> <span class="keyword">extends</span> <span class="title">ExceptionFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboExceptionFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(LoggerFactory.getLogger(com.alibaba.dubbo.rpc.filter.ExceptionFilter<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboExceptionFilter</span><span class="params">(Logger logger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Result result = invoker.invoke(invocation);</span><br><span class="line">            <span class="keyword">if</span> (result.hasException() &amp;&amp; GenericService<span class="class">.<span class="keyword">class</span> !</span>= invoker.getInterface()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Throwable exception = result.getException();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 自定义的异常</span></span><br><span class="line">                    <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> BizException || exception <span class="keyword">instanceof</span> BusinessException)&#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!(exception <span class="keyword">instanceof</span> RuntimeException) &amp;&amp; exception <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());</span><br><span class="line">                            Class&lt;?&gt;[] exceptionClassses = method.getExceptionTypes();</span><br><span class="line">                            Class[] arr$ = exceptionClassses;</span><br><span class="line">                            <span class="keyword">int</span> len$ = exceptionClassses.length;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> i$ = <span class="number">0</span>; i$ &lt; len$; ++i$) &#123;</span><br><span class="line">                                Class&lt;?&gt; exceptionClass = arr$[i$];</span><br><span class="line">                                <span class="keyword">if</span> (exception.getClass().equals(exceptionClass)) &#123;</span><br><span class="line">                                    <span class="keyword">return</span> result;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (NoSuchMethodException var11) &#123;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">this</span>.logger.error(<span class="string">"Got unchecked and undeclared exception which called by "</span> + RpcContext.getContext().getRemoteHost() + <span class="string">". service: "</span> + invoker.getInterface().getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", exception: "</span> + exception.getClass().getName() + <span class="string">": "</span> + exception.getMessage(), exception);</span><br><span class="line">                        String serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());</span><br><span class="line">                        String exceptionFile = ReflectUtils.getCodeBase(exception.getClass());</span><br><span class="line">                        <span class="keyword">if</span> (serviceFile != <span class="keyword">null</span> &amp;&amp; exceptionFile != <span class="keyword">null</span> &amp;&amp; !serviceFile.equals(exceptionFile)) &#123;</span><br><span class="line"></span><br><span class="line">                            String className = exception.getClass().getName();</span><br><span class="line">                            <span class="keyword">if</span> (!className.startsWith(<span class="string">"java."</span>) &amp;&amp; !className.startsWith(<span class="string">"javax."</span>)) &#123;</span><br><span class="line">                                <span class="keyword">return</span> (Result) (exception <span class="keyword">instanceof</span> RpcException ? result : <span class="keyword">new</span> RpcResult(<span class="keyword">new</span> RuntimeException(StringUtils.toString(exception))));</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">return</span> result;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var12) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.logger.warn(<span class="string">"Fail to ExceptionFilter when called by "</span> + RpcContext.getContext().getRemoteHost() + <span class="string">". service: "</span> + invoker.getInterface().getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", exception: "</span> + var12.getClass().getName() + <span class="string">": "</span> + var12.getMessage(), var12);</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException var13) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.error(<span class="string">"Got unchecked and undeclared exception which called by "</span> + RpcContext.getContext().getRemoteHost() + <span class="string">". service: "</span> + invoker.getInterface().getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", exception: "</span> + var13.getClass().getName() + <span class="string">": "</span> + var13.getMessage(), var13);</span><br><span class="line">            <span class="keyword">throw</span> var13;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在provider可以直接抛出异常，在consumer可以直接捕捉到。consumer服务消费端可以新建一个全局异常处理的控制器，可以格式化后输出给前端。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在自己的业务系统中，通常会用到自定义的业务异常类，这个异常会继承extends RuntimeException，当发生业务限制的时候，会throw出来。但是在使用dubbo进行soa治理的时候，会发现provider抛出的异常，在custom端并不能正确的捕获。即便我们在provider和custom都有导入相同framework.jar下面的BusinessException异常，并且抛出这个异常，在Consumer端只会打印一行异常信息，获取不到正常的异常。百度才知道Dubbo对抛出得异常用一个ExceptionFilter的类进行拦截。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dubbo" scheme="https://blog.ydstudio.net/tags/dubbo/"/>
    
  </entry>
  
  <entry>
    <title>小试阿里巴巴EasyExcel导出Excel</title>
    <link href="https://blog.ydstudio.net/post/76eb7bfd.html"/>
    <id>https://blog.ydstudio.net/post/76eb7bfd.html</id>
    <published>2019-05-17T23:43:39.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="添加easyexcel的maven依赖"><a href="#添加easyexcel的maven依赖" class="headerlink" title="添加easyexcel的maven依赖"></a>添加easyexcel的maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="导出的模型需要继承BaseRowModel，然后可以在每个属性上设置所在的列和一些format"><a href="#导出的模型需要继承BaseRowModel，然后可以在每个属性上设置所在的列和一些format" class="headerlink" title="导出的模型需要继承BaseRowModel，然后可以在每个属性上设置所在的列和一些format"></a>导出的模型需要继承BaseRowModel，然后可以在每个属性上设置所在的列和一些format</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsOrderExportDto</span> <span class="keyword">extends</span> <span class="title">BaseRowModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"订单序号"</span>,index = <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">private</span> Long orderId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"订单编号"</span>,index = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> String orderCode;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品序号"</span>,index = <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> Long goodsId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品名称"</span>,index = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String goodsTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品链接"</span>,index = <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">private</span> String goodsDetailsUrl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品图片"</span>,index = <span class="number">5</span>)</span><br><span class="line">    <span class="keyword">private</span> String goodsPhoto;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品数量"</span>,index = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> Long goodsNum;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"商品价格"</span>,index = <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">private</span> BigDecimal goodsAmt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"区域公司"</span>,index = <span class="number">8</span>)</span><br><span class="line">    <span class="keyword">private</span> Long areaComp;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"付款时间"</span>,index = <span class="number">12</span>,format = <span class="string">"yy-MM-dd hh:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date payTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最后在控制器输出"><a href="#最后在控制器输出" class="headerlink" title="最后在控制器输出"></a>最后在控制器输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"export"</span>,method = RequestMethod.GET)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportExcel</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">       List&lt;GoodsOrderDto&gt; orderDtoList = goodsOrderServiceRemote.querGoodsOrderList();</span><br><span class="line">       List&lt;GoodsOrderExportDto&gt; orderExportDtoList = Collections.emptyList();</span><br><span class="line">       <span class="keyword">if</span> (CollectionUtils.isNotEmpty(orderDtoList))&#123;</span><br><span class="line">           orderExportDtoList = <span class="keyword">new</span> ArrayList&lt;&gt;(orderDtoList.size());</span><br><span class="line">           <span class="keyword">for</span> (GoodsOrderDto goodsOrderDto : orderDtoList) &#123;</span><br><span class="line">               GoodsOrderExportDto goodsOrderExportDto = <span class="keyword">new</span> GoodsOrderExportDto();</span><br><span class="line">               BeanUtils.copyProperties(goodsOrderDto,goodsOrderExportDto);</span><br><span class="line"></span><br><span class="line">               orderExportDtoList.add(goodsOrderExportDto);</span><br><span class="line">           &#125;</span><br><span class="line">           orderDtoList.clear();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 设定输出文件头</span></span><br><span class="line">       response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment; filename="</span> + URLEncoder.encode(<span class="string">"订单导出.xls"</span>, <span class="string">"UTF-8"</span>));</span><br><span class="line">       <span class="comment">// 定义输出类型</span></span><br><span class="line">       response.setContentType(<span class="string">"application/msexcel"</span>);</span><br><span class="line"></span><br><span class="line">       OutputStream outputStream = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">       ExcelWriter excelWriter = <span class="keyword">new</span> ExcelWriter(outputStream, ExcelTypeEnum.XLS);</span><br><span class="line"></span><br><span class="line">       Sheet sheet = <span class="keyword">new</span> Sheet(<span class="number">1</span>, <span class="number">0</span>, GoodsOrderExportDto<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">       excelWriter.write(orderExportDtoList,sheet);</span><br><span class="line"></span><br><span class="line">       outputStream.flush();</span><br><span class="line">       excelWriter.finish();</span><br><span class="line">       outputStream.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;添加easyexcel的maven依赖&quot;&gt;&lt;a href=&quot;#添加easyexcel的maven依赖&quot; class=&quot;headerlink&quot; title=&quot;添加easyexcel的maven依赖&quot;&gt;&lt;/a&gt;添加easyexcel的maven依赖&lt;/h4&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;easyexcel&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.1.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="EasyExcel" scheme="https://blog.ydstudio.net/tags/EasyExcel/"/>
    
  </entry>
  
  <entry>
    <title>查看依赖第三方jar最低要求运行的jdk版本</title>
    <link href="https://blog.ydstudio.net/post/58af8f82.html"/>
    <id>https://blog.ydstudio.net/post/58af8f82.html</id>
    <published>2019-05-17T23:42:49.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在比较阿里巴巴的easyexcel和easypoi的excel导出功能哪个强大。两者的demo我都是写在同一个工程里面的，easyexcel的demo是先写的，使用起来方便简洁。然后开始写easypoi的demo时，首先出现了依赖下载不了，依赖能下载之后，还出现了下面的乱七八糟的问题：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Handler dispatch failed; nested exception is java.lang.NoClassDefFoundError: cn/afterturn/easypoi/excel/entity/ExportParams</span><br><span class="line"></span><br><span class="line">Unsupported major.minor version <span class="number">52.0</span></span><br></pre></td></tr></table></figure><p>刚开始我是以为easypoi的依赖包没有完整下下来，后来检查发现应该全部下载了。后来我想是不是依赖没有添加全，去easypoi的官方网站看，我的依赖使用应该是没有问题的，但是我还是把easypoi的版本从4.0.0降到了3.30，但是demo运行起来还是报错。后来我想到easyexcel也是依赖poi的，是不是他俩又版本依赖的冲突。于是我把easyexcel给注释了，于是我就成功了！<del>~</del>我嘞个去！！！！！<br>出现第一个错误就是因为easyexcel和easypoi的依赖有冲突。出现第二个错误是英文，使用的easypoi的版本过高，我使用的是easypoi4.0.0,他需要的jdk的版本是jdk8以上的。</p><h4 id="那如何查看第三方依赖最低要求运行的jdk版本呢？"><a href="#那如何查看第三方依赖最低要求运行的jdk版本呢？" class="headerlink" title="那如何查看第三方依赖最低要求运行的jdk版本呢？"></a>那如何查看第三方依赖最低要求运行的jdk版本呢？</h4><ul><li><p>在第三方jar包下会存在一个META-INF目录，该目录下有一个MANIFEST.MF文件，这个文件以键值对的形式存储一些关于jar包的关键信息。<br>下面我以easypoi-base的MANIFEST.MF文件做为示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Archiver-Version: Plexus Archiver</span><br><span class="line">Built-By: jueyue</span><br><span class="line">Created-By: Apache Maven <span class="number">3.1</span><span class="number">.1</span></span><br><span class="line">Build-Jdk: <span class="number">1.8</span><span class="number">.0_144</span></span><br></pre></td></tr></table></figure><p>可是一个.jar文件中，如果没有这个字段，就必须通过下面一种方法来查看</p></li><li><p>通过反编译.class文件来查看<br>解压.jar包，能得到.class文件。用JDK自带的javap反编译.class文件，用如下命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javap -verbose Configuration<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#查看得到的信息中，<span class="title">major</span> <span class="title">version</span>属性的内容，如下</span></span><br><span class="line">major version: 52</span><br></pre></td></tr></table></figure><p>说明这个.class文件是由JDK1.8编译得到的。 </p></li><li><p>Java 9 uses major version 53</p></li><li><p>J2SE 8.0 = 52(0x33 hex)</p></li><li><p>J2SE 7.0 = 51(0x32 hex) </p></li><li><p>J2SE 6.0 = 50 (0x32 hex)</p></li><li><p>J2SE 5.0 = 49 (0x31 hex)</p></li><li><p>JDK 1.4 = 48 (0x30 hex)</p></li><li><p>JDK 1.3 = 47 (0x2F hex)</p></li><li><p>JDK 1.2 = 46 (0x2E hex)</p></li><li><p>JDK 1.1 = 45 (0x2D hex)</p></li></ul><p>注意：一个.jar包中可能有多个.class文件，每个.class的JDK版本可能会不一样（编译器多个项目设置不同）</p><p>我电脑上安装的是jdk7。所以解决办法是删掉easyexcel的依赖，使用easypoi运行和自己jdk相同版本的就行了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在比较阿里巴巴的easyexcel和easypoi的excel导出功能哪个强大。两者的demo我都是写在同一个工程里面的，easyexcel的demo是先写的，使用起来方便简洁。然后开始写easypoi的demo时，首先出现了依赖下载不了，依赖能下载之后，还出现了下面的乱七八糟的问题：&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://blog.ydstudio.net/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo出现ExceedPayloadLimitException: Data length too large的错误</title>
    <link href="https://blog.ydstudio.net/post/45135675.html"/>
    <id>https://blog.ydstudio.net/post/45135675.html</id>
    <published>2019-05-14T23:41:47.000Z</published>
    <updated>2019-12-09T15:03:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用dubbo的时候，一次请求的数据量过大的时候，会出现下面的问题。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">com.alibaba.dubbo.remoting.transport.ExceedPayloadLimitException: Data length too large: <span class="number">12470880</span>, max payload: <span class="number">8388608</span>, channel: NettyChannel [channel=[id: <span class="number">0x78767b1e</span>, /<span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span>:<span class="number">54414</span> =&gt; /<span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span>:<span class="number">20880</span>]]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.AbstractCodec.checkPayload(AbstractCodec.java:<span class="number">44</span>) ~[dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encodeResponse(ExchangeCodec.java:<span class="number">288</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.exchange.codec.ExchangeCodec.encode(ExchangeCodec.java:<span class="number">73</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.rpc.protocol.dubbo.DubboCountCodec.encode(DubboCountCodec.java:<span class="number">38</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder.encode(NettyCodecAdapter.java:<span class="number">80</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at org.jboss.netty.handler.codec.oneone.OneToOneEncoder.handleDownstream(OneToOneEncoder.java:<span class="number">66</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:<span class="number">591</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendDownstream(DefaultChannelPipeline.java:<span class="number">776</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.SimpleChannelHandler.writeRequested(SimpleChannelHandler.java:<span class="number">304</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.netty.NettyHandler.writeRequested(NettyHandler.java:<span class="number">98</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at org.jboss.netty.channel.SimpleChannelHandler.handleDownstream(SimpleChannelHandler.java:<span class="number">266</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:<span class="number">591</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.DefaultChannelPipeline.sendDownstream(DefaultChannelPipeline.java:<span class="number">582</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.Channels.write(Channels.java:<span class="number">611</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.Channels.write(Channels.java:<span class="number">578</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at org.jboss.netty.channel.AbstractChannel.write(AbstractChannel.java:<span class="number">251</span>) [netty-<span class="number">3.2</span><span class="number">.5</span>.Final.jar:na]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.netty.NettyChannel.send(NettyChannel.java:<span class="number">100</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.AbstractPeer.send(AbstractPeer.java:<span class="number">53</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.exchange.support.header.HeaderExchangeHandler.received(HeaderExchangeHandler.java:<span class="number">173</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.DecodeHandler.received(DecodeHandler.java:<span class="number">51</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at com.alibaba.dubbo.remoting.transport.dispatcher.ChannelEventRunnable.run(ChannelEventRunnable.java:<span class="number">80</span>) [dubbo-<span class="number">2.6</span><span class="number">.2</span>.jar:<span class="number">2.6</span><span class="number">.2</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:<span class="number">1145</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:<span class="number">615</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line">at java.lang.Thread.run(Thread.java:<span class="number">745</span>) [na:<span class="number">1.7</span><span class="number">.0_80</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">2019</span>-<span class="number">05</span>-<span class="number">14</span> <span class="number">10</span>:<span class="number">27</span>:<span class="number">30.194</span>  WARN <span class="number">10424</span> --- [:<span class="number">20880</span>-thread-<span class="number">4</span>] c.a.d.r.exchange.codec.ExchangeCodec     :  [DUBBO] Data length too large: <span class="number">12470880</span>, max payload: <span class="number">8388608</span>, channel: NettyChannel [channel=[id: <span class="number">0x78767b1e</span>, /<span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span>:<span class="number">54414</span> =&gt; /<span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span>:<span class="number">20880</span>]], dubbo version: <span class="number">2.6</span><span class="number">.2</span>, current host: <span class="number">10.23</span><span class="number">.144</span><span class="number">.194</span></span><br></pre></td></tr></table></figure><p>当Dubbo服务提供者向消费者传输大数据容量的对象时，会受到Dubbo的限制，抛出上面的Data length too large异常<br>编辑dubbo.xml,添加payload配置，默认是8M，我给改成80M。这样做简单粗暴，其实不太符合Dubbo的设计理念。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">filter</span>=<span class="string">"dubboExceptionFilter,-exception"</span> <span class="attr">payload</span>=<span class="string">"83886080"</span> &gt;</span><span class="tag">&lt;/<span class="name">dubbo:provider</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用dubbo的时候，一次请求的数据量过大的时候，会出现下面的问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dubbo" scheme="https://blog.ydstudio.net/tags/dubbo/"/>
    
  </entry>
  
</feed>
