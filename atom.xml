<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>Sam的个人博客</title>
  
  <subtitle>一个程序员的成长记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ydstudios.gitee.io/"/>
  <updated>2021-02-04T15:19:51.000Z</updated>
  <id>https://ydstudios.gitee.io/</id>
  
  <author>
    <name>Sam</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解耦神器之观察者模式</title>
    <link href="https://ydstudios.gitee.io/post/5b3d1989.html"/>
    <id>https://ydstudios.gitee.io/post/5b3d1989.html</id>
    <published>2021-02-04T20:44:34.000Z</published>
    <updated>2021-02-04T15:19:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>大家是不是会经常听到有些程序员把“高内聚、低耦合”的词语挂在嘴边，但是什么是高内聚低耦合？为什么要高内聚、低耦合？怎么做才能高内聚、低耦合?</p><a id="more"></a><h6 id="参与角色"><a href="#参与角色" class="headerlink" title="参与角色"></a>参与角色</h6><h5 id="抽象主题-Subject"><a href="#抽象主题-Subject" class="headerlink" title="抽象主题(Subject)"></a>抽象主题(Subject)</h5><p>它把所有观察者对象的引用保存到一个容器里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象。</p><h5 id="具体主题-ConcreteSubject"><a href="#具体主题-ConcreteSubject" class="headerlink" title="具体主题(ConcreteSubject)"></a>具体主题(ConcreteSubject)</h5><p>将有关状态存入具体观察者对象；在具体主题内部状态改变时，给所有登记过的观察者发出通知。</p><h5 id="抽象抽象观察者-Observer"><a href="#抽象抽象观察者-Observer" class="headerlink" title="抽象抽象观察者(Observer)"></a>抽象抽象观察者(Observer)</h5><p>为所有的具体观察者定义一个接口，在得到主题通知时更新自己。</p><h5 id="具体观察者-ConcreteObserver"><a href="#具体观察者-ConcreteObserver" class="headerlink" title="具体观察者(ConcreteObserver)"></a>具体观察者(ConcreteObserver)</h5><p>实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题状态协调。</p><h6 id="Java原生实现"><a href="#Java原生实现" class="headerlink" title="Java原生实现"></a>Java原生实现</h6><p>Java从JDK1.0开始就自带了 <code>java.util.Observer</code> 和 <code>java.util.Observable</code> 相关接口、类来实现观察者模式，由此可见Java对于观察者模式的重视，也从另一方面说明观察者模式是多么重要。那么接下来我们开始用Java自带的来实现观察者模式的编码。</p><p>在这里我们以一个下单的场景来举例描述，用户创建完订单，要发送一个消息通知用户订单创建成功，还要发送一个消息给仓库，检查对应的订单商品。具体代码如下。</p><h4 id="1-继承java-util-Observable定义主题"><a href="#1-继承java-util-Observable定义主题" class="headerlink" title="1. 继承java.util.Observable定义主题"></a>1. 继承<code>java.util.Observable</code>定义主题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSubject</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单状态发生变化通知其他，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(String status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">        <span class="comment">// 通知其他</span></span><br><span class="line">        <span class="keyword">this</span>.setChanged();</span><br><span class="line">        <span class="comment">// 这里是可以携带一些额外的参数</span></span><br><span class="line">        <span class="keyword">this</span>.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-实现java-util-Observer接口定义观察者"><a href="#2-实现java-util-Observer接口定义观察者" class="headerlink" title="2. 实现java.util.Observer接口定义观察者"></a>2. 实现<code>java.util.Observer</code>接口定义观察者</h4><p><code>java.util.Observer</code> 是一个接口，接口中只有一个<code>update</code>方法。每当更改被观察对象时，都会调用此方法。 应用程序调用Observable对象的 <code>notifyObservers</code>方法，以将更改通知给所有对象的观察者。在这个例子中通知模块、仓库模块就是扮演观察者的角色，具体的代码实现如下：</p><ul><li>通知模块实现<code>java.util.Observer</code>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoticeObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        OrderSubject orderSubject = (OrderSubject) o;</span><br><span class="line">        log.info(<span class="string">"通知中心收到了订单的变化[&#123;&#125;],arg = [&#123;&#125;]"</span>, orderSubject.getStatus(),arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>仓库模块实现<code>java.util.Observer</code>接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WareHouseObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable observable, Object arg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        OrderSubject orderSubject = (OrderSubject) observable;</span><br><span class="line">        log.info(<span class="string">"仓库观察者收到了订单的变化[&#123;&#125;],arg = [&#123;&#125;]"</span>, orderSubject.getStatus(), arg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-代码编写完成，测试一把"><a href="#3-代码编写完成，测试一把" class="headerlink" title="3. 代码编写完成，测试一把"></a>3. 代码编写完成，测试一把</h4><p>具体测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        OrderSubject orderSubject = <span class="keyword">new</span> OrderSubject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知系统监听者</span></span><br><span class="line">        NoticeObserver noticeObserver = <span class="keyword">new</span> NoticeObserver();</span><br><span class="line">        orderSubject.addObserver(noticeObserver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 仓库监听者</span></span><br><span class="line">        WareHouseObserver wareHouseObserver = <span class="keyword">new</span> WareHouseObserver();</span><br><span class="line">        orderSubject.addObserver(wareHouseObserver);</span><br><span class="line">         <span class="comment">// 订单创建</span></span><br><span class="line">        orderSubject.setStatus(<span class="string">"订单创建啦"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 订单付款</span></span><br><span class="line">        orderSubject.setStatus(<span class="string">"订单付款啦"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>订单的状态发生了变化，对应的观察者就接受到了通知。JDK提供的实现很简单，但是缺陷也是很明显。</p><ul><li><p><code>Observable</code> 是一个类，不是一个接口，也不是一个抽象类，不继承该类无法使用权限类型为 protected 的<code>setChanged()</code>和 <code>clearChanged()</code>方法。</p></li><li><p>用<code>Vector&lt;Observer&gt;</code>保存观察者。<code>Vector</code>效率低下，JDK已经不建议使用了。</p></li><li><p>主题变化通知观察者的顺序无法自定义。通知的顺序是固定为按照设置观察者的时间倒叙通知，无法自定义。</p></li><li><p>整体代码执行是同步的，不能设置为异步。且观察者的执行出现异常，程序处理不到位会导致<strong>事务回滚</strong>。</p></li></ul><p>既然JDK中实现不够完美，我们就看看有没有其他的实现方式。Google的Guava工具包提供了EventBus可以实现、Spring框架中也提供了相应的支持，由于我们使用Spring框架比较多，今天我们就先来说说Spring框架中是如何实现对观察者模式的支持吧！</p><h6 id="Spring中的实现"><a href="#Spring中的实现" class="headerlink" title="Spring中的实现"></a>Spring中的实现</h6><p>Spring框架中提供了相当多的组件可以实现观察者模式，文章后面会一一向大家介绍。这里我引入一个新的业务场景，用户注册之后发送短信通知、积分还有优惠券。这种业务场景非常的常见，我展示一下小伙伴们一般是怎么样实现这样的功能的。因为篇幅有限，这里就展示一下伪代码吧！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> MemberDao memberDao;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> CouponService couponService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> SmsService smsService;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成用户注册，成功之后发送优惠券、短信通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memberName 查询条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 分页信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Result <span class="title">normalRegister</span><span class="params">(String memberName,String phone)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 1、 ... 执行注册逻辑</span></span><br><span class="line">        log.info(<span class="string">"[register][执行用户(&#123;&#125;) 的注册逻辑]"</span>, phone);</span><br><span class="line">        <span class="comment">// 保存用户</span></span><br><span class="line">        Long memberId = memberDao.saveMember();</span><br><span class="line">        <span class="comment">// 发送优惠券</span></span><br><span class="line">        couponService.sendCoupon(memberId);</span><br><span class="line">        <span class="comment">// 发送短信</span></span><br><span class="line">        smsService.sendSms(phone);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>大家对这部分代码怎么看？</strong></p><p>对于用户注册功能来说，保障用户成功注册，这是个业务的核心诉求，其他的都是锦上添花，所以这个地方不应该掺杂其他的业务。用户注册与发送短信、优惠券功能应该分隔开，这样也符合解耦的设计规则。不然后续业务增加需求，需要用户注册完成之后给用户发送积分，你是不是还要在这个 <code>normalRegister</code>方法中增加发送积分的逻辑，那这个岂不是又违背了开闭原则。</p><blockquote><p>一件事做容易，想做好不容易。写程序也是如此，能够把功能编码实现bug又少，其实是很耗费时间和精力的。我常跟同事们开玩笑说“写代码不要糊弄，该写的代码一定要写，不然你最后肯定会被代码糊弄”。</p></blockquote><p><strong>接下来我来介绍一下如何使用Spring的事件发布机制来实现业务解耦的</strong></p><p>由于后面的实现方法中用户注册事件类的代码都是类似的只是类名不同，那我就把用户注册事件类的代码写在前面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRegisterEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以自定义些自己需要的属性</span></span><br><span class="line"><span class="comment">     * 用户的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long memberId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String memberPhone;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserRegisterEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserRegisterEvent</span><span class="params">(Object source, Long memberId, String memberPhone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.memberId = memberId;</span><br><span class="line">        <span class="keyword">this</span>.memberPhone = memberPhone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="利用继承ApplicationEvent类、实现ApplicationListener接口或者-EventListener注解来实现"><a href="#利用继承ApplicationEvent类、实现ApplicationListener接口或者-EventListener注解来实现" class="headerlink" title="利用继承ApplicationEvent类、实现ApplicationListener接口或者  @EventListener注解来实现"></a>利用继承<code>ApplicationEvent</code>类、实现<code>ApplicationListener</code>接口或者  <code>@EventListener</code>注解来实现</h5><p><code>org.springframework.context.ApplicationListener</code>是Spring提供的一个泛型接口。由应用程序事件侦听器实现的接口,从Spring 3.0开始，<code>ApplicationListener</code>可以一般性地声明其感兴趣的事件类型。在Spring ApplicationContext中注册后，将相应地过滤事件，并且仅针对匹配事件对象调用侦听器。观察者可以实现<code>ApplicationListener</code>接口或者使用<code>@EventListener</code>注解，这个注解和<code>ApplicationListener</code>接口有着相同的功能，相比之下使用注解比使用接口更方便一点。</p><h4 id="短信Service实现ApplicationListener接口"><a href="#短信Service实现ApplicationListener接口" class="headerlink" title="短信Service实现ApplicationListener接口"></a>短信Service实现ApplicationListener接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSms</span><span class="params">(UserRegisterEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[EventListener][给用户(&#123;&#125;) 发送短信]"</span>, event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优惠券Service直接在addCoupon-方法上添加注解-EventListener"><a href="#优惠券Service直接在addCoupon-方法上添加注解-EventListener" class="headerlink" title="优惠券Service直接在addCoupon 方法上添加注解 @EventListener"></a>优惠券Service直接在<code>addCoupon</code> 方法上添加注解 <code>@EventListener</code></h4><p>注意<code>addCoupon</code> 方法的入参为 <code>UserRegisterEvent</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponService</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">UserRegisterEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(UserRegisterEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"[addCoupon][给用户(&#123;&#125;) 发放优惠劵]"</span>, event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>积分Service中的代码与上面的类似就不贴出来了</strong></p><h4 id="注册业务完成发布UserRegisterEvent事件"><a href="#注册业务完成发布UserRegisterEvent事件" class="headerlink" title="注册业务完成发布UserRegisterEvent事件"></a>注册业务完成发布<code>UserRegisterEvent</code>事件</h4><p>这个地方MemberService要实现<code>org.springframework.beans.factory.Aware.ApplicationEventPublisherAware</code>接口，才有能力使用 <code>ApplicationEventPublisher</code> 发布事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最简单的观察者实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 用户手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">register</span><span class="params">(String memberPhone)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、 ... 执行注册逻辑</span></span><br><span class="line">        log.info(<span class="string">"[register][执行用户(&#123;&#125;) 的注册逻辑]"</span>, memberPhone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、用户数据保存到数据库</span></span><br><span class="line">        Long memberId = <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、发布事件通知</span></span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> UserRegisterEvent(<span class="keyword">this</span>, memberId, memberPhone));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/spring-dao.xml"</span>, <span class="string">"classpath:spring/spring-service.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@RunWith</span>(value = SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ObserverTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberService memberService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.register(<span class="string">"13911111111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210204230758.png" alt="发送短信在发送优惠券之前"></p><p>代码执行成功，打印出了给用户发送短信、优惠券日志，功能完美实现。但是稍微有点问题，我想调换一下两者的顺序，先执行发送优惠券，再发送短信。这个要求还是蛮常见，那怎么实现呢？</p><h5 id="使用SmartApplicationListener或者GenericApplicationListener接口实现指定观察者自定义顺序执行"><a href="#使用SmartApplicationListener或者GenericApplicationListener接口实现指定观察者自定义顺序执行" class="headerlink" title="使用SmartApplicationListener或者GenericApplicationListener接口实现指定观察者自定义顺序执行"></a>使用<code>SmartApplicationListener</code>或者<code>GenericApplicationListener</code>接口实现指定观察者自定义顺序执行</h5><p><code>org.springframework.context.event.SmartApplicationListener</code>是Spring3.0版本提供的接口，<code>org.springframework.context.event.GenericApplicationListener</code>则是Spring4.2版本提供的接口，如果在你的项目中使用不了，那就是说明你项目中使用的Spring版本过低，这个问题自己自行处理。<br>在查<code>SmartApplicationListener</code>源码时发现有以下注释：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Extended variant of the standard &#123;<span class="meta">@link</span> ApplicationListener&#125; <span class="class"><span class="keyword">interface</span>,</span></span><br><span class="line"><span class="class"><span class="title">exposing</span> <span class="title">further</span> <span class="title">metadata</span> <span class="title">such</span> <span class="title">as</span> <span class="title">the</span> <span class="title">supported</span> <span class="title">event</span> <span class="title">type</span>.</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">p</span>&gt;<span class="title">Users</span> <span class="title">are</span> &lt;<span class="title">bold</span>&gt;<span class="title">strongly</span> <span class="title">advised</span>&lt;/<span class="title">bold</span>&gt; <span class="title">to</span> <span class="title">use</span> <span class="title">the</span> </span>&#123;<span class="meta">@link</span> GenericApplicationListener&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">instead</span> <span class="title">as</span> <span class="title">it</span> <span class="title">provides</span> <span class="title">an</span> <span class="title">improved</span> <span class="title">detection</span> <span class="title">of</span> <span class="title">generics</span>-<span class="title">based</span></span></span><br><span class="line"><span class="class"><span class="title">event</span> <span class="title">types</span>.</span></span><br></pre></td></tr></table></figure><p>翻译之后大概的意思就是，<strong>SmartApplicationListener是标准<code>ApplicationListener</code>接口的扩展变体，公开了进一步的元数据，例如受支持的事件类型。但强烈建议改用<code>GenericApplicationListener</code>接口，因为它提供了对基于泛型的事件类型的改进检测</strong>，那我此处就只以GenericApplicationListener为例了。</p><p>优惠券服务Service同样实现接口 <code>GenericApplicationListener</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondVersionCouponService</span> <span class="keyword">implements</span> <span class="title">GenericApplicationListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确定此侦听器是否实际上支持给定的事件类型。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eventType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsEventType</span><span class="params">(ResolvableType eventType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecondVersionUserRegisterEvent<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">eventType</span>.<span class="title">getRawClass</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 确定此侦听器是否实际上支持给定的源类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsSourceType</span><span class="params">(Class&lt;?&gt; sourceType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MemberService<span class="class">.<span class="keyword">class</span> </span>== sourceType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的业务逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        SecondVersionUserRegisterEvent userRegisterEvent = (SecondVersionUserRegisterEvent) event;</span><br><span class="line">        Long memberId = userRegisterEvent.getMemberId();</span><br><span class="line">        log.info(<span class="string">"[Second addCoupon][给用户(&#123;&#125;) 发放优惠劵]"</span>, memberId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设定执行的顺序，数字越小优先级越高就越先被执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>短信服务Service同样实现接口 <code>GenericApplicationListener</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondVersionSmsService</span> <span class="keyword">implements</span> <span class="title">GenericApplicationListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsEventType</span><span class="params">(ResolvableType eventType)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SecondVersionUserRegisterEvent<span class="class">.<span class="keyword">class</span> </span>== eventType.getRawClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsSourceType</span><span class="params">(Class&lt;?&gt; sourceType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MemberService<span class="class">.<span class="keyword">class</span> </span>== sourceType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        SecondVersionUserRegisterEvent userRegisterEvent = (SecondVersionUserRegisterEvent) event;</span><br><span class="line">        String memberPhone = userRegisterEvent.getMemberPhone();</span><br><span class="line">        log.info(<span class="string">"[Second onApplicationEvent][给用户(&#123;&#125;) 发送短信]"</span>, memberPhone);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实使用<code>org.springframework.context.ApplicationListener</code> + <code>org.springframework.core.annotation.Order</code>注解也可以实现控制观察者的执行顺序，而且更简洁！</p></blockquote><h4 id="注册业务完成发布UserRegisterEvent事件-1"><a href="#注册业务完成发布UserRegisterEvent事件-1" class="headerlink" title="注册业务完成发布UserRegisterEvent事件"></a>注册业务完成发布<code>UserRegisterEvent</code>事件</h4><p>这个地方MemberService要实现<code>org.springframework.beans.factory.Aware.ApplicationEventPublisherAware</code>接口，才有能力使用 <code>ApplicationEventPublisher</code> 发布事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最简单的观察者实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 用户手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Result</span> <span class="title">register</span>(<span class="title">String</span> <span class="title">phone</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 1、 ... 执行注册逻辑</span></span><br><span class="line">        log.info(<span class="string">"[Second register][执行用户(&#123;&#125;) 的注册逻辑]"</span>, phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、 保存用户到数据库（假设这个是）</span></span><br><span class="line">        BizLocalMessageEntity entity = <span class="keyword">new</span> BizLocalMessageEntity();</span><br><span class="line">        ThreadLocalRandom random = ThreadLocalRandom.current();</span><br><span class="line">        entity.setBizModule((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        entity.setBizNo(<span class="string">""</span> + random.nextInt(<span class="number">100000</span>));</span><br><span class="line">        entity.setBizType((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        entity.setSendStatus((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">        entity.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        entity.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> affectRow = bizLocalMessageMapper.insert(entity);</span><br><span class="line">        Long memberId = entity.getId();</span><br><span class="line">        log.info(<span class="string">"插入的affectRow= [&#123;&#125;],主键[&#123;&#125;]"</span>, affectRow, memberId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、发布事件通知</span></span><br><span class="line">        applicationEventPublisher.publishEvent(<span class="keyword">new</span> SecondVersionUserRegisterEvent(<span class="keyword">this</span>, memberId, phone));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/spring-dao.xml"</span>, <span class="string">"classpath:spring/spring-service.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@RunWith</span>(value = SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ObserverTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemberService memberService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberService.register(<span class="string">"13911111111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h4><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210204230024.png" alt="运行截图"></p><p>修改两个Service中order的数值可以轻松两个观察者的执行顺序，完美的解决了自定义观察者执行顺序的要求。细心的小伙伴会发现，假设在用户注册的方法中存在事务，观察者的执行出现异常，会导致整个事务回滚，明明用户的数据已经保存到数据库，现在却没有了！还是前面那句话，在这个业务场景，用户注册成功是核心诉求，发送短信、优惠券重要性都是比不上的。那要解决这种情况，就需要用户注册成功的事务提交之后，再发布注册成功事件，避免观察者执行结果的影响。</p><p><strong>短信服务Service有有异常抛出导致事务回滚</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">       SecondVersionUserRegisterEvent userRegisterEvent = (SecondVersionUserRegisterEvent) event;</span><br><span class="line">       String memberPhone = userRegisterEvent.getMemberPhone();</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isNotBlank(memberPhone)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"测试事件中发生异常对原有业务的影响,短信发送失败！！！！"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       log.info(<span class="string">"[Second onApplicationEvent][给用户(&#123;&#125;) 发送短信]"</span>, memberPhone);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210204225825.png" alt="短信观察者执行发生异常"></p><p>可能有的小伙伴想，观察者执行异常导致事务回滚，本质上来说这种方式实现的观察者模式，其实还是在一个线程中同步执行的。那我就在观察者中捕获所有的异常或者用户注册成功之后异步发布事件。</p><ul><li><strong>捕获所有异常</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            SecondVersionUserRegisterEvent userRegisterEvent = (SecondVersionUserRegisterEvent) event;</span><br><span class="line">            Long memberId = userRegisterEvent.getMemberId();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (memberId != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"测试事件中发生异常对原有业务的影响,短信发送失败！！！！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"[Second addCoupon][给用户(&#123;&#125;) 发放优惠劵]"</span>, memberId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"发放优惠劵发生异常"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>异步发布事件</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 3、异步发布事件通知,这样的有可能事务还没有提交，则异步线程读取不到数据库中的数据</span></span><br><span class="line">CompletableFuture&lt;Void&gt; voidCompletableFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">    applicationEventPublisher.publishEvent(<span class="keyword">new</span> UserRegisterEvent(<span class="keyword">this</span>, memberId, phone));</span><br><span class="line">&#125;);</span><br><span class="line">voidCompletableFuture.exceptionally(exception -&gt; &#123;</span><br><span class="line">    log.error(<span class="string">"发生了异常"</span>, exception);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第一种方式可以解决事务回滚的问题，但是呢感觉会有点low！</p><p>第二种方式假如观察者中查询会员的信息，可能出现查不到，因为可能事务还没有提交。</p><h5 id="使用-TransactionalEventListener-实现事务提交之后才执行观察者"><a href="#使用-TransactionalEventListener-实现事务提交之后才执行观察者" class="headerlink" title="使用 @TransactionalEventListener 实现事务提交之后才执行观察者"></a>使用 <code>@TransactionalEventListener</code> 实现事务提交之后才执行观察者</h5><p>使用起来很简单，直接在对应的观察者方法上添加该注解即可。<code>@TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreeCouponService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span>(phase = TransactionPhase.AFTER_COMMIT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCoupon</span><span class="params">(ThreeUserRegisterEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"测试事件中发生异常对原有业务的影响"</span>);</span><br><span class="line">        Long memberId = event.getMemberId();</span><br><span class="line">        <span class="keyword">if</span> (memberId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"测试事件中发生异常对原有业务的影响,优惠券发送失败！！！！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">" Version=3 [addCoupon][给用户(&#123;&#125;) 发放优惠劵]"</span>, memberId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意一定要在 <code>register()</code> 方法上添加 <code>@Transactional</code> 注解</strong>，不然 <code>register()</code> 方法中有抛出异常之后，会有下面的错误提示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">信息: Closing org.springframework.context.support.GenericApplicationContext<span class="meta">@a</span>67c67e: </span><br><span class="line">startup date [Thu Feb <span class="number">04</span> <span class="number">18</span>:<span class="number">06</span>:<span class="number">53</span> CST <span class="number">2021</span>]; root of context hierarchy</span><br></pre></td></tr></table></figure><p><strong>@Transactional一定要加上</strong>不然方法体内有一次抛出会有上的错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Result</span> <span class="title">register</span>(<span class="title">String</span> <span class="title">phone</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1、 ... 执行注册逻辑</span></span><br><span class="line">    log.info(<span class="string">"[Second register][执行用户(&#123;&#125;) 的注册逻辑]"</span>, phone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、 保存用户(假设这是)</span></span><br><span class="line">    <span class="keyword">int</span> affectRow = bizLocalMessageMapper.insert(entity);</span><br><span class="line">    Long memberId = entity.getId();</span><br><span class="line">    log.info(<span class="string">"插入的affectRow= [&#123;&#125;],主键[&#123;&#125;]"</span>, affectRow, memberId);</span><br><span class="line">    <span class="keyword">if</span> (memberId != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"故意抛出异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    applicationEventPublisher.publishEvent(<span class="keyword">new</span> ThreeUserRegisterEvent(<span class="keyword">this</span>, memberId, phone));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，实现 <code>register()</code> 事务提交之后，再发布事件还有两种方式：</p><ul><li>使用事务模板TransactionTemplate</li></ul><ol><li>使用之前需要在配置文件中配置事务模板</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置 transactionTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.transaction.support.TransactionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在代码中使用事务模板提交事务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">register</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、 ... 执行注册逻辑</span></span><br><span class="line">        log.info(<span class="string">"[线程name=&#123;&#125;,register][执行用户(&#123;&#125;) 的注册逻辑]"</span>, Thread.currentThread().getName(), phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、 保存用户(假设这是)</span></span><br><span class="line">        Long memberId = transactionTemplate.execute(status -&gt; &#123;</span><br><span class="line">            Long result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BizLocalMessageEntity entity = <span class="keyword">new</span> BizLocalMessageEntity();</span><br><span class="line">                ThreadLocalRandom random = ThreadLocalRandom.current();</span><br><span class="line">                entity.setBizModule((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">                entity.setBizNo(<span class="string">""</span> + random.nextInt(<span class="number">200000</span>));</span><br><span class="line">                entity.setBizType((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">                entity.setMsg(<span class="string">"消息内容"</span>);</span><br><span class="line">                entity.setMsgDesc(<span class="string">"消息备注"</span>);</span><br><span class="line">                entity.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">                entity.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> affectRow = bizLocalMessageMapper.insert(entity);</span><br><span class="line">                result = entity.getId();</span><br><span class="line">                log.info(<span class="string">"Version5 插入的affectRow= [&#123;&#125;],主键[&#123;&#125;]"</span>, affectRow, result);</span><br><span class="line">                <span class="keyword">if</span> (affectRow &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//throw new RuntimeException("测试主要业务失败，事件是否会发布执行");</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"业务失败发生异常"</span>, e);</span><br><span class="line">                <span class="comment">// 标记事务回滚</span></span><br><span class="line">                status.setRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"事务执行情况 用户的id= [&#123;&#125;]"</span>, memberId);</span><br><span class="line">        <span class="keyword">if</span> (memberId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 3、异步发布事件通知</span></span><br><span class="line">            log.info(<span class="string">"发布注册成功事件"</span>);</span><br><span class="line">            applicationEventPublisher.publishEvent(<span class="keyword">new</span> UserRegisterEvent(<span class="keyword">this</span>, memberId, phone));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>使用TransactionSynchronizationManager</li></ul><p>这个可以直接使用无需配置，重写TransactionSynchronizationAdapter的afterCommit()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Result</span> <span class="title">register</span>(<span class="title">String</span> <span class="title">phone</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1、 ... 执行注册逻辑</span></span><br><span class="line">    log.info(<span class="string">"[Version4 register][执行用户(&#123;&#125;) 的注册逻辑]"</span>, phone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、 保存用户(假设这是)</span></span><br><span class="line">    BizLocalMessageEntity entity = <span class="keyword">new</span> BizLocalMessageEntity();</span><br><span class="line">    ThreadLocalRandom random = ThreadLocalRandom.current();</span><br><span class="line">    entity.setBizModule((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">    entity.setBizNo(<span class="string">""</span> + random.nextInt(<span class="number">100000</span>));</span><br><span class="line">    entity.setBizType((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">    entity.setMsg(<span class="string">""</span>);</span><br><span class="line">    entity.setMsgDesc(<span class="string">""</span>);</span><br><span class="line">    entity.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    entity.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    Long memberId = entity.getId();</span><br><span class="line">    <span class="keyword">int</span> affectRow = bizLocalMessageMapper.insert(entity);</span><br><span class="line">    log.info(<span class="string">"Version4 插入的affectRow= [&#123;&#125;],主键[&#123;&#125;]"</span>, affectRow, memberId);</span><br><span class="line">    <span class="keyword">if</span> (affectRow &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//throw new RuntimeException("Version4 测试主要业务失败，事件是否会发布执行");</span></span><br><span class="line">    &#125;</span><br><span class="line">    TransactionSynchronizationManager.registerSynchronization(<span class="keyword">new</span> TransactionSynchronizationAdapter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCommit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.afterCommit();</span><br><span class="line">            <span class="comment">// 3、事务提交之后发布事件通知</span></span><br><span class="line">            applicationEventPublisher.publishEvent(<span class="keyword">new</span> UserRegisterEvent(<span class="keyword">this</span>, memberId, phone));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把目前的代码执行一下看看情况怎么样</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210204214744.png" style="zoom:50%;" alt="执行日志截图"/><p>从截图上看，我们目前已经通过好几种方式解决了观察者执行异常导致事务回滚的问题，但是也可以从截图中看出用户注册逻辑和对应的观察者都是在main线程中执行的，那我们可以让观察者异步执行吗？这样也可以加快代码的执行速度。这个问题当然也是可以解决的，接下来我们来解决这个问题：</p><ul><li>直接使用@Async注解</li></ul><p><strong>需要注意的是</strong>，使用这个注解一定要自定义线程池，不是它默认使用的是 <code>org.springframework.core.task.SimpleAsyncTaskExecutor</code> 。但这个 SimpleAsyncTaskExecutor 不是真的线程池，这个类不重用线程，每次调用都会创建一个新的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SixCouponService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Order</span>(<span class="number">20</span>)</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCoupon</span><span class="params">(SixUserRegisterEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"测试事件中发生异常对原有业务的影响"</span>, <span class="string">""</span>);</span><br><span class="line">        Long memberId = event.getMemberId();</span><br><span class="line">        log.info(<span class="string">"线程name=&#123;&#125;,[addCoupon][给用户(&#123;&#125;) 发放优惠劵]"</span>, Thread.currentThread().getName(), memberId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>启动异步线程来发布事件</li></ul><p>意思就是事务提交之后，判断事务提交成功则新建一个线程然后发布注册成功事件。事务提交成功可以前面提到的事务模板transactionTemplate和事务管理器TransactionSynchronizationManager。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">register</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1、 ... 执行注册逻辑</span></span><br><span class="line">        log.info(<span class="string">"[线程name=&#123;&#125;,register][执行用户(&#123;&#125;) 的注册逻辑]"</span>, Thread.currentThread().getName(), phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、 保存用户(假设这是)</span></span><br><span class="line">        Long memberId = transactionTemplate.execute(status -&gt; &#123;</span><br><span class="line">            Long result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                BizLocalMessageEntity entity = <span class="keyword">new</span> BizLocalMessageEntity();</span><br><span class="line">                ThreadLocalRandom random = ThreadLocalRandom.current();</span><br><span class="line">                entity.setBizModule((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">                entity.setBizNo(<span class="string">""</span> + random.nextInt(<span class="number">200000</span>));</span><br><span class="line">                entity.setBizType((<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">                entity.setMsg(<span class="string">"消息内容"</span>);</span><br><span class="line">                entity.setMsgDesc(<span class="string">"消息备注"</span>);</span><br><span class="line">                entity.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">                entity.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> affectRow = bizLocalMessageMapper.insert(entity);</span><br><span class="line">                result = entity.getId();</span><br><span class="line">                log.info(<span class="string">"Version5 插入的affectRow= [&#123;&#125;],主键[&#123;&#125;]"</span>, affectRow, result);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"业务失败发生异常"</span>, e);</span><br><span class="line">                <span class="comment">// 标记事务回滚</span></span><br><span class="line">                status.setRollbackOnly();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"事务执行情况 用户的id= [&#123;&#125;]"</span>, memberId);</span><br><span class="line">        <span class="keyword">if</span> (memberId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 3、异步发布事件通知</span></span><br><span class="line">            log.info(<span class="string">"发布注册成功事件"</span>);</span><br><span class="line">            CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">                applicationEventPublisher.publishEvent(<span class="keyword">new</span> SixUserRegisterEvent(<span class="keyword">this</span>, memberId, phone));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码修改之后执行，运行截图如下：</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210204222111.png" alt="运行截图"><br>我们可以发现代码分别main、taskExecutor-1和taskExecutor-2 三个线程执行的，完美的解决了上面提到的问题。</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210204230251.png" alt="优化后的注册流程" style="zoom:50%;" /><p>使用观察者模式之后的用户注册流程：</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210204230429.png" alt="优化后的注册流程" style="zoom:50%;" />]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家是不是会经常听到有些程序员把“高内聚、低耦合”的词语挂在嘴边，但是什么是高内聚低耦合？为什么要高内聚、低耦合？怎么做才能高内聚、低耦合?&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="spring" scheme="https://ydstudios.gitee.io/tags/spring/"/>
    
      <category term="设计模式" scheme="https://ydstudios.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="https://ydstudios.gitee.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>船新版本的策略模式，你一定没有见过</title>
    <link href="https://ydstudios.gitee.io/post/cd1b2f51.html"/>
    <id>https://ydstudios.gitee.io/post/cd1b2f51.html</id>
    <published>2021-01-30T15:06:49.000Z</published>
    <updated>2021-01-30T08:57:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>我在之前的文章<a href="https://ydstudios.gitee.io/post/170b3d6a.html">设计模式学习之策略模式</a> 一文中介绍了策略模式的优点、缺点、实现方法和具体的使用场景。策略类有<code>策略类会增多,造成类膨胀</code>的缺点，这个缺点我还是比较在意的。因为在实际开发中发现，有时策略的实现没有多少代码，这样的定义成一个策略类反而真的有点浪费，确实造成了类膨胀。自从发现了这个问题，我一直在思考如何解决这种问题，经过思考解决问题的方法已经想出来了，但是一直没有去尝试做出来看看是否真的能解决策略模式 <code>类膨胀的问题</code>,终于在这周我忙里偷闲用代码实现了我的想法，我自认为利用 <code>Lambda表达式 + 反射 + 注解</code> 组合解决了<code>类膨胀的问题</code>，这种船新版本实现方案，容我细细道来！</p><a id="more"></a><blockquote><p>大扎好，我系渣渣辉，探挽懒月，介四里没有挽过的船新版本，挤需体验三番钟，里造会干我一样，爱象节款游戏。 —开心一哈 😄😄</p></blockquote><h5 id="代码结构图"><a href="#代码结构图" class="headerlink" title="代码结构图"></a>代码结构图</h5><p>这种实现方法，UML图没法展现其中关系，所以就不贴UML图了，直接上代码的结构图。</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210130154828.png" alt="船新版本策略模式" style="zoom:50%;" /><h5 id="主要思想"><a href="#主要思想" class="headerlink" title="主要思想"></a>主要思想</h5><ul><li>为何会出现类膨胀</li></ul><p>策略模式类膨胀的缺点，就是策略类太多的缘故。如果策略类的实现代码不是很多，是否可以将策略不在类的级别上实现？于是想到了利用Lambda表达式的匿名类来实现策略接口，这样不就把实现从类降级到了方法级别了么，哈哈😄😄！！</p><ul><li>如何将这些策略方法统一起来，方便外部调用<br>策略方法都在一个类中，这样首先要标注一下方法，哪个是策略方法，哪个是普通方法。这个问题我们用注解来实现，因为在Java 语言中的类、方法、变量、参数和包等都可以用注解来标注。</li></ul><p>我想把策略方法存放在Map中，用策略的名字作为Map的key，策略方法作为Map的value。我们在这里用反射来将Lambda实现的匿名类存放到Map中。</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><ol><li><p>定义一个策略注解 Strategy，用来标注策略方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Strategy 注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7.7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Strategy &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标识不同的模块 product、order模块</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">module</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体的策略类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>策略接口,这里的策略接口如果不是很复杂的话可以用jdk自带的<code>java.util.function.Function&lt;T, R&gt;</code>替代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; 策略的入参类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;R&gt; 策略的返回值类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7.7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStrategyHandler</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T param)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AbstractStrategy实现使用Spring提供的扩展点ApplicationContextAware，在系统启动的时候将对应策略方法的存放在Map中，同时对外提供执行入口 execute</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStrategy</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, IStrategyHandler&lt;T, R&gt;&gt; implMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String DELIMITER = <span class="string">"####"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得bean 的class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> &lt;K&gt; <span class="function">Class&lt;K&gt; <span class="title">getClazz</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回spring中的beanName</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> String <span class="title">getBeanName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strategy 策略类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> module   模块</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param    参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">execute</span><span class="params">(String strategy, String <span class="keyword">module</span>, T param)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String key = StringUtils.join(<span class="keyword">module</span>, DELIMITER, strategy);</span><br><span class="line">        IStrategyHandler&lt;T, R&gt; handler = implMap.get(key);</span><br><span class="line">        log.debug(<span class="string">"策略实现集合&#123;&#125;"</span>, implMap);</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"没有相应的策略实现"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        R apply = handler.apply(param);</span><br><span class="line">        <span class="keyword">return</span> apply;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        log.error(<span class="string">"AbstractStrategy 执行"</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;Object&gt; clazz = getClazz();</span><br><span class="line">        Object bean = applicationContext.getBean(getBeanName(), clazz);</span><br><span class="line">        <span class="keyword">if</span> (bean == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Strategy strategyAnnotation = bean.getClass().getAnnotation(Strategy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (strategyAnnotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">"类[&#123;&#125;]没有添加Strategy注解"</span>, clazz);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 模块的名称</span></span><br><span class="line">        String <span class="keyword">module</span> = strategyAnnotation.<span class="keyword">module</span>();</span><br><span class="line">        Method[] declaredMethods = clazz.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ArrayUtils.isEmpty(declaredMethods)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(clazz + <span class="string">"没有相关策略方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            Strategy annotation = declaredMethod.getAnnotation(Strategy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 用module和 四个 #### 加上 value 组成map的key</span></span><br><span class="line">                String key = StringUtils.join(<span class="keyword">module</span>, DELIMITER, annotation.value());</span><br><span class="line">                IStrategyHandler&lt;T, R&gt; handler = (IStrategyHandler&lt;T, R&gt;) declaredMethod.invoke(bean);</span><br><span class="line">                implMap.put(key, handler);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">                log.error(<span class="string">"模块[&#123;&#125;]策略处理发生了错误"</span>, <span class="keyword">module</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>订单、产品模块有这种策略模式场景</p></li></ol><p>订单模块的策略模式场景,IStrategyHandler的策略方法都在OrderStrategyImpl中实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Strategy</span>(<span class="keyword">module</span> = <span class="string">"Order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStrategyImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BizLocalMessageService bizLocalMessageService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Strategy</span>(value = <span class="string">"strategy1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IStrategyHandler&lt;BInDto, BOutDto&gt; <span class="title">strategy1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bInDto -&gt; &#123;</span><br><span class="line">            log.error(<span class="string">"订单模块相关策略 strategy1 executeStart"</span>);</span><br><span class="line">            String join = StringUtils.join(<span class="string">"strategy1:"</span>, bInDto.getParam1(), bInDto.getParam2());</span><br><span class="line">            BOutDto bOutDto = <span class="keyword">new</span> BOutDto();</span><br><span class="line">            bOutDto.setOrderNo(join);</span><br><span class="line">            bOutDto.setPrice(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line">            SaveBizLocalMessageDto dto = <span class="keyword">new</span> SaveBizLocalMessageDto();</span><br><span class="line">            dto.setBizModule((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            ThreadLocalRandom localRandom = ThreadLocalRandom.current();</span><br><span class="line">            dto.setBizNo(localRandom.nextInt(<span class="number">16000</span>,<span class="number">115000</span>)+<span class="string">""</span>);</span><br><span class="line">            dto.setBizType((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            dto.setMsg(<span class="string">""</span>);</span><br><span class="line">            dto.setMsgDesc(<span class="string">""</span>);</span><br><span class="line">            dto.setHandledCount((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            dto.setMaxHandleCount((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            bizLocalMessageService.saveBizLocalMessage(dto);</span><br><span class="line">            log.error(<span class="string">"订单模块相关策略 strategy1 executeEnd"</span>);</span><br><span class="line">            <span class="keyword">return</span> bOutDto;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Strategy</span>(value = <span class="string">"strategy2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IStrategyHandler&lt;BInDto, BOutDto&gt; <span class="title">strategy2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> param -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            log.error(<span class="string">"订单模块相关策略 strategy2 executeStart"</span>);</span><br><span class="line"></span><br><span class="line">            String join = StringUtils.join(<span class="string">"strategy2:"</span>, param.getParam1(), param.getParam2());</span><br><span class="line">            BOutDto bOutDto = <span class="keyword">new</span> BOutDto();</span><br><span class="line">            bOutDto.setOrderNo(join);</span><br><span class="line">            bOutDto.setPrice(<span class="number">11121</span>);</span><br><span class="line"></span><br><span class="line">            SaveBizLocalMessageDto dto = <span class="keyword">new</span> SaveBizLocalMessageDto();</span><br><span class="line">            dto.setBizModule((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            ThreadLocalRandom localRandom = ThreadLocalRandom.current();</span><br><span class="line">            dto.setBizNo(localRandom.nextInt(<span class="number">6000</span>,<span class="number">15000</span>)+<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">            dto.setBizType((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            dto.setMsg(<span class="string">""</span>);</span><br><span class="line">            dto.setMsgDesc(<span class="string">""</span>);</span><br><span class="line">            dto.setHandledCount((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            dto.setMaxHandleCount((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            bizLocalMessageService.saveBizLocalMessage(dto);</span><br><span class="line">            log.error(<span class="string">"订单模块相关策略 strategy2 executeEnd"</span>);</span><br><span class="line">            <span class="keyword">return</span> bOutDto;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品模块的策略模式场景，IStrategyHandler的策略方法都在ProductStrategyImpl中实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Strategy</span>(<span class="keyword">module</span> = <span class="string">"Product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductStrategyImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BizLocalMessageService bizLocalMessageService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Strategy</span>(value = <span class="string">"strategyA"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IStrategyHandler&lt;BInDto, BOutDto&gt; <span class="title">strategy1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bInDto -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            log.error(<span class="string">"产品模块相关策略 strategy1 executeStart"</span>);</span><br><span class="line"></span><br><span class="line">            String join = StringUtils.join(<span class="string">"strategyA:"</span>, bInDto.getParam1(), bInDto.getParam2());</span><br><span class="line">            BOutDto bOutDto = <span class="keyword">new</span> BOutDto();</span><br><span class="line">            bOutDto.setOrderNo(join);</span><br><span class="line">            bOutDto.setPrice(<span class="number">111</span>);</span><br><span class="line"></span><br><span class="line">            SaveBizLocalMessageDto dto = <span class="keyword">new</span> SaveBizLocalMessageDto();</span><br><span class="line">            dto.setBizModule((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            ThreadLocalRandom localRandom = ThreadLocalRandom.current();</span><br><span class="line">            dto.setBizNo(localRandom.nextInt(<span class="number">1000</span>,<span class="number">5000</span>)+<span class="string">""</span>);</span><br><span class="line">            dto.setBizType((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            dto.setMsg(<span class="string">""</span>);</span><br><span class="line">            dto.setMsgDesc(<span class="string">""</span>);</span><br><span class="line">            dto.setHandledCount((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            dto.setMaxHandleCount((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            bizLocalMessageService.saveBizLocalMessage(dto);</span><br><span class="line"></span><br><span class="line">            log.error(<span class="string">"产品模块相关策略 strategy1 executeEnd"</span>);</span><br><span class="line">            <span class="keyword">return</span> bOutDto;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Strategy</span>(value = <span class="string">"strategyB"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IStrategyHandler&lt;BInDto, BOutDto&gt; <span class="title">strategy2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> param -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            log.error(<span class="string">"产品模块相关策略 strategy2 executeStart"</span>);</span><br><span class="line"></span><br><span class="line">            String join = StringUtils.join(<span class="string">"strategyB:"</span>, param.getParam1(), param.getParam2());</span><br><span class="line">            BOutDto bOutDto = <span class="keyword">new</span> BOutDto();</span><br><span class="line">            bOutDto.setOrderNo(join);</span><br><span class="line">            bOutDto.setPrice(<span class="number">11121</span>);</span><br><span class="line"></span><br><span class="line">            SaveBizLocalMessageDto dto = <span class="keyword">new</span> SaveBizLocalMessageDto();</span><br><span class="line">            dto.setBizModule((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            ThreadLocalRandom localRandom = ThreadLocalRandom.current();</span><br><span class="line">            dto.setBizNo(localRandom.nextInt(<span class="number">5000</span>,<span class="number">8000</span>)+<span class="string">""</span>);</span><br><span class="line">            dto.setBizType((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            dto.setMsg(<span class="string">""</span>);</span><br><span class="line">            dto.setMsgDesc(<span class="string">""</span>);</span><br><span class="line">            dto.setHandledCount((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">            dto.setMaxHandleCount((<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            bizLocalMessageService.saveBizLocalMessage(dto);</span><br><span class="line"></span><br><span class="line">            log.error(<span class="string">"产品模块相关策略 strategy2  executeEnd"</span>);</span><br><span class="line">            <span class="keyword">return</span> bOutDto;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>将存放策略方法的类和策略上下文关联起来</li></ol><p>订单模块相关</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStrategyContext</span> <span class="keyword">extends</span> <span class="title">AbstractStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Class&lt;OrderStrategyImpl&gt; <span class="title">getClazz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> OrderStrategyImpl<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getBeanName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"orderStrategyImpl"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品模块相关</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductStrategyContext</span> <span class="keyword">extends</span> <span class="title">AbstractStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Class&lt;ProductStrategyImpl&gt; <span class="title">getClazz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ProductStrategyImpl<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">String <span class="title">getBeanName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"productStrategyImpl"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>代码实现完毕，我们来测试一下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123;<span class="string">"classpath:spring/spring-dao.xml"</span>,<span class="string">"classpath:spring/spring-service.xml"</span>&#125;)</span><br><span class="line"><span class="meta">@RunWith</span>(value = SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">StrategyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AbstractStrategy&lt;BInDto, BOutDto&gt; orderStrategyContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AbstractStrategy&lt;BInDto, BOutDto&gt; productStrategyContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">productTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BInDto bInDto = <span class="keyword">new</span> BInDto();</span><br><span class="line">        bInDto.setParam1(<span class="string">"产品金额"</span>);</span><br><span class="line">        bInDto.setParam2(<span class="number">222</span>);</span><br><span class="line"></span><br><span class="line">        productStrategyContext.execute(<span class="string">"strategyA"</span>, <span class="string">"Product"</span>, bInDto);</span><br><span class="line">        productStrategyContext.execute(<span class="string">"strategyB"</span>, <span class="string">"Product"</span>, bInDto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">orderTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BInDto bInDto = <span class="keyword">new</span> BInDto();</span><br><span class="line">        bInDto.setParam1(<span class="string">"优惠券金额"</span>);</span><br><span class="line">        bInDto.setParam2(<span class="number">180</span>);</span><br><span class="line"></span><br><span class="line">        orderStrategyContext.execute(<span class="string">"strategy1"</span>, <span class="string">"Order"</span>, bInDto);</span><br><span class="line">        orderStrategyContext.execute(<span class="string">"strategy2"</span>, <span class="string">"Order"</span>, bInDto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产品模块的测试<br><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210130164441.png" alt="产品模块的测试" style="zoom:50%;" /></p><p>订单模块的测试</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210130164512.png" alt="订单模块的测试" style="zoom:50%;" /><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>策略接口不是很复杂的情况下 IStrategyHandler 接口可以复用，自己实现 StrategyContext 抽象类，然后再实现自己的策略方法就可以了，不知大家对于这种船新版本有什么看法！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我在之前的文章&lt;a href=&quot;https://ydstudios.gitee.io/post/170b3d6a.html&quot;&gt;设计模式学习之策略模式&lt;/a&gt; 一文中介绍了策略模式的优点、缺点、实现方法和具体的使用场景。策略类有&lt;code&gt;策略类会增多,造成类膨胀&lt;/code&gt;的缺点，这个缺点我还是比较在意的。因为在实际开发中发现，有时策略的实现没有多少代码，这样的定义成一个策略类反而真的有点浪费，确实造成了类膨胀。自从发现了这个问题，我一直在思考如何解决这种问题，经过思考解决问题的方法已经想出来了，但是一直没有去尝试做出来看看是否真的能解决策略模式 &lt;code&gt;类膨胀的问题&lt;/code&gt;,终于在这周我忙里偷闲用代码实现了我的想法，我自认为利用 &lt;code&gt;Lambda表达式 + 反射 + 注解&lt;/code&gt; 组合解决了&lt;code&gt;类膨胀的问题&lt;/code&gt;，这种船新版本实现方案，容我细细道来！&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="设计模式" scheme="https://ydstudios.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="https://ydstudios.gitee.io/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="反射" scheme="https://ydstudios.gitee.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="lambda表达式" scheme="https://ydstudios.gitee.io/tags/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="注解" scheme="https://ydstudios.gitee.io/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>UML类图</title>
    <link href="https://ydstudios.gitee.io/post/122fc4b2.html"/>
    <id>https://ydstudios.gitee.io/post/122fc4b2.html</id>
    <published>2021-01-23T14:17:36.000Z</published>
    <updated>2021-01-23T07:26:07.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h5><p>UML(Unified Modeling Language，统一建模语言)是一种为面向对象系统的产品进行说明、可视化和编制文档的一种标准语言，是非专利的第三代建模和规约语言。UML是面向对象设计的建模工具，独立于任何具体程序设计语言。</p><a id="more"></a><h5 id="UML和设计模式"><a href="#UML和设计模式" class="headerlink" title="UML和设计模式"></a>UML和设计模式</h5><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。<strong>个人觉得设计模式是前人大佬总结的一种思想，是一种脱离语言并且能够指导程序员更容易写出好的代码的编程习惯。</strong>对于一个没有太多经验的程序员，如何写出 <strong>简洁优雅，可复用性高，可扩展性强，高内聚低耦合</strong> 的代码至关重要。学习别人的设计模式就是为了在没有经验的情况下写出一手不错的代码，只看不写并不能深刻体验到设计模式的巧妙之处，而学会使用UML进行需求分析，是使用设计模式写好代码的前提。</p><h5 id="UML图分类"><a href="#UML图分类" class="headerlink" title="UML图分类"></a>UML图分类</h5><ul><li>用例图(Use Case Diagram)，描述系统功能；</li><li>类图(Class Diagram)，描述系统的静态结构；</li><li>对象图(Object Diagram)，描述系统在某个时刻的静态结构；</li><li>组件图(Component Diagram)，描述了实现系统的元素的组织；</li><li>配置图(Deployment Diagram)，描述了环境元素的配置，并把实现系统的元素映射到配置上；</li><li>状态图(State Diagram)，描述了系统元素的状态条件和响应；</li><li>时序图(Sequence Diagram)，按时间顺序描述系统元素间的交互；</li><li>协作图(Collaboration Diagram)，按照时间和空间顺序描述系统元素间的交互和它们之间的关系；</li><li>活动图(Activity Diagram)，描述了系统元素的活动；</li></ul><blockquote><p>其中类图是描述类与类之间的关系的，是UML图中最核心的。</p></blockquote><h5 id="UML作用"><a href="#UML作用" class="headerlink" title="UML作用"></a>UML作用</h5><ul><li><p>为软件系统建立可视化模型；</p></li><li><p>能够了解系统的结构和能力；</p></li><li><p>为软件系统建立构件；</p></li><li><p>为软件系统建立文档；</p></li></ul><blockquote><p>什么是模型？模型是对现实世界的形状或状态的抽象模拟和简化。<br>为什么要建模？最简单的理由：为了能够更好地理解正在开发的系统。</p></blockquote><h5 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h5><p>学习设计模式必定需要先读懂 UML 类图，下面就谈谈具体 UML 类图中的概念。类图是用于描述一组类、接口、协作以及它们之间的静态关系。在面向对象系统的建模中，类图是最为常用的图，它用来阐明系统的静态结构。事实上类是对一组具有相同属性、操作、关系和语义的对象的描述，其中对类的属性和操作进行描述时的一个最重要的细节就是它的可见性。</p><h6 id="类图的基本符号与含义"><a href="#类图的基本符号与含义" class="headerlink" title="类图的基本符号与含义"></a>类图的基本符号与含义</h6><p>1、 <strong>类(Class)</strong>：一般是用三层矩形框表示，第一层表示类的名称，第二层表示的是字段和属性，第三层则是类的方法。第一层中，如果是抽象类，需用斜体显示。</p><ul><li><p><strong>类的属性</strong>表达方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">权限 属性名：类型 [ = 默认值 ]</span><br></pre></td></tr></table></figure></li><li><p><strong>类的方法</strong>表达方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">权限  方法名称(参数列表) [ : 返回类型]</span><br></pre></td></tr></table></figure><blockquote><p>  注意：public 用    <code>+</code>  表示 ，protected 用   <code>#</code>  表示 ，private 用   <code>-</code>  表示 ，default 用   <code>~</code>  表示</p></blockquote></li></ul><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210123143148.png" alt="类图示"></p><p>2、<strong>接口(interface)</strong>：接口与类图类似，与类图的主要区别就是顶端有<code>&lt;&lt;interface&gt;&gt;</code>显示。</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210123143316.png" style="zoom:50%;"  alt="接口示例图"/><p>3、类之间的关系<br>类与类一共有如下6种关系：泛化（Generalization）、实现（Realization）、组合（Composition）、聚合（Aggregation）、关联（Association）、依赖 （Dependence）。上述6种关系的强弱如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</span><br></pre></td></tr></table></figure><p><strong>类关系图示</strong></p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210123142628.png" alt="类关系图示" style="zoom:50%;" /><ul><li><p>泛化（Generalization）：表示的是类之间的继承关系，注意是子类指向父类。UML中用带空心三角箭头的实线表示泛化关系，箭头指向的是父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">(String course)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学习"</span> + course);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Double grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现(Realization)：实现关系用一条带空心箭头的虚线表示。UML中用带空心三角箭头的虚线表示实现关系，箭头指向的是接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWork</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">implements</span> <span class="title">IWork</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"工作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组合(Composition)：是聚合的一种特殊形式，表示的是类之间更强的组合关系。他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束。UML中用实心菱形头的实线来表示组合，菱形头指向整体。</p></li></ul><blockquote><p>例如公司由多个部门组成；公司不存在了，部门也将不存在了。</p></blockquote><ul><li>聚合（Aggregation）：用于表示实体对象之间的关系，表示整体由部分构成的语义。与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；聚合关系是关联关系的一种，耦合度强于关联，他们的代码表现是相同的，仅仅是在语义上有所区别：关联关系的对象间是相互独立的，而聚合关系的对象之间存在着包容关系，他们之间是“整体-个体”的相互关系。UML中用空心菱形头的实线表示聚合关系，菱形头指向整体。</li></ul><blockquote><p>例如一个部门由多个员工组成，部门撤销了，人员不会消失，他们依然存在。</p></blockquote><ul><li>关联(Association)：表示的是类与类之间存在某种特定的对应关系。它是一种静态关系，通常与运行状态无关，一般由常识等因素决定的；关联关系默认不强调方向，表示对象间相互知道。UML中用双向、单向带箭头的虚线表示关联关系，箭头两端为相互关联的两个类。</li></ul><p><strong>注</strong>：在最终代码中，关联对象通常是以成员变量的形式实现的;</p><blockquote><p>例如乘车人和车票之间就是一种关联关系。</p></blockquote><ul><li>依赖(Dependency)：表示的是类之间的调用关系。与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化；依赖关系也可能发生变化；显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生。UML中用带箭头的虚线表示依赖关系，而箭头所指的则是被依赖的类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date publishDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getPublishDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPublishDate</span><span class="params">(Date publishDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.publishDate = publishDate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BigDecimal <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(BigDecimal price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double grade;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">(String course)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学习"</span> + course);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Student的类依赖Book类</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阅读"</span> + book.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> grade;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(Double grade)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注</strong>：在最终代码中，依赖关系体现为<strong>类构造方法</strong>及<strong>类方法的传入参数</strong>，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210123144416.png" alt="类继承实现示例图" style="zoom:50%;" /><p><strong>关联、聚合、组合三种关系用代码表示的话，大多都是一个类是另一个类的成员变量。真正的关系只能配合语义，结合上下文才能够判断出来，而只给出一段代码让我们判断是关联、聚合还是组合关系，则是无法判断的。</strong></p><p>[1]<a href="https://zhuanlan.zhihu.com/p/24576502" target="_blank" rel="noopener">参考资料https://zhuanlan.zhihu.com/p/24576502</a><br>[2]<a href="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html" target="_blank" rel="noopener">参考资料https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;UML&quot;&gt;&lt;a href=&quot;#UML&quot; class=&quot;headerlink&quot; title=&quot;UML&quot;&gt;&lt;/a&gt;UML&lt;/h5&gt;&lt;p&gt;UML(Unified Modeling Language，统一建模语言)是一种为面向对象系统的产品进行说明、可视化和编制文档的一种标准语言，是非专利的第三代建模和规约语言。UML是面向对象设计的建模工具，独立于任何具体程序设计语言。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="UML" scheme="https://ydstudios.gitee.io/tags/UML/"/>
    
      <category term="类图" scheme="https://ydstudios.gitee.io/tags/%E7%B1%BB%E5%9B%BE/"/>
    
      <category term="设计模式" scheme="https://ydstudios.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>RocketMQ的消费模式</title>
    <link href="https://ydstudios.gitee.io/post/122ee231.html"/>
    <id>https://ydstudios.gitee.io/post/122ee231.html</id>
    <published>2021-01-18T23:32:39.000Z</published>
    <updated>2021-01-18T15:41:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>RocketMQ 是基于发布订阅模型的消息中间件。所谓的发布订阅就是说，consumer 订阅了 broker 上的某个 topic，当 producer 发布消息到 broker 上的该 topic 时，consumer 就能收到该条消息。RocketMQ默认支持两种消费模式，分别是集群消费模式和广播消费模式，默认集群消费模式。</p><a id="more"></a><h5 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h5><p>MQ 约定使用相同 Consumer ID 的订阅者属于同一个集群，同一个集群下的订阅者消费逻辑必须完全一致（包括 Tag 的使用），这些订阅者在逻辑上可以认为是一个消费节点。</p><blockquote><p>消费同一类消息的多个 consumer 实例组成一个消费者组，也可以称为一个 consumer 集群，这些 consumer 实例使用同一个 group name。需要注意一点，除了使用同一个 group name，订阅的 tag 也必须是一样的，只有符合这两个条件的 consumer 实例才能组成 consumer 集群。</p></blockquote><h5 id="集群消费模式"><a href="#集群消费模式" class="headerlink" title="集群消费模式"></a>集群消费模式</h5><p>当使用集群消费模式时，MQ 认为任意一条消息只需要被集群内的任意一个消费者处理即可。</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210118233803.png" style="zoom:50%;" alt="集群消费模式" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"consumer1"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 同样也要设置NameServer地址  </span></span><br><span class="line">consumer.setNamesrvAddr(<span class="string">"127.0.0.1:9876;127.0.0.1:9876"</span>);  </span><br><span class="line"><span class="comment">// 默认就是集群消费模式</span></span><br><span class="line">consumer.setMessageModel(MessageModel.CLUSTERING); </span><br><span class="line">consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置consumer所订阅的Topic和Tag，*代表全部的Tag  </span></span><br><span class="line">consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"*"</span>);</span><br></pre></td></tr></table></figure><h6 id="适用场景-amp-注意事项"><a href="#适用场景-amp-注意事项" class="headerlink" title="适用场景&amp;注意事项"></a>适用场景&amp;注意事项</h6><ul><li>消费端集群化部署，每条消息只需要被处理一次。</li><li>由于消费进度在服务端维护，可靠性更高。</li><li>集群消费模式下，每一条消息都只会被分发到consumer集群内任意一个的consumer实例消费处理，如果需要被集群下所有的consumer实例消费处理，请使用广播模式。</li><li>集群消费模式下，不保证消息的每一次失败重投等逻辑都能路由到同一个consumer实例上，因此处理消息时不应该做任何确定性假设。</li></ul><h5 id="广播消费模式"><a href="#广播消费模式" class="headerlink" title="广播消费模式"></a>广播消费模式</h5><p>当使用广播消费模式时，MQ 会将每条消息推送给集群内所有消费者，保证消息至少被每个消费者消费一次。</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210118233944.png" alt="广播消费模式" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(<span class="string">"consumer1"</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 同样也要设置NameServer地址  </span></span><br><span class="line">consumer.setNamesrvAddr(<span class="string">"127.0.0.1:9876;127.0.0.1:9876"</span>);  </span><br><span class="line"><span class="comment">// 设置为广播消费模式</span></span><br><span class="line">consumer.setMessageModel(MessageModel.BROADCASTING); </span><br><span class="line">consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置consumer所订阅的Topic和Tag，*代表全部的Tag  </span></span><br><span class="line">consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"*"</span>);</span><br></pre></td></tr></table></figure><h6 id="适用场景-amp-注意事项-1"><a href="#适用场景-amp-注意事项-1" class="headerlink" title="适用场景&amp;注意事项"></a>适用场景&amp;注意事项</h6><ul><li>每条消息都需要被consumer集群内所有的consumer 实例消费一次，也就是说每条消息至少被每一个consumer 实例消费一次。</li><li>消费进度在客户端维护，出现重复的概率稍大于集群模式。</li><li>广播模式下，MQ 保证每条消息至少被每台客户端消费一次，但是并不会对消费失败的消息进行失败重投，因此业务方需要关注消费失败的情况。</li><li>广播模式下，第一次启动时默认从最新消息消费，客户端的消费进度是被持久化在客户端本地的隐藏文件中，因此不建议删除该隐藏文件，否则会丢失部分消息。</li><li>广播模式下，每条消息都会被大量的客户端重复处理，因此推荐尽可能使用集群模式。</li><li>广播模式下服务端不维护消费进度，所以服务端不提供堆积查询和报警功能。</li></ul><blockquote><p>目前仅 Java 客户端支持广播模式。</p></blockquote><p>虽然广播消费能保证集群内每个consumer实例都能消费消息，但是消费进度的维护、不具备消息重投的机制大大影响了实际的使用。因此，在实际使用中，更推荐使用集群消费，因为集群消费不仅拥有消费进度存储的可靠性，还具有消息重投的机制。而且，我们通过集群消费也可以达到广播消费的效果。</p><h5 id="使用集群模式模拟广播模式"><a href="#使用集群模式模拟广播模式" class="headerlink" title="使用集群模式模拟广播模式"></a>使用集群模式模拟广播模式</h5><p>有些场景希望一个消息需要多个消费者消费，并且也希望消费者消费失败，消息能够重新投递。</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210118234035.png" alt="集群模式模拟广播消费" style="zoom:50%;" /><blockquote><p>订单支付完成通知下游系统，积分服务扣减订单使用的积分、优惠券服务将优惠券状态更新为已使用、库存服务扣减商品库存、仓库准备发货等等</p></blockquote><h6 id="适用场景-amp-注意事项-2"><a href="#适用场景-amp-注意事项-2" class="headerlink" title="适用场景&amp;注意事项"></a>适用场景&amp;注意事项</h6><ul><li>每条消息都需要被多个消费者处理，每个消费者的逻辑可以相同也可以不一样。</li><li>消费进度在服务端维护，可靠性高于广播模式。</li></ul><p>如果业务上确实需要使用广播消费，那么我们可以通过创建多个 consumer 实例，每个 consumer 实例属于不同的 consumer group，但是它们都订阅同一个 topic。</p><blockquote><p>举个例子，我们创建 4 个 consumer 实例，consumer1（属于consumerGroup1）、consumer2（属于consumerGroup 2）、consumer 3（属于consumerGroup3）和 consumer4（属于consumerGroup4），它们都订阅了 topicA ，那么当 producer 发送一条消息到 topic A 上时，由于3个consumer 属于不同的 consumer group，所以 3 个consumer都能收到消息，也就达到了广播消费的效果了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置不同的消费组名，实现集群模式模拟广播消费</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> consumerGroup 消费组名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumerMessage</span><span class="params">(String consumerGroup)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(consumerGroup))&#123;</span><br><span class="line">            consumerGroup = <span class="string">"unique_group_name"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Instantiate with specified consumer group name.</span></span><br><span class="line">        DefaultMQPushConsumer consumer = <span class="keyword">new</span> DefaultMQPushConsumer(consumerGroup);</span><br><span class="line">        <span class="comment">// Specify name server addresses.</span></span><br><span class="line">        consumer.setNamesrvAddr(<span class="string">"127.0.0.1:9876;127.0.0.1:9870"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重要：设置消费者消息最大重试次数</span></span><br><span class="line">        <span class="comment">//consumer.setMaxReconsumeTimes(5);</span></span><br><span class="line">        <span class="comment">// Subscribe one more more topics to consume.</span></span><br><span class="line">        consumer.subscribe(<span class="string">"TopicTest"</span>, <span class="string">"*"</span>);</span><br><span class="line">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register callback to execute on arrival of messages fetched from brokers.</span></span><br><span class="line">        consumer.registerMessageListener((MessageListenerConcurrently) (messages, context) -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (MessageExt message : messages) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> reconsumeTimes = message.getReconsumeTimes();</span><br><span class="line">                String msgId = message.getMsgId();</span><br><span class="line"></span><br><span class="line">                SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">                String format = simpleDateFormat.format(<span class="keyword">new</span> Date());</span><br><span class="line">                String messageContext = <span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">                System.out.println(<span class="string">"消费时间："</span> + format + <span class="string">" ,消息消费次数="</span> + reconsumeTimes + <span class="string">", msgId="</span> + msgId + <span class="string">", 消息内容:"</span> + messageContext);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Launch the consumer instance.</span></span><br><span class="line">        consumer.start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>除此之外，每个 consumer 实例的消费逻辑可以一样也可以不一样，每个consumer group还可以根据需要增加 consumer 实例，比起广播消费来说更加灵活。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RocketMQ 是基于发布订阅模型的消息中间件。所谓的发布订阅就是说，consumer 订阅了 broker 上的某个 topic，当 producer 发布消息到 broker 上的该 topic 时，consumer 就能收到该条消息。RocketMQ默认支持两种消费模式，分别是集群消费模式和广播消费模式，默认集群消费模式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="rocketmq" scheme="https://ydstudios.gitee.io/tags/rocketmq/"/>
    
      <category term="消费模式" scheme="https://ydstudios.gitee.io/tags/%E6%B6%88%E8%B4%B9%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>系统的数据一致性到底是在说什么</title>
    <link href="https://ydstudios.gitee.io/post/e544327e.html"/>
    <id>https://ydstudios.gitee.io/post/e544327e.html</id>
    <published>2021-01-17T11:58:02.000Z</published>
    <updated>2021-02-04T12:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名程序员，你是不是经常在很多场景，例如看博客、聊天吹水等等时候听到这样一个词”系统数据一致性”，是不是有时候感觉到了迷糊，不知道这个”系统数据一致性”到底是在说什么？其实，你可能只是不明白这个词，但是你肯定在实际工作中发现、解决过这样的问题。</p><a id="more"></a><h5 id="单体架构下系统数据一致性问题"><a href="#单体架构下系统数据一致性问题" class="headerlink" title="单体架构下系统数据一致性问题"></a>单体架构下系统数据一致性问题</h5><p>在传统的系统应用中，一般都是使用单体架构来构建系统的。即所有的功能模块都放在一起实现，打成一个WAR包部署在Tomcat中，数据一般存放在关系型数据库中，如MySQL数据库。</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210117223211.png" style="zoom:50%;" alt="单体架构图" /><p>前面我说过即使这种单体架构的系统也是数据一致性的问题的，举一个电商下单的例子，用户提交完订单，系统，系统在订单表order表中写入订单金额、用户等相关数据，在订单明细order_item表中写入商品价格、购买的数量等数据，最后更新商品的库存sku信息。用户下单成功之后，系统操作了order、order_item、sku这三个数据表，对于这三个表的操作无论成功与失败，都应该是原子的，操作成功则都要成功，失败则都要一起失败。不然就会出现脏数据，数据一致性被破坏。</p><p>1、 如果操作order和order_item表成功，操作sku表失败，则会导致本应该扣减的库存没有扣减，则商品有可能出现超卖。</p><p>2、如果操作order和order_item表失败，操作sku表成功，则会导致本不应该扣减的库存扣减了，则商品有可能出现少卖。</p><p>3、如果操作order和sku表成功，order_item操作失败，则这个订单数据丢失，订单后续的操作肯定也是操作不了了。</p><p>上面只是简单的举了三种可能出现的情况，也可能会有其他的情况发生。那我们怎么避免这些情况的发生呢？其实这种问题稍微有的开发经验的同学都会想到解决方案，那就是使用数据库的事务，事务的原子性保证上述的步骤成功则一起成功，失败则一起失败。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">order</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_item;</span><br><span class="line"><span class="keyword">UPDATE</span> sku;</span><br><span class="line"><span class="keyword">COMMIT</span>; <span class="comment"># ROLLBACK</span></span><br></pre></td></tr></table></figure><p><strong>在单体架构的系统下解决内部模块的数据一致性的问题，用数据库的ACID特性就能保证。</strong></p><p>单体架构的优点就是相对分布式来说开发简单，功能可以集中管理，模块之间通信没有损耗。但随着业务越来越复杂、需求越来越庞大，人们对系统响应时间、吞吐量和出现故障的时候的系统可用性的要求也越来越高！传统的单体架构系统在这种情况下暴露的缺点也越来越多，人们开始寻求转变。既然部署在一个服务器上的单体架构系统搞不定，那就多部署几台，即用多台单机节点组成集群，再用负载均衡向外提供服务。</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210131220214.png" alt="集群部署" style="zoom:20%;" /><p>但是这样做还是解决不了单体架构存在的一些问题：</p><ul><li>只能使用同种语言开发，不能针对不同业务场景利用不同语言的优势开发对应的模块。</li><li>系统模块耦合性太强，系统中某一个模块出现问题，例如高并发、大数据场景或者出现bug，整个系统都会受到牵连。</li><li>某个模块发布，整个系统都要停机发布，系统所有模块都不能对外提供服务，这样无法快速响应市场需求。</li><li>集群负担大，如果想要集群，只能对整个系统进行集群，即使只有一个模块有压力。</li></ul><blockquote><p>集群(Cluster)： 系统单机部署对外服务能力出现瓶颈，则将系统进行多机部署，这些系统对外提供相同的服务，每个单机系统我们称之为节点，多个节点统一起来则可以称之为集群。</p></blockquote><h5 id="分布式架构下系统数据一致性问题"><a href="#分布式架构下系统数据一致性问题" class="headerlink" title="分布式架构下系统数据一致性问题"></a>分布式架构下系统数据一致性问题</h5><p>天下大事分久必合、合久必分！既然单体架构解决不了问题，那我们就尝试拆分系统，让专业的人做专业的事，那如何进行拆分呢？拆分一般分为水平拆分和垂直拆分。这里说的拆分并不单指数据库拆分，而是所有模块都进行拆分，每个模块都有自己的缓存、数据库等等。</p><ul><li>水平拆分指的是单一的节点无法满足性能的需求，需要进行数量上的扩展。每一个节点都具有相同的功能，每一个节点都负责一部分请求，节点们组成一个集群，对外进行提供服务。</li><li>垂直拆分指的是按照功能进行拆分，秉着”专业的人干专业的事”，把复杂的系统拆分成各个模块。模块之间通过RPC进行通信，可以做到高内聚、低耦合，每个模块独立部署和维护，可以快速迭代响应市场需求。<br>因此，分布式架构在这种背景下应运而生。</li></ul><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210131215841.png" alt="分布式架构" style="zoom:20%;" /><blockquote><p>分布式(Distributed)架构：分布式系统是由集中式系统逐渐演变而来。所谓的集中式系统，就是把系统中所用的功能都集中到一起，从而向外提供服务的单体应用。</p></blockquote><p>软件行业是没有银弹的，每一个被发明出来的新技术，都是一把双刃剑，都是在特定的领域解决了某些老问题，但是同时也会带来新的问题。那么微服务这种分布式架构解决了什么老问题？同时它又带来了哪些新问题呢？</p><h6 id="解决了老问题"><a href="#解决了老问题" class="headerlink" title="解决了老问题"></a>解决了老问题</h6><p>微服务这中分布式架构主要解决了单体架构存在的一些问题。</p><ul><li>各个服务可以使用不同的语言开发，可以利用不同语言的优势开发不同模块。</li><li>服务之间可以做到高内聚、低耦合。每个服务可以独立维护、部署，可以快速响应市场需求。</li><li>可以单独对某个有高并发、大流量的服务单独进行优化，不浪费资源。</li></ul><h6 id="带来了新问题"><a href="#带来了新问题" class="headerlink" title="带来了新问题"></a>带来了新问题</h6><ul><li>系统的监控难度加大。</li><li>数据的一致性成为问题。</li><li>系统的复杂度提高，系统的维护、设计成本增加，调试、纠错难度加大。</li></ul><p>新问题中的 <code>数据一致性问题</code>才是本文接下来的重点。 </p><h6 id="为啥会有这个数据一致性问题呢"><a href="#为啥会有这个数据一致性问题呢" class="headerlink" title="为啥会有这个数据一致性问题呢"></a>为啥会有这个数据一致性问题呢</h6><p>单体架构按照文中的说法，是一种不太时髦的架构方式，都能轻松解决数据一致性问题，新发明的分布式架构却又成了一个棘手的问题，这个到底是技术的进步还是技术在退步呢？哈哈😄😄(我的一点点吐槽)！！接下来我来解释一下为啥分布式系统会有这样的问题。<br>分布式系统每个功能大都部署在不同的服务器上，部署在不同国家和地区的服务器中，部署在不同的网络中，部署在不同国家和地区的网络中。这样一个需要大量的服务器共同协作，向外提供服务的系统，面临着诸多的挑战：</p><ol><li><p>良莠不齐的服务器和系统能力<br>分布式系统中的服务器，可能配置不一样，其上部署的系统可能也是由不同的程序语言、架构实现，因此处理请求的能力也就不一样。</p></li><li><p>不可靠的网络<br>如上文所说，系统中各个服务可能部署在不同国家和地区，各个服务通过网络进行通信，但是网络是不可靠的。网络经常会出现抖动、延时、分割、丢包等问题。<br>网络通信中最让人头痛的是因为网络抖动、延时等问题导致系统之间的通信出现超时：A服务向B服务发出请求，A服务没有在约定的时间内接受到B服务的响应，你不能确定B服务到底有没有处理完A服务的请求，这样的不确定性就需要我们进行重试处理，那么B服务就要解决请求幂等性问题。</p></li></ol><blockquote><p>支付宝出现过服务器的电缆被挖断的问题。<br>服务器的机房发生火灾、断电等事故。</p></blockquote><ol start="3"><li>普遍存在的单点故障<br>分布式系统为了保证故障发生的时候，系统仍然保证可用，每个模块都采用集群部署。单个节点的故障概率较低，但是节点数量达到一定规模时，系统中的节点出现故障的概率就变高了。</li></ol><p>分布式系统就是这样一些处在不同区域、有着不同能力和拥有单一功能的服务组成，他们通力合作才能向外提供服务，那如何保证他们的状态、信息一致并且协调有序就成了一个难题。</p><p>分布式系统就是要解决解决集中式的单体架构系统的各种缺陷，实现整个系统的 <code>高性能</code>、<code>高可用</code>、<code>可扩展</code>,但是要实现这三个目标并不容易，将系统进行拆分的过程中会出现上文中说到的问题，为了解决这些问题，诞生了很多关于分布式的基本理论，比如CAP、BASE等等。</p><h6 id="我们先来说说CAP理论"><a href="#我们先来说说CAP理论" class="headerlink" title="我们先来说说CAP理论"></a>我们先来说说CAP理论</h6><p>这个CAP理论相信很多人都听说过，下面请允许我写下教科书般的理论内容：</p><blockquote><p>CAP原则又称CAP定理，指的是在一个分布式系统中，Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p><ol><li>一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）</li><li>可用性（A）：保证每个请求不管成功或者失败都有响应。</li><li>分区容忍性（P）：系统中任意信息的丢失或失败不会影响系统的继续运作。</li></ol></blockquote><p>啥玩意啊上来就和我说分布式系统只能满足CAP中的两点，不可鱼和熊掌兼得。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名程序员，你是不是经常在很多场景，例如看博客、聊天吹水等等时候听到这样一个词”系统数据一致性”，是不是有时候感觉到了迷糊，不知道这个”系统数据一致性”到底是在说什么？其实，你可能只是不明白这个词，但是你肯定在实际工作中发现、解决过这样的问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="分布式" scheme="https://ydstudios.gitee.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="一致性" scheme="https://ydstudios.gitee.io/tags/%E4%B8%80%E8%87%B4%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>2020年的年终小结</title>
    <link href="https://ydstudios.gitee.io/post/b4e52eb3.html"/>
    <id>https://ydstudios.gitee.io/post/b4e52eb3.html</id>
    <published>2021-01-11T20:06:57.000Z</published>
    <updated>2021-01-17T03:48:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>2020年真的是一个神奇年度，这一年作为吃瓜群众的我，见到了太多牛鬼蛇神。</p><a id="more"></a><h5 id="周边环境的不平凡"><a href="#周边环境的不平凡" class="headerlink" title="周边环境的不平凡"></a>周边环境的不平凡</h5><p>新冠疫情席卷全球，中国政府的封闭管理效果显著，生产活动得到了有序恢复。6月16日在加勒万河谷地区中印发生摩擦事件，印军被威武的解放军暴揍后死亡20人。老美的经济波动，股市破纪录的四次熔断，川建国的美国总统之旅在11月结束。北京时间12月17日1时59分，嫦娥五号返回器在内蒙古四子王旗成功着陆，标志着我国首次地外天体采样返回任务圆满完成。</p><p><strong>国内疫情概览</strong><br><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210111215555.png" alt="国内疫情概览" style="zoom:50%;" /></p><p><strong>国外疫情概览</strong></p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210111215635.png" alt="国外疫情概览" style="zoom:50%;" /><h5 id="个人生活"><a href="#个人生活" class="headerlink" title="个人生活"></a>个人生活</h5><p>趁着国庆放假又去了一趟合肥，这一次吃上了丈母娘亲手做的红烧鱿鱼，味道真是不错！国庆的第四天和女朋友去了黄山市旅游，爬了莲花峰、去了大峡谷还吃了臭鳜鱼。黄山的风景真是不错，山峰陡峭、景色秀丽。因为想看看黄山的日出，所以我们在山上住了一晚。第二天早上我们急急忙忙的起床，穿上酒店里面厚厚大大棉衣，外面下着小雨、刮着冷风还有大雾，自然也就没有看到日出。听宾馆的服务人员说山上365天有360天都在下雨，你要是能看到日出，证明你的运气真是爆棚！<br><strong>莲花峰拍照留念</strong><br><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210113221351.png" alt="莲花峰拍照留念" style="zoom:50%;" /></p><h5 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h5><p>在2020年的最后几天有幸和几位大佬聊了聊，发现大佬就是大佬，不管是在技术上还是在思想上都远远超过我。大佬有句话关于系统设计的话，我甚是赞同，话的内容大致如下：</p><blockquote><p> 业务的诉求转化成产品的需求，产品的需求转化成技术的要求，最终转换成系统的能力。</p></blockquote><p>一句话就说出了系统设计的过程和目的，言简意赅呀！谈话中大佬还指出了我的一些问题，让我以后多多关注一下系统设计，要想法子去提高自己的核心竞争力。我事后也想了想，我在知识总结、系统设计和语言组织能力上都有不足，新的一年要注意这几个方面的锻炼。知识总结这方面，我决定后面多多总结，把知识串联起来，多输出一些博客。语言组织能力我想我平时多注意一下，然后适当的锻炼锻炼后面应该会渐渐变好。系统设计能力这方面的话，只能看看工作上有没有类似的机会了，这个光靠想应该不行，还是得实践见真知！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2020年真的是一个神奇年度，这一年作为吃瓜群众的我，见到了太多牛鬼蛇神。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="年终" scheme="https://ydstudios.gitee.io/tags/%E5%B9%B4%E7%BB%88/"/>
    
      <category term="感悟" scheme="https://ydstudios.gitee.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>巧用二进制表示不同的状态</title>
    <link href="https://ydstudios.gitee.io/post/b7145215.html"/>
    <id>https://ydstudios.gitee.io/post/b7145215.html</id>
    <published>2021-01-06T21:28:00.000Z</published>
    <updated>2021-01-07T15:21:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在开发的过程中会遇到这种场景，在系统的权限、选项设置，只有两种状态开启或者关闭。</p><a id="more"></a><p>具体我们以哔哩哔哩的隐私设置为例：<br><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210106221129.png" alt="隐私设置" style="zoom:50%;" /></p><p>这么几种开关你会怎么设计数据表？按照正常的操作针对一个开关添加字段进行表示。可是后续就会有下面的这样的情况：</p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20210106223014.png"  alt="隐私设置"  style="zoom:50%;" /><p>哈哈，产品需求迭代增加了后续几种开关，你准备怎么做？还是继续增加字段进行保存么？增加字段进行保存也是可以的，但是感觉上会有那么一点点low！新的开关出现增加字段进行保存，既要修改表结构，又要改实体属性，还是比较麻烦的！所以，对于这种类似的需求，我们要有一个良好的设计来应对，那我们如何解决呢？</p><p>用过linux系统的同学会知道这样一个知识点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chomd 777 something</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可读r=4，可写w=2，可执行x=1，即 二进制的001代表可执行，010代表可写，100代表可读</span></span><br></pre></td></tr></table></figure><p>上面的linux命令代表把something的权限修改成所有者、用户组、其他用户都可以进行可读、可写、可执行。</p><table><thead><tr><th>数字</th><th>权限</th><th>rwx</th><th>二进制</th></tr></thead><tbody><tr><td>7</td><td>读 + 写 + 执行</td><td>rwx</td><td>111</td></tr><tr><td>6</td><td>读 + 写</td><td>rw-</td><td>110</td></tr><tr><td>5</td><td>读 + 执行</td><td>r-x</td><td>101</td></tr><tr><td>4</td><td>只读</td><td>r–</td><td>100</td></tr><tr><td>3</td><td>写 + 执行</td><td>-wx</td><td>011</td></tr><tr><td>2</td><td>只写</td><td>-w-</td><td>010</td></tr><tr><td>1</td><td>只执行</td><td>–x</td><td>001</td></tr><tr><td>0</td><td>无</td><td>—</td><td>000</td></tr></tbody></table><p>用的是二进制的001代表可执行，010代表可写，100代表可读，那么只需要3位二进制数即可表示这三种状态的混合搭配。借用这种思想，我们来解决上述的问题，我们用一个int类型字段就可以表示上述所有的状态开关。<strong>使用2的次幂值代表一种状态</strong>，比如我们用</p><ul><li><p>2的零次方 $2^{0}$ = 1 表示打开我的收藏</p></li><li><p>2的一次方 $2^{1}$ = 2 表示打开追番追剧</p></li><li><p>2的二次方 $2^{2}$ = 4 表示打开订阅标签</p></li><li><p>2的三次方 $2^{3}$ = 8 表示打开最近投币的视频</p></li><li><p>2的四次方 $2^{4}$ = 16 表示打开个人资料</p></li><li><p>2的五次方 $2^{5}$ = 32 表示打开最近玩过的游戏</p><blockquote><p>博客使用hexo搭建，采用默认的landscape主题不支持LaTeX 公式，所以上面的次方公式显示的有问题。 </p></blockquote></li></ul><table><thead><tr><th>二进制</th><th>数字（十进制）</th><th>含义</th></tr></thead><tbody><tr><td>000 000</td><td>0</td><td>全部关闭</td></tr><tr><td>000 001</td><td>1</td><td>开启我的收藏</td></tr><tr><td>000 011</td><td>3</td><td>开启我的收藏、追番追剧</td></tr><tr><td>000 111</td><td>7</td><td>开启我的收藏、追番追剧、订阅标签</td></tr><tr><td>111 111</td><td>63</td><td>全部开启</td></tr></tbody></table><p><strong>其实就是用bit位表示开启或者关闭，如果是1表示开启，0表示关闭。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">或运算：bit位上有1为1。例如：2 | 1 == 0000 0010 | 0000 0001 == 3</span><br><span class="line">与运算：bit位都为1才为1。 例如 5 &amp; 2 == 0000 0101 &amp; 0000 0010 == 0</span><br><span class="line">异或运算：0^0=0；  0^1=1；  1^0=1；   1^1=0；即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。</span><br></pre></td></tr></table></figure><h6 id="那我们就来编码实现上述功能："><a href="#那我们就来编码实现上述功能：" class="headerlink" title="那我们就来编码实现上述功能："></a>那我们就来编码实现上述功能：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.<span class="keyword">module</span>.business.bit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘洋 Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/1/7</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> MemberOption &#123;</span><br><span class="line"></span><br><span class="line">    FAVORITE(<span class="number">1</span>, <span class="string">"我的收藏"</span>, <span class="number">1</span>),</span><br><span class="line">    FOLLOW(<span class="number">2</span>, <span class="string">"追番追剧"</span>, <span class="number">2</span>),</span><br><span class="line">    SUBSCRIBE(<span class="number">3</span>, <span class="string">"订阅标签"</span>, <span class="number">4</span>),</span><br><span class="line">    VIDEO(<span class="number">4</span>, <span class="string">"最近投币视频"</span>, <span class="number">8</span>),</span><br><span class="line">    PROFILE(<span class="number">5</span>, <span class="string">"个人资料"</span>, <span class="number">16</span>),</span><br><span class="line">    GAME(<span class="number">6</span>, <span class="string">"最近玩的游戏"</span>, <span class="number">32</span>),;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer tag;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有某个tag</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tags 拥有的tag集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasTag</span><span class="params">(<span class="keyword">int</span> tags)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (tags &amp; <span class="keyword">this</span>.tag) == <span class="keyword">this</span>.tag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tags = <span class="number">37</span>;</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        System.out.println(MemberOption.FAVORITE.hasTag(tags));</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        System.out.println(MemberOption.SUBSCRIBE.hasTag(tags));</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">        System.out.println(MemberOption.VIDEO.hasTag(tags));</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">        System.out.println(MemberOption.GAME.hasTag(tags));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="开启我的收藏和最近玩的游戏，其他选项都关闭，则计算过程如下："><a href="#开启我的收藏和最近玩的游戏，其他选项都关闭，则计算过程如下：" class="headerlink" title="开启我的收藏和最近玩的游戏，其他选项都关闭，则计算过程如下："></a>开启我的收藏和最近玩的游戏，其他选项都关闭，则计算过程如下：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 我的收藏 tag = 1 最近玩的游戏 tag = 32</span><br><span class="line">tags = <span class="number">1</span> + <span class="number">32</span> = <span class="number">33</span> </span><br><span class="line">或者采用位或运算 tags = <span class="number">1</span> | <span class="number">32</span> = <span class="number">33</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 计算状态位</span></span><br><span class="line"><span class="comment">  * tags: 已有状态位</span></span><br><span class="line"><span class="comment">  * values: 需要添加的状态值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">addTag</span><span class="params">(<span class="keyword">int</span> tags, <span class="keyword">int</span>... values)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> value : values) &#123;</span><br><span class="line">    tags |= value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tags;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="关闭最近玩的游戏，则计算过程如下："><a href="#关闭最近玩的游戏，则计算过程如下：" class="headerlink" title="关闭最近玩的游戏，则计算过程如下："></a>关闭最近玩的游戏，则计算过程如下：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">上面计算的tags = <span class="number">33</span> ，最近玩的游戏 tag = <span class="number">32</span></span><br><span class="line">关闭最近玩的游戏，</span><br><span class="line">tags = <span class="number">33</span> ^ <span class="number">32</span> = <span class="number">0010</span> <span class="number">0001</span> ^ <span class="number">0010</span> <span class="number">0000</span> = <span class="number">0000</span> <span class="number">0001</span> = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 移除状态位</span></span><br><span class="line"><span class="comment">   * tags: 已有状态位</span></span><br><span class="line"><span class="comment">   * tag: 需要移除的状态值</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">delTag</span><span class="params">(<span class="keyword">int</span> tags, <span class="keyword">int</span> tag)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// tags和value与运算不等于tag，说明没有开启tag对应的选项，则直接返回tags</span></span><br><span class="line">  <span class="keyword">if</span> ((tags &amp; tag) != tag) <span class="keyword">return</span> tags;</span><br><span class="line">  <span class="keyword">return</span> tags ^ tag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判断是否开启最近玩的游戏，则计算过程如下："><a href="#判断是否开启最近玩的游戏，则计算过程如下：" class="headerlink" title="判断是否开启最近玩的游戏，则计算过程如下："></a>判断是否开启最近玩的游戏，则计算过程如下：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">上面计算的tags = <span class="number">33</span> ，最近玩的游戏 tag = <span class="number">32</span></span><br><span class="line"> <span class="number">33</span> &amp; <span class="number">32</span> = <span class="number">0010</span> <span class="number">0001</span> &amp; <span class="number">0010</span> <span class="number">0000</span> = <span class="number">0010</span> <span class="number">0000</span> = <span class="number">32</span> (<span class="number">0010</span> <span class="number">0000</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有某个tag</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tags 拥有的tag集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tag 待判断的tag</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasTag</span><span class="params">(<span class="keyword">int</span> tags, <span class="keyword">int</span> tag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (tags &amp; tag) == tag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="如何用SQL查询开启最近玩的游戏选项的用户"><a href="#如何用SQL查询开启最近玩的游戏选项的用户" class="headerlink" title="如何用SQL查询开启最近玩的游戏选项的用户"></a>如何用SQL查询开启最近玩的游戏选项的用户</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL也是支持位运算的，其他的数据库应该也是支持的</span></span><br><span class="line"><span class="keyword">select</span> member_id <span class="keyword">from</span> table_name <span class="keyword">where</span> member_option &amp; <span class="comment">#&#123;option&#125; = #&#123;option&#125;</span></span><br></pre></td></tr></table></figure><p>就这样我们就可以用一个int型字段保存4*8 = 32个状态位（无符号的情况下）,看起来还是很不错，运算的效率高，只用一个字段可以保存较多的状态。缺点嘛也是有的，就是可读性差，不能很直观的看出到底有哪些状态。其实这种方法可以用一个字段表示多种状态，例如 订单一般有支付状态：待支付 1 、支付中 2 、支付成功4 、支付失败8和发货状态：待发货16、已发货32、在途64、已收货128，这样的话用一个orderStatus来表示这两种状态：支付成功4 + 待发货16 = 4 | 16 = 20，也是可以的但是如上面所说，优缺点都有，看你的实际情况进行选择了！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在开发的过程中会遇到这种场景，在系统的权限、选项设置，只有两种状态开启或者关闭。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="二进制" scheme="https://ydstudios.gitee.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
      <category term="位运算" scheme="https://ydstudios.gitee.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Lua脚本在秒杀场景下的使用</title>
    <link href="https://ydstudios.gitee.io/post/d958d490.html"/>
    <id>https://ydstudios.gitee.io/post/d958d490.html</id>
    <published>2020-12-24T22:40:10.000Z</published>
    <updated>2021-01-06T13:07:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>在秒杀这种高并发、大流量的场景下，利用数据库进行库存扣减、数据查询这种想法就不要考虑了。你要是有这种想法，劝你早点放弃，P0事故一定在等着你。之前用Lua脚本实现秒杀场景下的库存扣减感觉很不错，配合Redis秒杀效果杠杠的！Redis 2.6 版本通过内嵌支持 Lua 环境，会单线程原子性执行 Lua 脚本，保证 Lua 脚本在处理的过程中不会被任意其它请求打断。</p><a id="more"></a><p>先说一下大概的情况，在上秒杀的商品的时候，就直接将产品的库存、用户每人的限购的数量等信息直接用Hash数据类型保存在Redis的键goods_商品ID中，不设置缓存有效时间。用户的购买记录用zset保存purchase_goods_商品id中，用商品的ID作为key，用户唯一标识为member,购买的数量为score。相关的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 初始化一些秒杀产品</span></span><br><span class="line">hmset seckill:goods:1000 goodsId 1000 name 戴森吸尘器V10Motorhead入门款,性价比之选 stock 10 purchaseLimit 1   price 999.99 startSaleTime 1614137304000 endSaleTime 1614140904000  coverImage https://dss2.bdstatic.com/8_V1bjqh_Q23odCf/pacific/1955446237.png</span><br><span class="line"></span><br><span class="line">hmset seckill:goods:2000 goodsId 2000 name 戴森无叶风扇 stock 15 purchaseLimit 1  price 1999.99 startSaleTime 1640406504000 endSaleTime 1614140904000  coverImage https://dss2.bdstatic.com/8_V1bjqh_Q23odCf/pacific/1957729018.png</span><br><span class="line"></span><br><span class="line">hmset seckill:goods:3000 goodsId 3000 name 戴森智能照明灯 stock 32 purchaseLimit 1 price 299.99 startSaleTime 1640406504000 endSaleTime 1614140904000  coverImage https://dss2.bdstatic.com/8_V1bjqh_Q23odCf/pacific/1947896752.jpg</span><br><span class="line"></span><br><span class="line">hmset seckill:goods:4000 goodsId 4000 name 戴森AM10除菌加湿器 stock 15  purchaseLimit 1   price 1299.99 startSaleTime 1640752104000 endSaleTime 1610166504000 coverImage https://dss2.bdstatic.com/8_V1bjqh_Q23odCf/pacific/1947896752.jpg</span><br><span class="line"></span><br><span class="line">hmset seckill:goods:5000 goodsId 5000 name 苹果AirPodsMax  stock 13 purchaseLimit 1   price 2099.99 startSaleTime 1640752104000 endSaleTime 1610166504000 coverImage  https://dss2.bdstatic.com/8_V1bjqh_Q23odCf/pacific/1983533493.jpg</span><br></pre></td></tr></table></figure><p>具体的Lua脚本编写过程比较简单，稍微熟悉一下就能看懂了，具体内容如下（临时重写的没有优化，凑合着看吧）：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--KEYS[1] 对应商品的购买记录:purchase_goods_1000</span></span><br><span class="line"><span class="comment">--KEYS[2] 商品的key:goods_1000</span></span><br><span class="line"><span class="comment">--ARGV[1] 购买人唯一标识memberId:2000</span></span><br><span class="line"><span class="comment">--ARGV[2] 购买数量number: 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> goodsExists=redis.call(<span class="string">'EXISTS'</span>, KEYS[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">if</span> goodsExists == <span class="number">0</span></span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"> <span class="comment">-- 产品不存在</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> goodsStockExists=redis.call(<span class="string">'hexists'</span>, KEYS[<span class="number">2</span>], <span class="string">'stock'</span>)</span><br><span class="line"><span class="keyword">if</span> goodsStockExists == <span class="number">0</span> </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">   <span class="comment">-- 代表产品库存不存在</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">-2</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">--用户限购数量</span></span><br><span class="line"><span class="keyword">local</span> purchaseLimitExists=redis.call(<span class="string">'hexists'</span>, KEYS[<span class="number">2</span>], <span class="string">'purchaseLimit'</span>)</span><br><span class="line"><span class="keyword">if</span> purchaseLimitExists == <span class="number">0</span></span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"><span class="comment">-- 商品限购数量不存在</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-3</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--用户限购数量</span></span><br><span class="line"><span class="keyword">local</span> purchaseLimit=<span class="built_in">tonumber</span>(redis.call(<span class="string">'hget'</span>, KEYS[<span class="number">2</span>], <span class="string">'purchaseLimit'</span>))</span><br><span class="line"><span class="comment">--用户已经购买的数量</span></span><br><span class="line"><span class="keyword">local</span> purchasedNumber=redis.call(<span class="string">'ZSCORE'</span>, KEYS[<span class="number">1</span>], ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="comment">--购买数量不存在则默认为0</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> purchasedNumber</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">   purchasedNumber = <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 用户现在要购买的数量</span></span><br><span class="line"><span class="keyword">local</span> nowPurchasedNumber = <span class="built_in">tonumber</span>(ARGV[<span class="number">2</span>])</span><br><span class="line"><span class="comment">-- 用户将要购买的总数量</span></span><br><span class="line"><span class="keyword">local</span> totalPurchaseNumber = nowPurchasedNumber+purchasedNumber</span><br><span class="line"><span class="keyword">if</span> purchaseLimit &lt; totalPurchaseNumber</span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line"><span class="comment">-- 用户购买数量超过了限购数量</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-4</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">local</span> stock=<span class="built_in">tonumber</span>(redis.call(<span class="string">'hget'</span>, KEYS[<span class="number">2</span>], <span class="string">'stock'</span>))</span><br><span class="line"><span class="keyword">if</span> stock &lt;= <span class="number">0</span></span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">  <span class="comment">-- 库存为0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span> stock &lt; nowPurchasedNumber</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"> <span class="comment">-- 库存不足</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--扣减商品库存</span></span><br><span class="line">redis.call(<span class="string">'hincrby'</span>, KEYS[<span class="number">2</span>], <span class="string">'stock'</span>, -nowPurchasedNumber)</span><br><span class="line"><span class="comment">-- 更新用户的总购买数量</span></span><br><span class="line">redis.call(<span class="string">'zadd'</span>,KEYS[<span class="number">1</span>], totalPurchaseNumber, ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="comment">-- 用户购买成功</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>尽管Lua会提供字符串和数字的自动转换，但是更好还是转换一下。tonumber就是把字符串数字转换成数字的函数。</li><li>redis.call是用来执行redis函数的方法。</li><li>上述的脚本可以通过EVAL、EVALSHA或者redis-cli 参数的形式执行。但是上面的脚本已经格式化了，最好还是以后面的方式运行。</li><li>Lua的注释是以 – 开头作为单行注释</li></ol></blockquote><p>具体执行演示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sam-Mac:Downloads Sam$ rediscli --eval  /Users/sam/Downloads/seckill.lua  purchase_goods_3000 seckill:goods:1000 , 202 1</span><br><span class="line">(integer) 0</span><br><span class="line">Sam-Mac:Downloads Sam$</span><br></pre></td></tr></table></figure><ul><li><p>–eval参数是告诉rediscli(这个是自定义redis-cli命令的地址)读取并运行后面的Lua脚本。</p></li><li><p>/Users/sam/Downloads/seckill.lua 是脚本的位置，后面跟着是传给Lua脚本的参数。</p></li><li><p>逗号”,”前的purchase_goods_3000 seckill:goods:1000 是要操作的键，可以在脚本中用KEYS[1]、KEYS[2]获取，逗号”,”后面的202和1是参数，在脚本中能够使用ARGV[1]和ARGV[2]获得。</p></li></ul><blockquote><p>注意”,”逗号两边的空格不能省略，否则会出错</p></blockquote><p>在Redis中调用Lua脚本，也是可以调试的。Redis 从 v3.2.0 开始支持 Lua debugger，可以加断点、print 变量信息、展示正在执行的代码。可以在命令中添加–ldb进行调试，这个参数是开启 Lua dubegger 的意思，这个模式下Redis会 fork 一个进程进入隔离环境，不会影响Redis正常提供服务，但调试期间，原始 redis 执行命令、脚本的结果也不会体现到 fork 之后的隔离环境之中。因此呢，还有另外一种调试模式 –ldb-sync-mode，也就是前面提到的同步模式，这个模式下，会阻塞 redis 上所有的命令、脚本，直到脚本退出，完全模拟了正式环境使用时候的情况，使用的时候务必注意这点。</p><p>添加和删除断点很简单，只需使用<code>b 1 2 3 4</code>在第1,2,3,4行添加<code>b 0</code>断点。该命令将删除所有断点。可以使用as参数删除选定的断点，即我们要删除的断点所在的行，但前缀为减号。例如<code>b -3</code>，从第3行中删除断点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Sam-Mac:Downloads Sam$ rediscli --ldb --eval  /Users/sam/Downloads/seckill.lua  purchase_goods_3000 seckill:goods:1000 , 202 1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201224234757.png" alt="调试Lua脚本"></p><p>上面就是今日文章的所以内容，这样看起来是不是觉得Lua脚本也是挺容易的吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在秒杀这种高并发、大流量的场景下，利用数据库进行库存扣减、数据查询这种想法就不要考虑了。你要是有这种想法，劝你早点放弃，P0事故一定在等着你。之前用Lua脚本实现秒杀场景下的库存扣减感觉很不错，配合Redis秒杀效果杠杠的！Redis 2.6 版本通过内嵌支持 Lua 环境，会单线程原子性执行 Lua 脚本，保证 Lua 脚本在处理的过程中不会被任意其它请求打断。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="redis" scheme="https://ydstudios.gitee.io/tags/redis/"/>
    
      <category term="lua" scheme="https://ydstudios.gitee.io/tags/lua/"/>
    
      <category term="秒杀" scheme="https://ydstudios.gitee.io/tags/%E7%A7%92%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的IGNORE关键字在避免重复插入记录时存在的问题及最佳实践</title>
    <link href="https://ydstudios.gitee.io/post/cef7abb0.html"/>
    <id>https://ydstudios.gitee.io/post/cef7abb0.html</id>
    <published>2020-12-16T21:57:39.000Z</published>
    <updated>2021-01-23T08:01:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们在实际开发中总有这样的需求，表里的数据要保持唯一，所以我们开发中经常都是先查询这样的数据有没有，有的话跳过，没有的话再插入，然后在能表示数据记录唯一的列上加上唯一索引进行兜底。虽然有的同学基本上也是这么做的，但是又稍微的做了一点其他的骚操作😄😄😄。</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 😄😄😄 骚操作, 当有重复记录就会忽略错误返回影响行数0</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> tableName <span class="keyword">VALUES</span> ()</span><br></pre></td></tr></table></figure><p>有的同学是这么想的，在高并发的情况下，先查询再插入的话是有并发的问题的，我直接在重复插入的时候屏蔽错误，不用捕获或者抛出异常，直接用 insert 的返回影响行数来判断插入是否成功。这样的做法看上去感觉没啥问题，其实还是有很大的问题的。</p><h6 id="语义上的不正确"><a href="#语义上的不正确" class="headerlink" title="语义上的不正确"></a>语义上的不正确</h6><p>你在表中定义了唯一索引，插入重复的记录直接屏蔽了错误，这就造成异常被吞掉了，导致功能有数据重复的bug就无法通过异常日志来定位。</p><h6 id="破坏MySQL主从的数据一致性"><a href="#破坏MySQL主从的数据一致性" class="headerlink" title="破坏MySQL主从的数据一致性"></a>破坏MySQL主从的数据一致性</h6><p>在说这个IGNORE是如何造成 MySQL 主从数据不一致的原因之前，我们先说说 MySQL 中的一个作为开发很少听说的一个表级锁：<strong>AUTO-INC锁</strong>（即自增锁）。</p><p>在使用 MySQL 的过程中，我们可以为表的某一列添加 AUTO_INCREMENT属性，在插入记录时该列可以不指定，MySQL 会自动为该列赋予一个递增的值。MySQL 自动给AUTO_INCREMENT修饰的列进行递增赋值的实现方式主要有以下两个：</p><ul><li><p>采用 AUTO_INC锁，在执行插入语句时就加一个表级别的AUTO_INC锁，然后为每条待插入的记录分配递增值。在语句执行结束后，再把AUTO_INC锁释放。所以在一个事务持有AUTO_INC锁的过程中，其他插入语句都要阻塞，从而保证一个语句分配的递增值是连续的。</p></li><li><p>采用一个轻量级的锁，在为INSERT语句生成递增值时获取这个轻量级的锁，然后在生成本次插入语句需要用到的递增值后就把轻量级锁释放掉，不需要等到整个插入语句执行完才释放锁。</p></li></ul><p>如果我们的插入语句在执行前就可以确定具体要插入多少条记录，比如 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">test</span>(a) <span class="keyword">VALUES</span> (<span class="string">'1'</span>),(<span class="string">'b'</span>);</span><br></pre></td></tr></table></figure><p>此时我们可以在执行前就确定要插入2条记录，那么一般采用轻量级锁的方式对 AUTO_INCREMENT修饰的列进行赋值，用这种方式可以避免锁定表，可以提高插入性能。</p><blockquote><p>Mysql 提供了一个名为 innodb_atuoinc_lock_mode 的系统变量，来控制 MySQL使用上述的两种方式中的哪一中来为 AUTO_INCREMENT修饰的列进行赋值。</p></blockquote><ul><li>当 innodb_atuoinc_lock_mode 的值为0时，一律采用AUTO_INC锁；</li><li>当 innodb_atuoinc_lock_mode 的值为1时，两种方式混合使用，插入记录确定时采用轻量级锁，不确定时使用AUTO_INC锁。</li><li>当 innodb_atuoinc_lock_mode 的值为2时，一律采用轻量级锁；<blockquote><p>当innodb_autoinc_lock_mode=0时，只有插入成功之后，AUTO_INCREMENT 值才会递增，插入失败不会递增。<br>当innodb_autoinc_lock_mode=1时，无论插入是否成功，AUTO_INCREMENT的值都会递增。<br>当innodb_atuoinc_lock_mode为2时，可能会造成不同事物中的插入语句为AUTO_INCREMENT修饰的列生的值是交叉的，这在主从复制的场景是不安全的。<sup>[1]</sup></p></blockquote></li></ul><p>我查看过我目前负责的系统，MySQL 采用的是主从模式，隔离级别设置的是读已提交(Read Committed)，binlog的格式设置为 ROW， innodb_atuoinc_lock_mode设置的是1，也就是说无论插入成功与否 AUTO_INCREMENT 的值都会递增。在本地搭建的主从模式的 mysql（安装本人博客中之前的文章搭建的 MySQL主从） 中的master库 新建一个如下的表：</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201218232257.png" alt="表结构和对应的自增值"></p><p>查看一下 slave3307数据库中对应的表结构和自增值：确定和 master 一致</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201218232602.png" alt="slave3307数据库中对应的表结构和自增值"></p><p>在 master库上执行 show master status 查看 master 的binglog 信息：</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201218232902.png" alt="master 的binglog 信息"></p><p>在 master 库上连续执行下图的三个 SQL，观察  master 与 salve 的情况。</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201218233357.png" alt="三个 SQL"></p><p>master 的表的AUTO_INCREMENT值已经发生了变化，如下图：</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201218233623.png" alt="表的自增值发生了变化"></p><p>master 的 binglog 如下图：</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201218233929.png" alt="master 的 binglog"></p><p>我们从上面两个图可以发现，使用ignore关键字，尽管待插入的记录因为唯一键冲突而没有插入成功，但AUTO_INCREMENT值却递增了，而且 binlog 中也没有 INSERT IGNORE 语句日志，这很明显导致数据库 slave 不会执行该语句，导致数据库 slave数据库中的表的主键和 master 数据库中的表主键不一致！</p><p>我们由此可以大胆的猜测一下 IGNORE 的实现机制：</p><p>1、尝试把新行插入到表中 ；</p><p>2、如果插入成功则返回正常的影响行数；如果唯一键冲突（错误）则忽略该错误，返回影响行数为0 ；</p><p>在实际生产环境中业务上是需要当出现唯一键冲突时发生重复要抛出异常而不是吞掉异常，这个前面也有说到。此外，由上面的执行过程可知，我们期望插入的记录因为唯一键冲突而没有插入成功，但AUTO_INCREMENT字段值却递增了。因为插入语句并未执行成功，在binlog中并不会有执行记录，这意味着从库的AUTO_INCREMENT字段值不会递增，即主库和从库的AUTO_INCREMENT值出现了不一致。这带来的问题是，后续如果因为主库发生故障而发生主从切换，从库的AUTO_INCREMENT值落后于主库，就会导致一段时间内在原从库现主库插入的数据在原主库现从库上因为AUTO_INCREMENT主键冲突而导致插入失败，这个肯定是用<code>INSERT IGNORE</code>之前没有想到的，所以建议在实际开发中不要使用此种骚操作😄😄😄</p><blockquote><p>InnoDB表insert语句主要分为三种类型：</p><ul><li><p>Simple insert(简单插入)<br>可以通过语句预先判断插入的行数。包括不包含子查询的单行、多行 <code>INSERT</code> 和 <code>REPLACE</code> 语句，还有语句<code>INSERT ... ON DUPLICATE KEY UPDATE</code>。</p></li><li><p>Bulk inserts(大量插入)<br>无法通过语句预先判断插入的行数。包括<code>INSERT ... SELECT</code>、<code>REPLACE ... SELECT &gt;</code>和<code>LOAD DATA</code>语句。InnoDB每处理一行才会为 AUTO_INCREMENT 列分配一个值。</p></li><li><p>Mixed-mode inserts(混合模式插入)<br>在简单插入语句当中，有的行有为自增列指定值，而有的行没有为自增列指定值。</p></li></ul></blockquote><p><strong>例如:混合模式插入</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># id列作为自增列</span></span><br><span class="line"> <span class="keyword">INSERT</span> <span class="keyword">INTO</span> t1 (<span class="keyword">id</span>,c1,c2) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">1</span>,<span class="string">'a'</span>), (<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="string">'b'</span>), (<span class="number">10</span>,<span class="number">5</span>,<span class="string">'c'</span>), (<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="string">'d'</span>) ;</span><br></pre></td></tr></table></figure><ul><li>[1] <a href="https://ydstudios.gitee.io/post/cef7abb0.html">参考《MySQL是怎样运行的》411页</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在实际开发中总有这样的需求，表里的数据要保持唯一，所以我们开发中经常都是先查询这样的数据有没有，有的话跳过，没有的话再插入，然后在能表示数据记录唯一的列上加上唯一索引进行兜底。虽然有的同学基本上也是这么做的，但是又稍微的做了一点其他的骚操作😄😄😄。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://ydstudios.gitee.io/tags/mysql/"/>
    
      <category term="ignore" scheme="https://ydstudios.gitee.io/tags/ignore/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习之模板和策略模式实战</title>
    <link href="https://ydstudios.gitee.io/post/c14af19a.html"/>
    <id>https://ydstudios.gitee.io/post/c14af19a.html</id>
    <published>2020-12-04T21:41:34.000Z</published>
    <updated>2020-12-07T14:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面文章由抽奖活动赠送不同的奖励从而引出了策略模式，定义一个策略接口，不同的奖励发放实现不同的策略。即使后续新增加奖励种类，只要重新实现一个策略即可，符合了设计模式中的<em>开闭原则-对扩展开放对修改关闭</em>。我在一次订单活动功能开发中使用到了策略模式，在开发的过程中发现，订单符合活动条件的判断、发放奖励给用户，可以提升到父类实现，具体的条件判断逻辑可以延迟到子类去实现，从而引出本篇文章的主题：模板模式。</p><a id="more"></a><h6 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h6><p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行，这种类型的设计模式属于行为型模式。模板模式中涉及到在父类实现算法骨架，具体步骤在子类实现，所以必须要有抽象类（Java8中的接口的 default 方法貌似也可以实现）。</p><h6 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h6><ul><li>意图：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li><li>主要解决：一些方法通用，却在每一个子类都重新写了这一方法。</li><li>何时使用：有一些通用的方法。</li><li>如何解决：将这些通用算法抽象出来。</li><li>关键代码：在抽象类实现，其他步骤延迟到子类实现。</li></ul><h6 id="应用实例："><a href="#应用实例：" class="headerlink" title="应用实例："></a>应用实例：</h6><ul><li>JDK中 ReentrantLock中公平锁和非公平锁的实现 </li><li>Spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session  等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</li></ul><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><ul><li>封装不变部分，扩展可变部分。 </li><li>提取公共代码，便于维护。 </li><li>行为由父类控制，子类实现。</li></ul><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</li></ul><h6 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h6><ul><li>有多个子类共有的方法，且逻辑相同。 </li><li>重要的、复杂的方法，可以考虑作为模板方法。</li></ul><h6 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h6><blockquote><p> 为防止恶意操作，一般模板方法都加上 final 关键词。</p></blockquote><h6 id="本文示例UML图"><a href="#本文示例UML图" class="headerlink" title="本文示例UML图"></a>本文示例UML图</h6><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201204224522.png" alt="模板、策略模式 UML 图" style="zoom:40%;" /><h6 id="代码结构图"><a href="#代码结构图" class="headerlink" title="代码结构图"></a>代码结构图</h6><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201207220104.png" alt="代码结构图"></p><h6 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h6><p>1、策略接口，定义了一个活动策略需要实现的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.dto.ActiveOrderDto;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 活动接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IActiveHandle</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回活动的类型</span></span><br><span class="line"><span class="comment">     * ActiveCategoryEnum 枚举</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getCategory</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回活动的详细类型</span></span><br><span class="line"><span class="comment">     * ActiveCategoryDetailEnum 枚举</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getCategoryDetail</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单检查</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temporaryOrderDto 临时订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Result <span class="title">checkOrder</span><span class="params">(ActiveOrderDto temporaryOrderDto)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、活动抽象类包含订单规则是否符合的判断以及符合规则之后发送奖励的算法骨架。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.dto.ActiveOrderDto;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 活动抽象类,抽取公共方法,</span></span><br><span class="line"><span class="comment"> * 把订单是否符合奖励的判断之后发送奖励的公共逻辑在此处实现,</span></span><br><span class="line"><span class="comment"> * 订单具体条件的判断延迟由子类去实现.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 策略和模板模式组合使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractActiveHandle</span> <span class="keyword">implements</span> <span class="title">IActiveHandle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 其他抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">otherMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherMethod1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"其他公用方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部真正要调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temporaryOrderDto 订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">handle</span><span class="params">(ActiveOrderDto temporaryOrderDto)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用接口中需要子类实现的方法</span></span><br><span class="line">        Result result = checkOrder(temporaryOrderDto);</span><br><span class="line">        <span class="keyword">if</span> (!result.isSuccess()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"不符合奖励发放条件"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"不符合奖励发放条件"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sendReward(temporaryOrderDto, temporaryOrderDto.getMemberId(), <span class="string">"积分"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统一的发送奖励的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temporaryOrderDto 订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memberId 用户ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reward 奖励</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">sendReward</span><span class="params">(ActiveOrderDto temporaryOrderDto, <span class="keyword">long</span> memberId, String reward)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">"给用户"</span> + memberId + <span class="string">"的订单"</span> + temporaryOrderDto + <span class="string">"发送奖励"</span> + reward;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、 活动策略的实现类</p><ul><li><p>会籍订单策略实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.dto.ActiveOrderDto;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.service.AbstractActiveHandle;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 会籍订单的处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LevelOrderActiveHandle</span> <span class="keyword">extends</span> <span class="title">AbstractActiveHandle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"会籍订单的实现"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCategoryDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">checkOrder</span><span class="params">(ActiveOrderDto temporaryOrderDto)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"不符合会籍订单活动条件"</span>,<span class="string">"不符合会籍订单活动条件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>酒店订单活动策略实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.common.Result;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.dto.ActiveOrderDto;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.service.AbstractActiveHandle;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 酒店订单处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/11/26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.7.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderActiveHandle</span> <span class="keyword">extends</span> <span class="title">AbstractActiveHandle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"酒店订单的实现"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCategory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCategoryDetail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">checkOrder</span><span class="params">(ActiveOrderDto temporaryOrderDto)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">int</span> i = random.nextInt(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (i&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="string">"不符合酒店订单活动条件"</span>,<span class="string">"不符合酒店订单活动条件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>4 、统一入口提供一个Context 给外部使用</p><p>调用方直接使用@Autowired 注入ActiveHandleContext即可使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.<span class="keyword">module</span>.pattern.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负责所有活动处理的入口,根据 getImpl(String categoryDetail)类型来判断调用具体的活动策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/13</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveHandleContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractActiveHandle&gt; activeHandleList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对外的统一入口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryDetail 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstractActiveHandle <span class="title">getImpl</span><span class="params">(String categoryDetail)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"参数 categoryDetail =[&#123;&#125;] 获取实现 "</span>, categoryDetail);</span><br><span class="line">        <span class="keyword">for</span> (AbstractActiveHandle activeHandle : activeHandleList) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (activeHandle.getCategoryDetail().equals(categoryDetail)) &#123;</span><br><span class="line">                <span class="keyword">return</span> activeHandle;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"没有该实现"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类AbstractActiveHandle实现活动规则判断、发放奖励的算法骨架，子类实现具体的规则判断，这样就实现了代码的优化和公用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面文章由抽奖活动赠送不同的奖励从而引出了策略模式，定义一个策略接口，不同的奖励发放实现不同的策略。即使后续新增加奖励种类，只要重新实现一个策略即可，符合了设计模式中的&lt;em&gt;开闭原则-对扩展开放对修改关闭&lt;/em&gt;。我在一次订单活动功能开发中使用到了策略模式，在开发的过程中发现，订单符合活动条件的判断、发放奖励给用户，可以提升到父类实现，具体的条件判断逻辑可以延迟到子类去实现，从而引出本篇文章的主题：模板模式。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://ydstudios.gitee.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://ydstudios.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="https://ydstudios.gitee.io/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="模板模式" scheme="https://ydstudios.gitee.io/tags/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 隐藏.idea与.iml文件</title>
    <link href="https://ydstudios.gitee.io/post/c41bdbee.html"/>
    <id>https://ydstudios.gitee.io/post/c41bdbee.html</id>
    <published>2020-12-04T20:56:58.000Z</published>
    <updated>2020-12-04T13:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 IDEA 中会自动帮我们创建.idea 和.iml 文件，其实这两个文件对我们没啥用的，但是也不能删掉(项目需要而且删了只好还会自动创建)，那我们只好想法子给他隐藏掉。</p><a id="more"></a><p>Windows 系统则依次点击 File —- Setting —- Editor —- File Types</p><p>Mac系统依次点击Preferences—- Editor —- File Types</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201204210639.png" alt="Mac系统设置"></p><p>在图中红框处添加 .idea 和 *iml，然后保存即可！忽略其他结尾的文件也可以这么操作的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 IDEA 中会自动帮我们创建.idea 和.iml 文件，其实这两个文件对我们没啥用的，但是也不能删掉(项目需要而且删了只好还会自动创建)，那我们只好想法子给他隐藏掉。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="idea" scheme="https://ydstudios.gitee.io/tags/idea/"/>
    
      <category term="开发工具" scheme="https://ydstudios.gitee.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习之策略模式</title>
    <link href="https://ydstudios.gitee.io/post/170b3d6a.html"/>
    <id>https://ydstudios.gitee.io/post/170b3d6a.html</id>
    <published>2020-10-24T11:58:02.000Z</published>
    <updated>2020-12-06T14:04:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>策略模式（Strategy Pattern）我觉得在23中常见的设计模式里面是一种比较简单的，使用场景也很多。在策略模式中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象,策略对象改变 context 对象的执行算法。</p><a id="more"></a><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><h6 id="意图"><a href="#意图" class="headerlink" title="意图:"></a>意图:</h6><p>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p><h6 id="主要解决："><a href="#主要解决：" class="headerlink" title="主要解决："></a>主要解决：</h6><p>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><h6 id="何时使用："><a href="#何时使用：" class="headerlink" title="何时使用："></a>何时使用：</h6><p>一个系统有许多许多类，而区分它们的只是他们直接的行为。</p><h6 id="如何解决："><a href="#如何解决：" class="headerlink" title="如何解决："></a>如何解决：</h6><p>将这些算法封装成一个一个的类，任意地替换。</p><h6 id="关键代码："><a href="#关键代码：" class="headerlink" title="关键代码："></a>关键代码：</h6><p>需要实现同一个接口。</p><h6 id="应用实例："><a href="#应用实例：" class="headerlink" title="应用实例："></a>应用实例：</h6><ul><li>诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 </li><li>旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。 </li><li>JAVA AWT 中的 LayoutManager。</li></ul><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><ul><li>算法可以自由切换。 </li><li>避免使用多重条件判断。 </li><li>扩展性良好。</li></ul><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><ul><li>策略类会增多。 </li><li>所有策略类都需要对外暴露(这个也不一定)。</li></ul><h6 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h6><ul><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 </li><li>一个系统需要动态地在几种算法中选择一种。 </li><li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li></ul><blockquote><p>注意： 如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p></blockquote><h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><p>以抽奖活动发奖为例，奖品多种多样，可能是现金奖，话费奖品，实物奖等等，每种奖品的发放方式都不一样，比如现金是直接转账，话费奖品是调用运营商提供接口发放，实物奖需要人工快递寄送。在未采用策略模式之前，少不了使用 if…else…来判断发放，当增加一种奖品类型时，就需要增加 if 判断。而采取策略模式之后，只需实现一个策略类即可，对原来的逻辑无需做任何改动，也不会影响其他策略的正常逻辑。</p><h4 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h4><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201025114859.png" alt="策略模式UML图"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>客户端需要判断要使用哪一个具体的策略类，若还是按照传统的方法 if…else…来判断策略模式就没有意义了，因此策略模式一般都是结合其他模式共同使用。本文中策略类使用 Byte 来标识，也可以在策略类中增加抽象方法，返回值为枚举类型。</p><ol><li><p>定义策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 策略接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘洋 Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RewardSendStrategy</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发放奖励的类型,通过这个方法来标示不同的策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Byte <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法奖励的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendReward</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发送现金奖励策略实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.common.enums.RewardTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.service.RewardSendStrategy;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送现金奖品策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘洋 Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashRewardSendStrategy</span> <span class="keyword">implements</span> <span class="title">RewardSendStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RewardTypeEnum.CASH.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendReward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发放现金奖品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发放积分奖品策略实现类</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.common.enums.RewardTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.service.RewardSendStrategy;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发放积分奖品策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘洋 Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PointRewardSendStrategy</span> <span class="keyword">implements</span> <span class="title">RewardSendStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RewardTypeEnum.POINT.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendReward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发放积分奖品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发放优惠券奖品策略实现类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.common.enums.RewardTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.service.RewardSendStrategy;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送优惠券策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘洋 Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponRewardSendStrategy</span> <span class="keyword">implements</span> <span class="title">RewardSendStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RewardTypeEnum.COUPON.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendReward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发放优惠券奖品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>发放谢谢参与策略实现类</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.common.enums.RewardTypeEnum;</span><br><span class="line"><span class="keyword">import</span> com.ydstudio.flashsale.service.RewardSendStrategy;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 谢谢参与奖品发放策略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘洋 Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThankYouRewardSendStrategy</span> <span class="keyword">implements</span> <span class="title">RewardSendStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Byte <span class="title">type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RewardTypeEnum.THANK_YOU.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendReward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"谢谢参与"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>实现对抽象策略封装的上下文对象</p><p>通常 JavaWeb 开发使用 Spring 框架的比较多，在这里我们用Spring 提供的@Autowired注解的一个小技巧，来更方便的实现封装。不用再使用 <code>java RewardSendStrategyContext</code> 去实现 <code>java org.springframework.context.ApplicationContextAware</code> 或者每个策略类再实现 <code>java org.springframework.beans.factory</code>接口然后将策略类添加到 RewardSendStrategyContext 中的 </p><p>属性中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘洋 Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RewardSendStrategyContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;Byte, RewardSendStrategy&gt; strategyMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, RewardSendStrategy&gt; beans = applicationContext.getBeansOfType(RewardSendStrategy<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        beans.values().forEach(bean -&gt; strategyMap.put(bean.type(), bean));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 type 获取奖励实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RewardSendStrategy <span class="title">getRewardSendStrategy</span><span class="params">(Byte type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RewardSendStrategy sendStrategy = strategyMap.get(type);</span><br><span class="line">        <span class="keyword">if</span> (sendStrategy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"没有此种奖励的发放实现"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Autowried</strong> 小技巧，看下这个注解的上的注释，我下面来通过举例子说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In case of a &#123;@link java.util.Collection&#125; or &#123;@link java.util.Map&#125;</span></span><br><span class="line"><span class="comment"> * dependency type, the container will autowire all beans matching the</span></span><br><span class="line"><span class="comment"> * declared value type. In case of a Map, the keys must be declared as</span></span><br><span class="line"><span class="comment"> * type String and will be resolved to the corresponding bean names.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Declares whether the annotated dependency is required.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Defaults to &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 这样定义属性的时候，Spring 会自动的将这个接口的实现类bean全都自动添加到这个 rewardSendStrategyList 中</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> List&lt;RewardSendStrategy&gt; rewardSendStrategyList;</span><br><span class="line"></span><br><span class="line"># 这样定义属性的时候，Spring 会自动的以实现类 beanName 作为 key，bean 作为 value 添加到这个 Map 中</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span>  Map&lt;String, RewardSendStrategy&gt; strategyMap;</span><br></pre></td></tr></table></figure><p><strong>所以策略类上下文对象应该这样去编码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ydstudio.flashsale.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentMap;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送奖励的 Context 类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘洋 Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/10/25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RewardSendStrategyContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;RewardSendStrategy&gt; rewardSendStrategyList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 type 获取奖励实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RewardSendStrategy <span class="title">getRewardSendStrategy</span><span class="params">(Byte type)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(rewardSendStrategyList)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"RewardSendStrategy 注入失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ConcurrentMap&lt;Byte, RewardSendStrategy&gt; strategyMap = rewardSendStrategyList.stream()</span><br><span class="line">                .collect(Collectors.toConcurrentMap(RewardSendStrategy::type, RewardSendStrategy -&gt; RewardSendStrategy));</span><br><span class="line"></span><br><span class="line">        RewardSendStrategy sendStrategy = strategyMap.get(type);</span><br><span class="line">        <span class="keyword">if</span> (sendStrategy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"没有此种奖励的发放实现"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sendStrategy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写是不是很优雅！！！那调用方如何使用呢？很简单的直接注入就能使用了，哈哈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RewardSendStrategyContext strategyContext;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Byte aByte = <span class="keyword">new</span> Byte(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line">    RewardSendStrategy rewardSendStrategy = strategyContext.getRewardSendStrategy(aByte);</span><br><span class="line">    log.info(<span class="string">"奖励发放实现 &#123;&#125;"</span>,sendStrategy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>到此策略模式的概念、结构和代码实现都说完了，是不是很简单！大家在撸码的过程中，如果遇到类似的场景可以使用策略模式的时候，一定要尝试去使用策略模式去优化自己代码，这样既锻炼了自己，也写出了牛逼的代码何乐而不为呢？难道你一直想当 CURD boy 么？？？？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;策略模式（Strategy Pattern）我觉得在23中常见的设计模式里面是一种比较简单的，使用场景也很多。在策略模式中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象,策略对象改变 context 对象的执行算法。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://ydstudios.gitee.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://ydstudios.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="https://ydstudios.gitee.io/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows下搭建RocketMQ双主双从集群</title>
    <link href="https://ydstudios.gitee.io/post/459042a5.html"/>
    <id>https://ydstudios.gitee.io/post/459042a5.html</id>
    <published>2020-10-02T11:06:35.000Z</published>
    <updated>2020-10-10T14:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>RocketMQ是阿里巴巴2016年MQ中间件，使用Java语言开发，在阿里内部，RocketMQ承接了例如“双11”等高并发场景的消息流转，能够处理万亿级别的消息。我们今天就在 windows下搭建RocketMQ多Master多Slave模式（同步）的集群。</p><a id="more"></a><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><h3 id="1-1-下载RocketMQ"><a href="#1-1-下载RocketMQ" class="headerlink" title="1.1 下载RocketMQ"></a>1.1 下载RocketMQ</h3><p>RocketMQ版本：4.7.1</p><p><a href="https://www.apache.org/dyn/closer.cgi?path=rocketmq/4.7.1/rocketmq-all-4.7.1-source-release.zip" target="_blank" rel="noopener">下载地址</a></p><h3 id="1-2-环境要求"><a href="#1-2-环境要求" class="headerlink" title="1.2 环境要求"></a>1.2 环境要求</h3><ul><li><p>Linux64位系统</p></li><li><p>JDK1.8(64位)</p></li><li><p>源码安装需要安装Maven 3.2.x</p></li></ul><h2 id="2-安装RocketMQ"><a href="#2-安装RocketMQ" class="headerlink" title="2 安装RocketMQ"></a>2 安装RocketMQ</h2><h3 id="2-1-安装步骤"><a href="#2-1-安装步骤" class="headerlink" title="2.1 安装步骤"></a>2.1 安装步骤</h3><p>本教程以二进制包方式安装</p><ol><li>解压安装包</li><li>进入安装目录</li></ol><h3 id="2-2-目录介绍"><a href="#2-2-目录介绍" class="headerlink" title="2.2 目录介绍"></a>2.2 目录介绍</h3><ul><li>bin：启动脚本，包括shell脚本和CMD脚本</li><li>conf：实例配置文件 ，包括broker配置文件、logback配置文件等</li><li>lib：依赖jar包，包括Netty、commons-lang、FastJSON等</li></ul><h2 id="3-配置mqnamesrv双主"><a href="#3-配置mqnamesrv双主" class="headerlink" title="3 配置mqnamesrv双主"></a>3 配置mqnamesrv双主</h2><p>在RocketMQ 的配置文件夹的目录下，分别创建文件namesrv-a.properties、namesrv-b.properties</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201010215427.png" alt="namesrv配置文件"></p><p>内容分别是</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listenPort=9876</span><br><span class="line"></span><br><span class="line">listenPort=9870</span><br></pre></td></tr></table></figure><p>即表示namesrv-a监听端口是9876，namesrv-b监听端口是9870.</p><h3 id="3-1-启动双主namesrv"><a href="#3-1-启动双主namesrv" class="headerlink" title="3.1 启动双主namesrv"></a>3.1 启动双主namesrv</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">start mqnamesrv.cmd -c D:/ProgramFiles/rocketmq-all-4.7.1/conf/namesrv/namesrv-a.properties</span><br><span class="line"></span><br><span class="line">start mqnamesrv.cmd -c D:/ProgramFiles/rocketmq-all-4.7.1/conf/namesrv/namesrv-b.properties</span><br></pre></td></tr></table></figure><p>启动成功会在终端打印</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The Name Server boot success serializeType=JSON</span><br></pre></td></tr></table></figure><h2 id="4-配置broker双主双从"><a href="#4-配置broker双主双从" class="headerlink" title="4 配置broker双主双从"></a>4 配置broker双主双从</h2><p>此次我们采用多Master多Slave模式（同步）的方式，每个Master配置一个Slave，有多对Master-Slave，HA采用同步双写方式，即只有主备都写成功，才向应用返回成功，这种模式的优缺点如下：</p><ul><li>优点：数据与服务都无单点故障，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高；</li><li>缺点：性能比异步复制模式略低（大约低10%左右），发送单个消息的RT会略高，且目前版本在主节点宕机后，备机不能自动切换为主机。</li></ul><p>namesrvAddr 我们就不直接写到配置文件里，我们采用在命令行的形式来指定 namesrvAddr</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201010215545.png" alt="队列的文件保存路径"></p><h3 id="4-1-broker-a-的配置"><a href="#4-1-broker-a-的配置" class="headerlink" title="4.1 broker-a 的配置"></a>4.1 broker-a 的配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> broker<span class="_">-a</span> 的配置</span></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line"><span class="meta">#</span><span class="bash"> broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line">brokerName=broker-a</span><br><span class="line">brokerId=0</span><br><span class="line"><span class="meta">#</span><span class="bash">nameServer地址，分号分割</span></span><br><span class="line"><span class="meta">#</span><span class="bash">namesrvAddr=127.0.0.1:9876;127.0.0.1:9870</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=true</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=true</span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 对外服务的监听端口,</span></span><br><span class="line">listenPort=10911</span><br><span class="line">brokerIP1=127.0.0.1</span><br><span class="line">brokerIP2=127.0.0.1</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=48</span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line">waitTimeMillsInSendQueue=500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a/broker-a</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a/broker-a/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a/broker-a/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a/broker-a/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a/broker-a/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a/broker-a/abort</span><br></pre></td></tr></table></figure><h3 id="4-2-broker-a-s-的配置"><a href="#4-2-broker-a-s-的配置" class="headerlink" title="4.2 broker-a-s 的配置"></a>4.2 broker-a-s 的配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> broker<span class="_">-a</span><span class="_">-s</span> 的配置</span></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line">brokerName=broker-a</span><br><span class="line">brokerId=1</span><br><span class="line">listenPort=10931</span><br><span class="line"><span class="meta">#</span><span class="bash">nameServer地址，分号分割</span></span><br><span class="line"><span class="meta">#</span><span class="bash">namesrvAddr=127.0.0.1:9876;127.0.0.1:9870</span></span><br><span class="line">brokerIP1=127.0.0.1</span><br><span class="line">brokerIP2=127.0.0.1</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=48</span><br><span class="line">brokerRole=SLAVE</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a-s/broker-a-s</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a-s/broker-a-s/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a-s/broker-a-s/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a-s/broker-a-s/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a-s/broker-a-s/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-a-s/broker-a-s/abort</span><br></pre></td></tr></table></figure><h3 id="4-3-broker-b-的配置"><a href="#4-3-broker-b-的配置" class="headerlink" title="4.3 broker-b 的配置"></a>4.3 broker-b 的配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> broker-b 的配置</span></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line">brokerName=broker-b</span><br><span class="line">brokerId=0</span><br><span class="line"><span class="meta">#</span><span class="bash">nameServer地址，分号分割</span></span><br><span class="line"><span class="meta">#</span><span class="bash">namesrvAddr=127.0.0.1:9876;127.0.0.1:9870</span></span><br><span class="line"><span class="meta">#</span><span class="bash">在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span></span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateTopicEnable=true</span><br><span class="line"><span class="meta">#</span><span class="bash">是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line">autoCreateSubscriptionGroup=true</span><br><span class="line"><span class="meta">#</span><span class="bash">Broker 对外服务的监听端口,</span></span><br><span class="line">listenPort=10951</span><br><span class="line">brokerIP1=127.0.0.1</span><br><span class="line">brokerIP2=127.0.0.1</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=48</span><br><span class="line">brokerRole=SYNC_MASTER</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line">waitTimeMillsInSendQueue=500</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b/broker-b</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b/broker-b/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b/broker-b/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b/broker-b/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b/broker-b/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b/broker-b/abort</span><br></pre></td></tr></table></figure><h3 id="4-4-broker-b-s-的配置"><a href="#4-4-broker-b-s-的配置" class="headerlink" title="4.4 broker-b-s 的配置"></a>4.4 broker-b-s 的配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> broker-b<span class="_">-s</span> 的配置</span></span><br><span class="line"></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line">brokerName=broker-b</span><br><span class="line">brokerId=1</span><br><span class="line">listenPort=10971</span><br><span class="line"><span class="meta">#</span><span class="bash">nameServer地址，分号分割</span></span><br><span class="line"><span class="meta">#</span><span class="bash">namesrvAddr=127.0.0.1:9876;127.0.0.1:9870</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以不配置</span></span><br><span class="line">brokerIP1=127.0.0.1</span><br><span class="line">brokerIP2=127.0.0.1</span><br><span class="line">deleteWhen=04</span><br><span class="line">fileReservedTime=48</span><br><span class="line">brokerRole=SLAVE</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">存储路径</span></span><br><span class="line">storePathRootDir=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b-s/broker-b-s</span><br><span class="line"><span class="meta">#</span><span class="bash">commitLog 存储路径</span></span><br><span class="line">storePathCommitLog=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b-s/broker-b-s/commitlog</span><br><span class="line"><span class="meta">#</span><span class="bash">消费队列存储路径存储路径</span></span><br><span class="line">storePathConsumeQueue=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b-s/broker-b-s/consumequeue</span><br><span class="line"><span class="meta">#</span><span class="bash">消息索引存储路径</span></span><br><span class="line">storePathIndex=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b-s/broker-b-s/index</span><br><span class="line"><span class="meta">#</span><span class="bash">checkpoint 文件存储路径</span></span><br><span class="line">storeCheckpoint=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b-s/broker-b-s/checkpoint</span><br><span class="line"><span class="meta">#</span><span class="bash">abort 文件存储路径</span></span><br><span class="line">abortFile=D:/ProgramFiles/rocketmq-all-4.7.1/store-broker-b-s/broker-b-s/abort</span><br></pre></td></tr></table></figure><h3 id="4-5-启动双主双从boker"><a href="#4-5-启动双主双从boker" class="headerlink" title="4.5 启动双主双从boker"></a>4.5 启动双主双从boker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start mqbroker.cmd -c D:/ProgramFiles/rocketmq-all-4.7.1/conf/2m-2s-sync/broker-a.properties  -n "127.0.0.1:9876;127.0.0.1:9870"</span><br><span class="line"></span><br><span class="line">start mqbroker.cmd -c D:/ProgramFiles/rocketmq-all-4.7.1/conf/2m-2s-sync/broker-a-s.properties -n "127.0.0.1:9876;127.0.0.1:9870"</span><br><span class="line"></span><br><span class="line">start mqbroker.cmd -c D:/ProgramFiles/rocketmq-all-4.7.1/conf/2m-2s-sync/broker-b.properties  -n "127.0.0.1:9876;127.0.0.1:9870"</span><br><span class="line"></span><br><span class="line">start mqbroker.cmd -c D:/ProgramFiles/rocketmq-all-4.7.1/conf/2m-2s-sync/broker-b-s.properties -n "127.0.0.1:9876;127.0.0.1:9870"</span><br></pre></td></tr></table></figure><h2 id="5-配置rocketmq-console"><a href="#5-配置rocketmq-console" class="headerlink" title="5 配置rocketmq-console"></a>5 配置rocketmq-console</h2><p><code>RocketMQ</code>有一个对其扩展的开源项目<a href="https://github.com/apache/rocketmq-externals" target="_blank" rel="noopener">incubator-rocketmq-externals</a>，这个项目中有一个子模块叫<code>rocketmq-console</code>，这个便是管理控制台项目了，先将<a href="https://github.com/apache/rocketmq-externals" target="_blank" rel="noopener">incubator-rocketmq-externals</a>拉到本地，因为我们需要自己对<code>rocketmq-console</code>进行编译打包运行。</p><h3 id="5-1-下载并编译打包"><a href="#5-1-下载并编译打包" class="headerlink" title="5.1 下载并编译打包"></a>5.1 下载并编译打包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/apache/rocketmq-externals</span><br><span class="line">cd rocketmq-console</span><br><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure><p>注意：打包前在<code>rocketmq-console</code>中配置<code>namesrv</code>集群地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br><span class="line">rocketmq.config.namesrvAddr=127.0.0.1:9876;192.168.25.138:9870</span><br></pre></td></tr></table></figure><p>启动rocketmq-console：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-2.0.0.jar</span><br></pre></td></tr></table></figure><p><em>注意</em>  你执行上述命令之后可能得到的 jar 包的名字和我的不一样，毕竟人家也是一直在更新版本，注意看自己对应目录下的文件，适当替换就行。</p><p>启动成功后，我们就可以通过浏览器访问<code>http://localhost:80</code>进入集群界面了如下图：<br><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20201010215859.png" alt="消息队列集群"></p><h2 id="6-在搭建过程中出现的问题"><a href="#6-在搭建过程中出现的问题" class="headerlink" title="6 在搭建过程中出现的问题"></a>6 在搭建过程中出现的问题</h2><h3 id="6-1-Lock-failed-MQ-already-started"><a href="#6-1-Lock-failed-MQ-already-started" class="headerlink" title="6.1 Lock failed,MQ already started"></a>6.1 Lock failed,MQ already started</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Lock failed,MQ already started</span><br><span class="line">        at org.apache.rocketmq.store.DefaultMessageStore.start(DefaultMessageStore.java:227)</span><br><span class="line">        at org.apache.rocketmq.broker.BrokerController.start(BrokerController.java:853)</span><br><span class="line">        at org.apache.rocketmq.broker.BrokerStartup.start(BrokerStartup.java:64)</span><br><span class="line">        at org.apache.rocketmq.broker.BrokerStartup.main(BrokerStartup.java:58)</span><br></pre></td></tr></table></figure><p>出现这个问题 是因为我们在集群中master和slave共用一个storePath造成的，这个时候我们要启动的每一个broker要指定不一样的storePath 路径就行，也就是在我们的配置文件中修改即可，完美解决。</p><h3 id="6-2-集群状态-SLAVE-NOT-AVAILABLE"><a href="#6-2-集群状态-SLAVE-NOT-AVAILABLE" class="headerlink" title="6.2 集群状态 SLAVE_NOT_AVAILABLE"></a>6.2 集群状态 SLAVE_NOT_AVAILABLE</h3><p>主从的brokerName 一定要设置成一样的，主brokerName=broker-a 那么从的brokerName=broker-a，不然发送消息会出现 SLAVE_NOT_AVAILABLE</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> broker名字，注意此处不同的配置文件填写的不一样</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> broker<span class="_">-a</span> 的配置</span></span><br><span class="line"></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line">brokerName=broker-a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> broker<span class="_">-a</span><span class="_">-s</span> 的配置</span></span><br><span class="line"></span><br><span class="line">brokerClusterName=DefaultCluster</span><br><span class="line">brokerName=broker-a</span><br></pre></td></tr></table></figure><h3 id="6-3-消息发送出现-TIMEOUT-CLEAN-QUEUE-broker-busy"><a href="#6-3-消息发送出现-TIMEOUT-CLEAN-QUEUE-broker-busy" class="headerlink" title="6.3 消息发送出现 [TIMEOUT_CLEAN_QUEUE]broker busy"></a>6.3 消息发送出现 [TIMEOUT_CLEAN_QUEUE]broker busy</h3> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.apache.rocketmq.client.exception.MQBrokerException: CODE: 2  DESC: [TIMEOUT_CLEAN_QUEUE]broker busy, start flow control for a while, period in queue: 205ms, size of queue: 2</span><br></pre></td></tr></table></figure><p> 解决方式就是合理设置waitTimeMillsInSendQueue的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除发送线程池任务队列的等待时间。如果系统时间减去任务放入队列中的时间小于waitTimeMillsInSendQueue，本次请求任务暂时不移除该任务 默认200ms</span></span><br><span class="line">waitTimeMillsInSendQueue=200</span><br></pre></td></tr></table></figure><p>到此RocketMQ双主双从集群就搭建完毕。</p><p><em>参考资料</em><br><a href="https://blog.csdn.net/chenzhong2010/article/details/106749258" target="_blank" rel="noopener">参考1</a><br><a href="https://blog.csdn.net/vucko/article/details/107487675" target="_blank" rel="noopener">参考2</a><br><a href="https://blog.csdn.net/jianghuiyun/article/details/77971583" target="_blank" rel="noopener">参考3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RocketMQ是阿里巴巴2016年MQ中间件，使用Java语言开发，在阿里内部，RocketMQ承接了例如“双11”等高并发场景的消息流转，能够处理万亿级别的消息。我们今天就在 windows下搭建RocketMQ多Master多Slave模式（同步）的集群。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Windows" scheme="https://ydstudios.gitee.io/tags/Windows/"/>
    
      <category term="RocketMQ" scheme="https://ydstudios.gitee.io/tags/RocketMQ/"/>
    
      <category term="双主双从集群" scheme="https://ydstudios.gitee.io/tags/%E5%8F%8C%E4%B8%BB%E5%8F%8C%E4%BB%8E%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript接收后端Long类型数据精度丢失问题</title>
    <link href="https://ydstudios.gitee.io/post/175ad151.html"/>
    <id>https://ydstudios.gitee.io/post/175ad151.html</id>
    <published>2020-08-26T22:30:22.000Z</published>
    <updated>2020-08-27T14:30:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中，通常我们的数据库主键会使用 bigint，它对应 Java 中的 Long，但是当Long的数值超过一定值时传到前端后会丢失精度。原因是JavaScript的number类型有个安全值，即2的53次方，为9007199254740991，如果超过这个值，那么JavaScript会出现不精确的问题。</p><a id="more"></a><p>我们可以直接在浏览器中打印出JavaScript的number类型有个安全值，如下图所示：</p><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20200826225013.png" alt="JavaScript的number类型有个安全值"></p><p>如何解决这个问题呢？最简单的办法就是直接后台在返回给前端的时候，把 Long 类型的数据转换成字符串即可。如果自己手动转我想这个会是一个工作量不小的活，那我们怎么安全快速的解决这个问题呢？</p><ul><li><p>方案一</p><p>如果你们是使用jackson框架的话，可以在相应的字段上加上以下的注解（若是用的 FastJson 也有相应的注解）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonSerialize;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;</span><br><span class="line"><span class="comment">//序列化成String的传</span></span><br><span class="line"></span><br><span class="line"> <span class="meta">@JsonSerialize</span>(using = ToStringSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"> <span class="title">private</span> <span class="title">Long</span> <span class="title">id</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>方案二</p><p>可以自定义Jackson的ObjectMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomJacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title">ObjectMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomJacksonObjectMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// 设置日期转换yyyy-MM-dd HH:mm:ss</span></span><br><span class="line">        setDateFormat(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">        <span class="comment">// 序列换成json时,将所有的long变成string,因为js中得数字类型不能包含所有的java long值</span></span><br><span class="line">        SimpleModule simpleModule = <span class="keyword">new</span> SimpleModule(<span class="string">"LongModule"</span>, <span class="keyword">new</span> Version(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">""</span>));</span><br><span class="line">        simpleModule.addSerializer(Long<span class="class">.<span class="keyword">class</span>, <span class="title">ToStringSerializer</span>.<span class="title">instance</span>)</span>;</span><br><span class="line">        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">        registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方案三</p><p>前端自己解决，使用第三方库如json-bigint 等</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中，通常我们的数据库主键会使用 bigint，它对应 Java 中的 Long，但是当Long的数值超过一定值时传到前端后会丢失精度。原因是JavaScript的number类型有个安全值，即2的53次方，为9007199254740991，如果超过这个值，那么JavaScript会出现不精确的问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://ydstudios.gitee.io/tags/java/"/>
    
      <category term="JavaScript" scheme="https://ydstudios.gitee.io/tags/JavaScript/"/>
    
      <category term="数据精度" scheme="https://ydstudios.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%B2%BE%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>编程过程中抽象类和接口的抉择</title>
    <link href="https://ydstudios.gitee.io/post/665bcc51.html"/>
    <id>https://ydstudios.gitee.io/post/665bcc51.html</id>
    <published>2020-08-24T21:51:35.000Z</published>
    <updated>2020-10-10T14:35:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一位程序员在编码的过程中，终会遇到这种情况：这个功能我到底是用接口呢？还是用抽象类呢？</p><a id="more"></a><p>最近在项目中负责支付功能，由于项目是在原有的基础上，由小程序扩充终端到了App，小程序之前又对接了微信的 jsapi ，所以现在的对接支付平台的情况变为，银联支付宝App 支付、易付宝 App支付、微信jspai支付、微信App支付。（为啥没有对接小程序支付，却对接了 jsapi 支付，那我就不晓得了）。对接一个平台的支付就需要实现下单、异步回调处理、订单查询、订单退款、订单退款查询，于是我就在抽象类和接口之间徘徊，不过短暂的思考过后我还是选择了接口。</p><p>那什么时候使用接口？什么时候使用抽象类？</p><p>使用抽象类是为了代码的复用，而使用接口的动机是为了实现多态性。<br>抽象类适合用来定义某个领域的固有属性，也就是本质，接口适合用来定义某个领域的扩展功能。</p><h4 id="什么时候使用抽象类"><a href="#什么时候使用抽象类" class="headerlink" title="什么时候使用抽象类?"></a>什么时候使用抽象类?</h4><ul><li>当2个或多个类中有重复部分的时候，我们可以抽象出来一个基类，如果希望这个基类不能被实例化，就可以把这个基类设计成抽象类。</li><li>当需要为一些类提供公共的实现代码时，应优先考虑抽象类。 因为抽象类中的非抽象方法可以被子类继承下来，因为抽象类中的非抽象方法可以被子类继承下来，使实现功能的代码更简单。抽象类只能是单继承的，不能多继承。</li></ul><h4 id="什么时候使用接口？"><a href="#什么时候使用接口？" class="headerlink" title="什么时候使用接口？"></a>什么时候使用接口？</h4><ul><li>当注重代码的扩展性跟可维护性时，应当优先采用接口。</li><li>接口与实现它的类之间可以不存在任何层次关系，接口可以实现毫不相关类的相同行为，比抽象类的使用更加方便灵活;</li><li>接口只关心对象之间的交互的方法，而不关心对象所对应的具体类。接口是程序之间的一个协议，比抽象类的使用更安全、清晰。一般使用接口的情况更多。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一位程序员在编码的过程中，终会遇到这种情况：这个功能我到底是用接口呢？还是用抽象类呢？&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="编程" scheme="https://ydstudios.gitee.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="抽象类" scheme="https://ydstudios.gitee.io/tags/%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    
      <category term="接口" scheme="https://ydstudios.gitee.io/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习之责任链模式</title>
    <link href="https://ydstudios.gitee.io/post/8ec2718b.html"/>
    <id>https://ydstudios.gitee.io/post/8ec2718b.html</id>
    <published>2020-05-12T22:36:21.000Z</published>
    <updated>2020-12-06T04:57:23.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h5><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><a id="more"></a><h6 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h6><p>意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><ul><li>主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</li></ul><ul><li><p>何时使用 ：在处理消息的时候以过滤很多道。</p></li><li><p>如何解决：拦截的类都实现统一接口。</p></li></ul><ul><li><p>关键代码：Handler 里面聚合它自己，在 HandlerRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。</p></li><li><p>应用实例： 1、红楼梦中的”击鼓传花”。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。</p></li></ul><h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><ul><li>降低耦合度。它将请求的发送者和接收者解耦。 </li><li>简化了对象。使得对象不需要知道链的结构。 </li><li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。</li><li>增加新的请求处理类很方便。</li></ul><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><ul><li><p>不能保证请求一定被接收。 </p></li><li><p>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 </p></li><li><p>可能不容易观察运行时的特征，有碍于除错。</p></li></ul><h6 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h6><ul><li>有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 </li><li>在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 </li><li>可动态指定一组对象处理请求</li></ul><h6 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h6><p>本文以各种电商系统订单实付金额计算为例，订单最终用户所需要付的金额可能是这样的：</p><p><strong>应付金额=订单金额-优惠券优惠金额-促销活动优惠金额-会员权益优惠金额</strong></p><p>当然也有可能还会增加其他的计算步骤，使用责任链模式来实现订单金额计算，若增加了其他计算步骤，直接将步骤加入到链中即可，而无需改动以前的代码，最大程度减小出错的可能性。责任链分为纯责任链与不纯责任链，在日常开发中，很少有纯的责任链，所谓纯的责任链，就是单个链上处理器要么独立处理，要么处理不了交给下一个处理器进行处理。</p><h6 id="本文示例UML图"><a href="#本文示例UML图" class="headerlink" title="本文示例UML图"></a>本文示例UML图</h6><p><img src="https://gitee.com/ydstudios/blogImage/raw/master/img/20200512224609.jpg" alt="示例 UML 图"></p><p> <strong>为了简化示例，代码中关于优惠金额的计算都写固定值。</strong></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装处理器链处理元素上下文，即待处理的订单</span></span><br><span class="line"><span class="comment"> * 省略 get/set 方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderDto</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前处理器位于处理器 chain 上的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Double amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * VIP 等级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer vipLevel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优惠券</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String couponNo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  抽象处理者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderAbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减免金额处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderDto 待处理订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 处理器链</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(OrderDto orderDto, OrderHandlerChain chain)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单处理器的权重</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">weight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>订单处理器链<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单处理器链</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHandlerChain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderAbstractHandler&gt; chainList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化订单处理器链</span></span><br><span class="line"><span class="comment"> * 真实编码的时候尽量不要这样写，这样不够优雅</span></span><br><span class="line"><span class="comment"> * 可以实现  ApplicationContextAware  进行 bean 的注入或者其他方式实现自动注入就好</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderHandlerChain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        chainList.add(<span class="keyword">new</span> CouponOrderHandler());</span><br><span class="line">        chainList.add(<span class="keyword">new</span> VipOrderHandler());</span><br><span class="line">        chainList.add(<span class="keyword">new</span> SalesOrderHandler());</span><br><span class="line">        <span class="comment">// 根据处理器的权重，对处理器链中元素进行排序</span></span><br><span class="line">        chainList.sort(Comparator.comparingInt(OrderAbstractHandler::weight));</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.chainList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(OrderDto context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getPos() &lt; chainList.size()) &#123;</span><br><span class="line">            OrderAbstractHandler handler = chainList.get(context.getPos());</span><br><span class="line">            <span class="comment">// 移动位于处理器链中的位置</span></span><br><span class="line">            context.setPos(context.getPos() + <span class="number">1</span>);</span><br><span class="line">            handler.doHandle(context, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure></li></ul><h6 id="具体处理实现"><a href="#具体处理实现" class="headerlink" title="具体处理实现"></a>具体处理实现</h6><ul><li>优惠券减免金额实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优惠券减免金额</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 刘洋 Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponOrderHandler</span> <span class="keyword">extends</span> <span class="title">OrderAbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(OrderDto context, OrderHandlerChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getCouponNo() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            context.setAmount(context.getAmount() - <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用下一个处理器进行处理</span></span><br><span class="line">        chain.handle(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>会员等级减免金额实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 会员等级减免金额</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VipOrderHandler</span> <span class="keyword">extends</span> <span class="title">OrderAbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(OrderDto context, OrderHandlerChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getVipLevel() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            context.setAmount(context.getAmount() - <span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用下一个处理器进行处理</span></span><br><span class="line">        chain.handle(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>促销活动优惠金额实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 促销活动优惠金额</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/5/4</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.6.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesOrderHandler</span> <span class="keyword">extends</span> <span class="title">OrderAbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(OrderDto context, OrderHandlerChain chain)</span> </span>&#123;</span><br><span class="line">        Double amount = context.getAmount();</span><br><span class="line">        <span class="keyword">if</span> (amount != <span class="keyword">null</span> &amp;&amp; amount &gt; <span class="number">80</span>d) &#123;</span><br><span class="line">            context.setAmount(amount * <span class="number">0.9</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用下一个处理器进行处理</span></span><br><span class="line">        chain.handle(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>测试结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OrderHandlerChain orderHandlerChain = <span class="keyword">new</span> OrderHandlerChain();</span><br><span class="line">        OrderDto order = <span class="keyword">new</span> OrderDto();</span><br><span class="line">        order.setOrderNo(<span class="string">"123"</span>);</span><br><span class="line">        order.setAmount(<span class="number">100</span>d);</span><br><span class="line">        order.setVipLevel(<span class="number">3</span>);</span><br><span class="line">        order.setCouponNo(<span class="string">"111"</span>);</span><br><span class="line"></span><br><span class="line">        orderHandlerChain.handle(order);</span><br><span class="line">        System.out.println(<span class="string">"订单最终金额为： "</span> + order.getAmount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终输出结果： 订单最终金额为： 76.5<br>如果删除优惠券，订单的实付金额就又变动了。</p><p><strong>总结：</strong></p><p>处理器链调用handle方法，逐个调用处理器链中的处理器的doHanle方法，对订单进行处理，当前处理器处理完毕后，可以选择是否继续交由下一个处理器进行处理，即设置chain.handle(context);，如果不需要继续往下处理，不调用此代码即可。 </p><p>网上流传的代码都是直接在抽象处理器中包含下一个处理器的引用，这样导致在客户端使用的时候，就需要手动去逐个set下级处理器，手误很容易造成处理器死循环的情况，也可能出现缺失某个处理器的情况，因而本文参照Tomcat源码中Filter的作法，引入了Chain类，统一对处理器封装为链，减少客户端使用时出错的可能。</p><p>链式处理的好处在于增加减少新的处理器不会影响其他处理器的逻辑，各个处理器之间相互独立，可以减小耦合带来的影响。</p><blockquote><p>参考<a href="http://nullpointer.pw/design-patterns-chain-responsibility.html" target="_blank" rel="noopener">设计模式之责任链模式实战</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h5&gt;&lt;p&gt;顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="java" scheme="https://ydstudios.gitee.io/tags/java/"/>
    
      <category term="设计模式" scheme="https://ydstudios.gitee.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="责任链模式" scheme="https://ydstudios.gitee.io/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的bin-log</title>
    <link href="https://ydstudios.gitee.io/post/d1d9a9.html"/>
    <id>https://ydstudios.gitee.io/post/d1d9a9.html</id>
    <published>2020-03-15T15:22:12.000Z</published>
    <updated>2020-12-18T14:02:34.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="什么是binlog？"><a href="#什么是binlog？" class="headerlink" title="什么是binlog？"></a>什么是binlog？</h6><p>mysql-binlog是MySQL数据库的二进制日志，用于记录用户对数据库操作的SQL语句（除了数据查询语句，即记录insert、update、delete的sql）信息。<br>可以使用mysqlbin命令查看二进制日志的内容。</p><a id="more"></a><h6 id="MySQL-bin-log-的格式"><a href="#MySQL-bin-log-的格式" class="headerlink" title="MySQL bin-log 的格式"></a>MySQL bin-log 的格式</h6><p>binlog的格式也有三种：STATEMENT、ROW、MIXED </p><ul><li><p>1、 STATMENT模式：基于SQL语句的复制(statement-based replication, SBR)，每一条会修改数据的sql语句会记录到binlog中。<br>优点：不需要记录每一条SQL语句与每行的数据变化，这样子binlog的日志也会比较少，减少了磁盘IO，提高性能。<br>缺点：在某些情况下会导致master-slave中的数据不一致(如sleep()函数， last_insert_id()，以及user-defined functions(udf)等会出现问题)</p></li><li><p>2、ROW模式：基于行的复制(row-based replication, RBR)：不记录每一条SQL语句的上下文信息，仅需记录哪条数据被修改了，修改成了什么样子了。<br>优点：不会出现某些特定情况下的存储过程、或function、或trigger的调用和触发无法被正确复制的问题。<br>缺点：会产生大量的日志，尤其是alter table的时候会让日志暴涨。</p></li><li><p>3、MIXED模式：混合模式复制(mixed-based replication, MBR)：以上两种模式的混合使用，一般的复制使用STATEMENT模式保存binlog，对于STATEMENT模式无法复制的操作使用ROW模式保存binlog，MySQL会根据执行的SQL语句选择日志保存方式。</p></li></ul><h6 id="服务器上用哪种模式好呢？"><a href="#服务器上用哪种模式好呢？" class="headerlink" title="服务器上用哪种模式好呢？"></a>服务器上用哪种模式好呢？</h6><p>我们来举例子说明：</p><ul><li><ol><li>insert into xxtable values (x,y,z)为例</li></ol></li></ul><p>影响：1行,且为新增1行, 对于其他行没有影响. 这个情况,用row格式,直接复制磁盘上1行的新增变化。</p><ul><li><ol start="2"><li>update xxtable set age=21 where name=’sss’为例<br>影响：一般也只是影响1行. 用row也比较合适。</li></ol></li><li><ol start="3"><li>过年发红包,全公司的人,都涨薪100元.<br>update xxtable set salary=salary+100;<br>影响: 这个语句带来的影响是针对每一行的, 因此磁盘上很多row都发生了变化.此处适合用statment格式的日志.</li></ol></li></ul><p>MySQL后来又提供了一个新的混合模式（MIXED），很好理解为上述两种的模式的自由切换。Mysql会根据执行SQL来选择使用STATEMENT还是ROW模式。<br>所以我们用这种模式是最好的，能兼顾两者的优点。</p><h6 id="MySQL如何配置bin-log"><a href="#MySQL如何配置bin-log" class="headerlink" title="MySQL如何配置bin-log"></a>MySQL如何配置bin-log</h6><p>在MySQL配置文件my.cnf文件中的mysqld节中添加下面的配置文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#设置日志格式</span></span><br><span class="line">binlog_format = mixed</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置日志路径，注意路经需要mysql用户有权限写</span></span><br><span class="line">log-bin = /data/mysql/logs/mysql-bin.log</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置binlog清理时间</span></span><br><span class="line">expire_logs_days = 7</span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog每个日志文件大小</span></span><br><span class="line">max_binlog_size = 100m</span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog缓存大小</span></span><br><span class="line">binlog_cache_size = 4m</span><br><span class="line"></span><br><span class="line"><span class="comment">#最大binlog缓存大小</span></span><br><span class="line">max_binlog_cache_size = 512m</span><br></pre></td></tr></table></figure><p>重启MySQL生效，如果不方便重启服务，也可以直接修改对应的变量即可。</p><h6 id="MySQL的bin-log如何查看"><a href="#MySQL的bin-log如何查看" class="headerlink" title="MySQL的bin-log如何查看"></a>MySQL的bin-log如何查看</h6><p>MySQL的bin-log是二进制格式的无法直接查看，MySQL提供了两种方式进行查看。</p><ul><li>1、 简单查看 show binlog events<br>语法 ：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">BINLOG</span> <span class="keyword">EVENTS</span></span><br><span class="line">[<span class="keyword">IN</span> <span class="string">'log_name'</span>]</span><br><span class="line">[<span class="keyword">FROM</span> pos]</span><br><span class="line">[<span class="keyword">LIMIT</span> [<span class="keyword">offset</span>,] <span class="keyword">row_count</span>]</span><br></pre></td></tr></table></figure>在MySQL客户端中执行<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; show binlog events in 'mysql-bin.000004' \G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000004</span><br><span class="line">        Pos: 4</span><br><span class="line"> Event_type: Format_desc</span><br><span class="line">  Server_id: 1</span><br><span class="line">End_log_pos: 107</span><br><span class="line">       Info: Server ver: 5.5.48-log, Binlog ver: 4</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">   Log_name: mysql-bin.000004</span><br><span class="line">        Pos: 107</span><br><span class="line"> Event_type: Query</span><br><span class="line">  Server_id: 1</span><br><span class="line">End_log_pos: 331</span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db01`</span>; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line">*************************** <span class="number">3.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">331</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">399</span></span><br><span class="line">       Info: <span class="keyword">BEGIN</span></span><br><span class="line">*************************** <span class="number">4.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">399</span></span><br><span class="line"> Event_type: Intvar</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">427</span></span><br><span class="line">       Info: INSERT_ID=<span class="number">1</span></span><br><span class="line">*************************** <span class="number">5.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">427</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">563</span></span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db01`</span>; <span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'jim'</span>)</span><br><span class="line">*************************** <span class="number">6.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">563</span></span><br><span class="line"> Event_type: Xid</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">590</span></span><br><span class="line">       Info: <span class="keyword">COMMIT</span> <span class="comment">/* xid=22 */</span></span><br><span class="line">*************************** <span class="number">7.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">590</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">842</span></span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db02`</span>; <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line">*************************** <span class="number">8.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">842</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">910</span></span><br><span class="line">       Info: <span class="keyword">BEGIN</span></span><br><span class="line">*************************** <span class="number">9.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">910</span></span><br><span class="line"> Event_type: Intvar</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">938</span></span><br><span class="line">       Info: INSERT_ID=<span class="number">2</span></span><br><span class="line">*************************** <span class="number">10.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">938</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1077</span></span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db01`</span>; <span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'刘洋'</span>)</span><br><span class="line">*************************** <span class="number">11.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1077</span></span><br><span class="line"> Event_type: Xid</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1104</span></span><br><span class="line">       Info: <span class="keyword">COMMIT</span> <span class="comment">/* xid=128 */</span></span><br><span class="line">*************************** <span class="number">12.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1104</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1172</span></span><br><span class="line">       Info: <span class="keyword">BEGIN</span></span><br><span class="line">*************************** <span class="number">13.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1172</span></span><br><span class="line"> Event_type: Intvar</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1200</span></span><br><span class="line">       Info: INSERT_ID=<span class="number">3</span></span><br><span class="line">*************************** <span class="number">14.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1200</span></span><br><span class="line"> Event_type: <span class="keyword">Query</span></span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1342</span></span><br><span class="line">       Info: <span class="keyword">use</span> <span class="string">`db01`</span>; <span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'张从容'</span>)</span><br><span class="line">*************************** <span class="number">15.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">   Log_name: mysql-<span class="keyword">bin</span><span class="number">.000004</span></span><br><span class="line">        Pos: <span class="number">1342</span></span><br><span class="line"> Event_type: Xid</span><br><span class="line">  Server_id: <span class="number">1</span></span><br><span class="line">End_log_pos: <span class="number">1369</span></span><br><span class="line">       Info: <span class="keyword">COMMIT</span> <span class="comment">/* xid=146 */</span></span><br><span class="line"><span class="number">15</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li></ul><p>其实我在14和15行之间，进行了一次Select查询，但是这个操作在bin-log中并没有发现，印证了开头说的bin-log不记录Select查询。</p><p><strong>上述出现的参数解释：</strong></p><ul><li>Log_name:The name of the file that is being listed.</li><li>Pos：The position at which the event occurs.</li><li>Event_type：An identifier that describes the event type.</li><li>Server_id：The server ID of the server on which the event originated.</li><li>End_log_pos：The position at which the next event begins, which is equal to Pos plus the size of the event.</li><li>Info：More detailed information about the event type. The format of this information depends on the event type.</li></ul><ul><li><p>1、 详细查看 mysqlbinlog</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法： mysqlbinlog [bin-log-name]</span><br></pre></td></tr></table></figure></li><li><p>问题1：无法识别的编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sam-Mac:data Sam$ /usr/local/mysql/bin/mysqlbinlog  ./mysql-bin.000004</span><br><span class="line">/usr/local/mysql/bin/mysqlbinlog: unknown variable 'default-character-set=utf8'</span><br></pre></td></tr></table></figure><p>原因： mysqlbinlog这个工具无法识别binlog中的配置中的default-character-set=utf8mb4这个指令，使用参数–no-defaults</p></li><li><p>问题2：bin-log日志文件不存在</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/mysql/bin/mysqlbinlog: File './mysql-bin.000004' not found (Errcode: 13)</span><br></pre></td></tr></table></figure><p>原因：权限问题使用sudo</p></li></ul><p><strong>最终命令： sudo /usr/local/mysql/bin/mysqlbinlog –no-defaults /usr/local/mysql/data/mysql-bin.000004</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">Sam-Mac:data Sam$ sudo /usr/local/mysql/bin/mysqlbinlog <span class="comment">--no-defaults /usr/local/mysql/data/mysql-bin.000004</span></span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=1*/</span>;</span><br><span class="line"><span class="comment">/*!40019 SET @@session.max_insert_delayed_threads=0*/</span>;</span><br><span class="line"><span class="comment">/*!50003 SET @OLD_COMPLETION_TYPE=@@COMPLETION_TYPE,COMPLETION_TYPE=0*/</span>;</span><br><span class="line">DELIMITER <span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 4</span></span><br><span class="line"><span class="comment">#200315 13:18:28 server id 1  end_log_pos 107 Start: binlog v 4, server v 5.5.48-log created 200315 13:18:28 at startup</span></span><br><span class="line"><span class="comment"># Warning: this binlog is either in use or was not closed properly.</span></span><br><span class="line"><span class="keyword">ROLLBACK</span><span class="comment">/*!*/</span>;</span><br><span class="line">BINLOG '</span><br><span class="line">pLptXg8BAAAAZwAAAGsAAAABAAQANS41LjQ4LWxvZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAACkum1eEzgNAAgAEgAEBAQEEgAAVAAEGggAAAAICAgCAA==</span><br><span class="line">'<span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 107</span></span><br><span class="line"><span class="comment">#200315 13:21:09 server id 1  end_log_pos 331 Querythread_id=5exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">use</span> <span class="string">`db01`</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584249669</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.pseudo_thread_id=<span class="number">5</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.foreign_key_checks=<span class="number">1</span>, @@session.sql_auto_is_null=<span class="number">0</span>, @@session.unique_checks=<span class="number">1</span>, @@session.autocommit=<span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.sql_mode=<span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.auto_increment_increment=<span class="number">1</span>, @@session.auto_increment_offset=<span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.character_set_client=<span class="number">33</span>,@@session.collation_connection=<span class="number">33</span>,@@session.collation_server=<span class="number">33</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.lc_time_names=<span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.collation_database=<span class="keyword">DEFAULT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 331</span></span><br><span class="line"><span class="comment">#200315 13:22:39 server id 1  end_log_pos 399 Querythread_id=59exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584249759</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 399</span></span><br><span class="line"><span class="comment">#200315 13:22:39 server id 1  end_log_pos 427 Intvar</span></span><br><span class="line"><span class="keyword">SET</span> INSERT_ID=<span class="number">1</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 427</span></span><br><span class="line"><span class="comment">#200315 13:22:39 server id 1  end_log_pos 563 Querythread_id=59exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584249759</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'jim'</span>)</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 563</span></span><br><span class="line"><span class="comment">#200315 13:22:39 server id 1  end_log_pos 590 Xid = 22</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 590</span></span><br><span class="line"><span class="comment">#200315 13:25:56 server id 1  end_log_pos 842 Querythread_id=5exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">use</span> <span class="string">`db02`</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584249956</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`student_name`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`birthday`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 842</span></span><br><span class="line"><span class="comment">#200315 16:36:37 server id 1  end_log_pos 910 Querythread_id=1201exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584261397</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 910</span></span><br><span class="line"><span class="comment">#200315 16:36:37 server id 1  end_log_pos 938 Intvar</span></span><br><span class="line"><span class="keyword">SET</span> INSERT_ID=<span class="number">2</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 938</span></span><br><span class="line"><span class="comment">#200315 16:36:37 server id 1  end_log_pos 1077 Querythread_id=1201exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">use</span> <span class="string">`db01`</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584261397</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'刘洋'</span>)</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1077</span></span><br><span class="line"><span class="comment">#200315 16:36:37 server id 1  end_log_pos 1104 Xid = 128</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1104</span></span><br><span class="line"><span class="comment">#200315 16:37:09 server id 1  end_log_pos 1172 Querythread_id=1201exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584261429</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1172</span></span><br><span class="line"><span class="comment">#200315 16:37:09 server id 1  end_log_pos 1200 Intvar</span></span><br><span class="line"><span class="keyword">SET</span> INSERT_ID=<span class="number">3</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1200</span></span><br><span class="line"><span class="comment">#200315 16:37:09 server id 1  end_log_pos 1342 Querythread_id=1201exec_time=0error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1584261429</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`db01`</span>.<span class="string">`student`</span> ( <span class="string">`id`</span>, <span class="string">`student_name`</span>) <span class="keyword">values</span> ( <span class="string">'0'</span>, <span class="string">'张从容'</span>)</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 1342</span></span><br><span class="line"><span class="comment">#200315 16:37:09 server id 1  end_log_pos 1369 Xid = 146</span></span><br><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment"># End of log file</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="comment">/* added by mysqlbinlog */</span>;</span><br><span class="line"><span class="comment">/*!50003 SET COMPLETION_TYPE=@OLD_COMPLETION_TYPE*/</span>;</span><br><span class="line"><span class="comment">/*!50530 SET @@SESSION.PSEUDO_SLAVE_MODE=0*/</span>;</span><br><span class="line">Sam-Mac:data Sam$</span><br></pre></td></tr></table></figure><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>无论是增量备份还是主从复制，都是需要开启mysql-binlog日志，最好跟数据目录设置到不同的磁盘分区，可以降低io等待，提升性能；<br>并且在磁盘故障的时候可以利用mysql-binlog恢复数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;什么是binlog？&quot;&gt;&lt;a href=&quot;#什么是binlog？&quot; class=&quot;headerlink&quot; title=&quot;什么是binlog？&quot;&gt;&lt;/a&gt;什么是binlog？&lt;/h6&gt;&lt;p&gt;mysql-binlog是MySQL数据库的二进制日志，用于记录用户对数据库操作的SQL语句（除了数据查询语句，即记录insert、update、delete的sql）信息。&lt;br&gt;可以使用mysqlbin命令查看二进制日志的内容。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://ydstudios.gitee.io/tags/mysql/"/>
    
      <category term="binlog" scheme="https://ydstudios.gitee.io/tags/binlog/"/>
    
  </entry>
  
  <entry>
    <title>MySQL 删除 relay log 的方法</title>
    <link href="https://ydstudios.gitee.io/post/da13f861.html"/>
    <id>https://ydstudios.gitee.io/post/da13f861.html</id>
    <published>2020-03-15T14:35:19.000Z</published>
    <updated>2020-12-18T13:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<h6 id="方法1-：自动-设置参数-relay-log-purge-1"><a href="#方法1-：自动-设置参数-relay-log-purge-1" class="headerlink" title="方法1 ：自动 设置参数 relay_log_purge = 1"></a>方法1 ：自动 设置参数 relay_log_purge = 1</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL relay_log_purge = 1;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">或者在/etc/my.cnf [mysqld]模块下面增加以下内容</span><br><span class="line">relay-log-purge = 1</span><br></pre></td></tr></table></figure><a id="more"></a><p>这个参数需要重启数据库才可生效。默认情况下relay-log-purge 是开启的。<br>如果你对从数据库要求不高，可以将relay_log_purge = 1。<br>如果数据库要手动删除relay log请执行 SET GLOBAL relay_log_purge=0。<br>或者在/etc/my.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> [mysqld]模块下面增加以下内容</span></span><br><span class="line">relay-log-purge = 0</span><br></pre></td></tr></table></figure><p>模拟场景：<br>1）从库查看relay log情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# ll</span><br><span class="line">total 5255240</span><br><span class="line">-rw-r----- 1 mysql mysql         56 Aug 18 15:40 auto.cnf</span><br><span class="line">-rw-r----- 1 mysql mysql        207 Aug 23 16:06 mysqld-relay-bin.000032</span><br><span class="line">-rw-r----- 1 mysql mysql        344 Aug 23 18:14 mysqld-relay-bin.000033</span><br><span class="line">-rw-r----- 1 mysql mysql        207 Aug 23 18:14 mysqld-relay-bin.000034</span><br><span class="line">-rw-r----- 1 mysql mysql        321 Aug 23 18:14 mysqld-relay-bin.000035</span><br><span class="line">-rw-r----- 1 mysql mysql        100 Aug 23 18:14 mysqld-relay-bin.index</span><br></pre></td></tr></table></figure><p>2）从库执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SET GLOBAL relay_log_purge = 1;</span></span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show variables like <span class="string">'relay_log_purge'</span>;</span></span><br><span class="line">+-----------------+-------+</span><br><span class="line">| Variable_name   | Value |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">| relay_log_purge | ON    |</span><br><span class="line">+-----------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>3）主库执行flush logs;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush logs;</span></span><br><span class="line">Query OK, 0 rows affected (0.12 sec)</span><br></pre></td></tr></table></figure><p>生成新的binlog<br>4）从库查看relay log 情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# ll</span><br><span class="line">total 5255232</span><br><span class="line">-rw-r----- 1 mysql mysql         56 Aug 18 15:40 auto.cnf</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:16 mysqld-relay-bin.000036</span><br><span class="line">-rw-r----- 1 mysql mysql        369 Aug 26 03:16 mysqld-relay-bin.000037</span><br><span class="line">-rw-r----- 1 mysql mysql         50 Aug 26 03:16 mysqld-relay-bin.index</span><br></pre></td></tr></table></figure><p>可以看到从库的relay log 自动删除只保留最近的两个relay log。说明下如果从库同步出现问题，没有应用的relay log 也不会自动删除relay log。直到解决掉错误，否则relay log 会越挤越多。</p><h6 id="方法2：手动-rm-rf-删除reloy-log"><a href="#方法2：手动-rm-rf-删除reloy-log" class="headerlink" title="方法2：手动 rm -rf 删除reloy log"></a>方法2：手动 rm -rf 删除reloy log</h6><p>1）查看从库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# ll</span><br><span class="line">total 5255256</span><br><span class="line">-rw-r----- 1 mysql mysql         56 Aug 18 15:40 auto.cnf</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:16 mysqld-relay-bin.000036</span><br><span class="line">-rw-r----- 1 mysql mysql        422 Aug 26 03:27 mysqld-relay-bin.000037</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000038</span><br><span class="line">-rw-r----- 1 mysql mysql        683 Aug 26 03:27 mysqld-relay-bin.000039</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000040</span><br><span class="line">-rw-r----- 1 mysql mysql        683 Aug 26 03:27 mysqld-relay-bin.000041</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000042</span><br><span class="line">-rw-r----- 1 mysql mysql        369 Aug 26 03:27 mysqld-relay-bin.000043</span><br><span class="line">-rw-r----- 1 mysql mysql        200 Aug 26 03:27 mysqld-relay-bin.index</span><br></pre></td></tr></table></figure><p>2）从库执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# rm -rf mysqld-relay-bin.000036 mysqld-relay-bin.37 mysqld-relay-bin.38</span><br><span class="line">[root@aliyun1212 data]# ll</span><br><span class="line">total 5255244</span><br><span class="line">-rw-r----- 1 mysql mysql         56 Aug 18 15:40 auto.cnf</span><br><span class="line">-rw-r----- 1 mysql mysql        683 Aug 26 03:27 mysqld-relay-bin.000039</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000040</span><br><span class="line">-rw-r----- 1 mysql mysql        683 Aug 26 03:27 mysqld-relay-bin.000041</span><br><span class="line">-rw-r----- 1 mysql mysql        255 Aug 26 03:27 mysqld-relay-bin.000042</span><br><span class="line">-rw-r----- 1 mysql mysql        369 Aug 26 03:27 mysqld-relay-bin.000043</span><br><span class="line">-rw-r----- 1 mysql mysql        200 Aug 26 03:27 mysqld-relay-bin.index</span><br></pre></td></tr></table></figure><p>从库操作系统层面rm relay log 主库更新数据从库可以继续同步：<br>主库操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert into <span class="built_in">test</span> values(13,<span class="string">'ff'</span>);</span></span><br><span class="line">Query OK, 1 row affected (0.44 sec)</span><br></pre></td></tr></table></figure><p>从库可以看到数据被同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select * from <span class="built_in">test</span>;</span></span><br><span class="line">+----+------+</span><br><span class="line">| id | name |</span><br><span class="line">+----+------+</span><br><span class="line">|  1 | abc  |</span><br><span class="line">|  4 | cc   |</span><br><span class="line">|  5 | dd   |</span><br><span class="line">|  6 | ee   |</span><br><span class="line">|  7 | ee   |</span><br><span class="line">|  8 | ee   |</span><br><span class="line">|  9 | ff   |</span><br><span class="line">| 10 | ff   |</span><br><span class="line">| 11 | ff   |</span><br><span class="line">| 12 | ff   |</span><br><span class="line">| 13 | ff   |</span><br><span class="line">+----+------+</span><br></pre></td></tr></table></figure><p>如果此时 stop slave<br>然后在执行start slave ,会提示以下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line">ERROR 1872 (HY000): Slave failed to initialize relay log info structure from the repository</span><br></pre></td></tr></table></figure><p>此时要执行步骤3<br>3）编辑文件mysqld-relay-bin.index 删除刚才删除的relay log mysqld-relay-bin.000039之前的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 data]# vi mysqld-relay-bin.index </span><br><span class="line">./mysqld-relay-bin.000039</span><br><span class="line">./mysqld-relay-bin.000040</span><br><span class="line">./mysqld-relay-bin.000041</span><br><span class="line">./mysqld-relay-bin.000042</span><br><span class="line">./mysqld-relay-bin.000043</span><br></pre></td></tr></table></figure><p>再次启动start slave</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> start slave;</span></span><br><span class="line">ERROR 1872 (HY000): Slave failed to initialize relay log info structure from the repository</span><br></pre></td></tr></table></figure><p>还是会报错。<br>此时必须重启从库mysql 数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@aliyun1212 ~]# service mysql restart</span><br><span class="line">Shutting down MySQL..                                      [  OK  ]</span><br><span class="line">Starting MySQL....                                         [  OK  ]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看从库状态正常</span></span><br><span class="line"></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> show slave status/G</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;方法1-：自动-设置参数-relay-log-purge-1&quot;&gt;&lt;a href=&quot;#方法1-：自动-设置参数-relay-log-purge-1&quot; class=&quot;headerlink&quot; title=&quot;方法1 ：自动 设置参数 relay_log_purge = 1&quot;&gt;&lt;/a&gt;方法1 ：自动 设置参数 relay_log_purge = 1&lt;/h6&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;mysql&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; SET GLOBAL relay_log_purge = 1;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Query OK, 0 rows affected (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者在/etc/my.cnf [mysqld]模块下面增加以下内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;relay-log-purge = 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://ydstudios.gitee.io/tags/mysql/"/>
    
      <category term="relay-log" scheme="https://ydstudios.gitee.io/tags/relay-log/"/>
    
  </entry>
  
  <entry>
    <title>利用Mac电脑自带应用将iPhone投屏到Mac电脑的教程</title>
    <link href="https://ydstudios.gitee.io/post/29afd8a9.html"/>
    <id>https://ydstudios.gitee.io/post/29afd8a9.html</id>
    <published>2020-03-10T12:40:32.000Z</published>
    <updated>2020-03-10T07:01:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>你只需要准备一根USB数据线，也就是手机的充电线即可，最好是原装的USB线。</p><a id="more"></a><h4 id="手机通过USB线连接电脑"><a href="#手机通过USB线连接电脑" class="headerlink" title="手机通过USB线连接电脑"></a>手机通过USB线连接电脑</h4><p>如果手机是第一次插上这台电脑可能会弹出信任等弹框，手机端点击【信任】，电脑端点击【继续】。<br>总的来说，就是允许电脑访问手机。</p><h4 id="打开Mac-系统自带的播放器QuickTime-Player"><a href="#打开Mac-系统自带的播放器QuickTime-Player" class="headerlink" title="打开Mac 系统自带的播放器QuickTime Player"></a>打开Mac 系统自带的播放器QuickTime Player</h4><p>直接command + 空格键 调出SpotLight 搜索 “QuickTime”，即可调出QuickTime Player播放器。</p><h4 id="菜单栏【文件】–-gt-【新建影片录制】"><a href="#菜单栏【文件】–-gt-【新建影片录制】" class="headerlink" title="菜单栏【文件】–&gt;【新建影片录制】"></a>菜单栏【文件】–&gt;【新建影片录制】</h4><p>打开【QuickTime Player】后，在左上角的菜单栏中【文件】菜单，找到第一项【新建影片录制】。</p><h4 id="更改摄像头选项，选中手机即可。"><a href="#更改摄像头选项，选中手机即可。" class="headerlink" title="更改摄像头选项，选中手机即可。"></a>更改摄像头选项，选中手机即可。</h4><p>点击【新建影片录制】后，此时默认是打开的电脑自带的摄像头，此时可以更新摄像头的来源和麦克风来源。<br>推荐相机选择iPhone的，麦克风选择内置麦克风。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你只需要准备一根USB数据线，也就是手机的充电线即可，最好是原装的USB线。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="MAC" scheme="https://ydstudios.gitee.io/tags/MAC/"/>
    
      <category term="iPhone" scheme="https://ydstudios.gitee.io/tags/iPhone/"/>
    
      <category term="投屏" scheme="https://ydstudios.gitee.io/tags/%E6%8A%95%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>JVM配置参数的类型</title>
    <link href="https://ydstudios.gitee.io/post/ea8be9c5.html"/>
    <id>https://ydstudios.gitee.io/post/ea8be9c5.html</id>
    <published>2020-02-06T15:55:13.000Z</published>
    <updated>2020-02-06T07:57:04.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="参数名称的说明"><a href="#参数名称的说明" class="headerlink" title="参数名称的说明"></a>参数名称的说明</h5><p>JVM配置参数分别用于跟踪监控JVM状态，分配堆内存以及分配栈内存。按照类型分为三类标准参数、非标准参数和非稳定参数</p><a id="more"></a><h6 id="标准参数"><a href="#标准参数" class="headerlink" title="标准参数(-)"></a>标准参数(-)</h6><p>所有 JVM 都必须支持这些参数的功能, 而且向后兼容, 如:</p><ul><li><p>-client : 设置 JVM 使用 client 模式, 特点是启动速度比较快, 但运行时性能和内存管理效率不高. 通常用于客户端应用程序或开发调试; 在32位环境下直接运行 Java 程序默认启用该模式.</p></li><li><p>-server : 设置 JVM 使 server 模式, 特点是启动速度比较慢, 但运行时性能和内存管理效率很高, 适用于生产环境; 在具有64位能力的JDK环境下默认启用该模式.</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Sam-Mac:hexo-blog Sam$ java -version</span><br><span class="line">java version <span class="string">"1.8.0_74"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_74-b02)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.74-b02, mixed mode)</span><br><span class="line">Sam-Mac:hexo-blog Sam$</span><br></pre></td></tr></table></figure><h6 id="非标准参数-X"><a href="#非标准参数-X" class="headerlink" title="非标准参数(-X)"></a>非标准参数(-X)</h6><p>各 JVM 厂商应该都实现这些参数的功能, 但是并不保证所有的 JVM 实现都满足, 且不保证向后兼容。这些用的不多，看看就好。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 解释执行</span><br><span class="line">-Xint</span><br><span class="line"></span><br><span class="line">// 第一次使用就编译成本地代码</span><br><span class="line">-Xcomp</span><br><span class="line"></span><br><span class="line">// 混合模式</span><br><span class="line">-Xmixed</span><br></pre></td></tr></table></figure><h6 id="非稳定参数-XX"><a href="#非稳定参数-XX" class="headerlink" title="非稳定参数(-XX)"></a>非稳定参数(-XX)</h6><p>此类参数各个JVM实现会有所不同, 将来可能会不被支持, 需要慎重使用。这种类型的参数自己又可分为两种，分别如下：</p><ul><li><p>布尔类型。 -XX:+ 或者 - 某个属性值，+ 表示开启，-表示关闭。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 打印GC详细信息</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line"></span><br><span class="line">// 不打印GC详细信息</span><br><span class="line">-XX:-PrintGCDetails</span><br></pre></td></tr></table></figure></li><li><p>KV类型。-XX:属性key=属性值value，例如：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 设置Metaspace的大小</span><br><span class="line">-XX:MetaspaceSize=1024m</span><br></pre></td></tr></table></figure><p>注意: 在”-XX:”后的参数若不需要赋值, 即只是用来配置开启或关闭相应选项, 则需要有 “+” (开启) 或 “-“ (禁止) , 否则应用程序将在日志文件 (如 Tomcat 的日志文件 catalina.out ) 中抛出如下错误:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Missing +/- setting <span class="keyword">for</span> VM option <span class="string">'UseConcMarkSweepGC'</span>. </span><br><span class="line">Error: Could not create the Java Virtual Machine.</span><br><span class="line">Error: A fatal exception has occurred. Program will <span class="built_in">exit</span>.</span><br></pre></td></tr></table></figure><p>可以看出, 这里缺少了 “+/-“ 符号, 导致虚拟机启动异常, 修改后即可正常启动.</p><p>我们常设置的JVM参数Xms和Xmx,属于哪种类型的JVM参数？-Xms等价于-XX:InitialHeapSize,-Xmx等价于-XX:MaxHeapSize，所以他们都是XX类型参数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;参数名称的说明&quot;&gt;&lt;a href=&quot;#参数名称的说明&quot; class=&quot;headerlink&quot; title=&quot;参数名称的说明&quot;&gt;&lt;/a&gt;参数名称的说明&lt;/h5&gt;&lt;p&gt;JVM配置参数分别用于跟踪监控JVM状态，分配堆内存以及分配栈内存。按照类型分为三类标准参数、非标准参数和非稳定参数&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Jvm" scheme="https://ydstudios.gitee.io/tags/Jvm/"/>
    
  </entry>
  
</feed>
